1. ARM 아키텍처의 최대 이점을 기술하시오.

ARM 은 RISC 아키텍처로 명령어의 길이가 가변이 아닌 4 byte 로 고정된다.
또한 다이 사이즈가 작아서 복잡한 유닛을 많이 사용할 수는 없지만 전력 소모가 적다.
근래 들어서는 ARM 도 1 GHz 이상의 높은 주파수를 가진 CPU 가 존재하는 상황이다.

2. 근래 Intel 이 Altera 를 인수했다.
   이것이 노리는 바가 무엇인지 기술하시오.

Altera 는 ARM + FPGA 혹은 FPGA 를 하는 회사다.
Intel 이 Altera 를 인수한 것은 Intel 의 Xeon 을 FPGA 와 연동하기 위함이며
또한 최근 연구 결과에 의하면 딥러닝을 구현하는데 있어서
GPU 보다 FPGA 의 소비 전력 효율이 훨씬 좋다.
(실제로 Altera 및 Intel 관련 업체들 분위기가 좋다)

3. 뺄셈이나 나눗셈보다 덧셈이나 곱셈을 사용하는 것이 유리한 이유를 기술하시오.

기본적으로다이 사이즈가 작은 ARM 같은 경우에는 Functional Unit 을 많이 사용하지 못하기 때문에
CPU 차원에서 별도의 뺄셈기나 나눗셈기가 존재하지 않을 수 있다.
그렇기 때문에 덧셈기와 곱셈기를 활용해서 계산하는 것이 훨씬 좋다.
참고로 나눗셈기는 어떻게 만들어도 1 clock 연산을 만들 수 없다는 것 또한 문제다.

4. ARM 아키텍처에서 되도록이면 연산을 4 byte 단위로 하는 이유는 무엇인가 ?

Intel 아키텍처와는 다르게 ARM 의 경우 1 byte 단위로 접근 할 수 있게 만들어주는 별도의 HW 가 없다.
그러다보니 접근하기 위해 소모해야 하는 clock 이 추가적으로 발생하기 때문에 오히려 성능이 떨어진다.
반면 Intel 아키텍처의 경우에는 별도의 HW 가 있기 때문에 byte 에 상관없이 1 clock 이다.

5. DSP 명령어를 사용하는 이유를 기술하시오.

일반적인 곱셈과 다르게 DSP 는 곱셈을 병렬로 처리 할 수 있기 때문이다.
즉 CPU 로 곱셈을 수행하면 200 clock 걸릴 것이 DSP 로 처리하면 50 clock 밖에 걸리지 않는 다는 것이다.
데이터를 병렬로 처리하면서 연산 속도는 1 clock 이기 때문에 매우 효율적이라고 할 수 있다.

6. Load/Store Architecture 가 무엇인지 기술하시오.

Intel 의 경우에는 Memory 에서 Memory 로 데이터를 옮길 수 있던 반면
ARM 의 경우에는 Memory 에서 레지스터로 옮기고 이것을 다시 Memory 로 옮겨야 한다.
Load 가 Memory 에서 레지스터로 옮기는 것이고 Store 가 레지스터에서 Memory 로 옮기는 작업에 해당한다.
명령어로는 ldr 과 str 인데 이와 같은 이유로 Load/Store Architecture 라고 한다.

7. Thumb-2 명령어에 대해 기술하시오.

원래 Thumb 명령어는 2 byte 명령어라 속도는 좀 떨어지지만 공간을 절약 할 수 있다는 이점이 있었다.
Thubm-2 는 기존의 Thumb(2 byte) 와 원래 명령어(4 byte) 를 자유자제로 조합 할 수 있다.
기존보다 용량은 약간 커지고 속도는 좀 더 빨라지기에 각광 받는 기술이다.

8. mcr 과 mrc 명령어에 대해 기술하시오.

ARM 에서 Co-Processor 를 활용하기 위해 사용하는 명령어다.

9. 아래 ARM 명령어가 무엇을 하는 것인지 기술하시오.

ldr	r0, =0xE000ED88
ldr	r1, [r0]
orr	r1, r1, #(0xF << 20)
str	r1, [r0]

위 코드는 FPU 를 활성화시키는 ARM 명령어고 0xE000ED88 은 CPACR 이라는 특수 레지스터에 해당한다.
CPACR 의 약자는 Co-Processor Access Control Register 에 해당한다.

10. CP15 보조 프로세서의 용도에 대해 기술하도록 한다.

시스템 전체 제어 및 구성, 캐시, MPU 구성, 시스템 성능 모니터링등을 수행한다.