1. TI 사 보드의 데이터시트 및 래퍼런스 매뉴얼을 확보하는 방법에 대해 기술해보자!

우선 ti.com 에 접속해서 product 쪽에서 적절한 녀석을 선택한다.
그리고 해당 제품의 구매 정보로 이동하여 아래쪽에 제품군에 대한 것을 선택한다.
탭에서 Technical documents 를 찾아 누르면 User Guide 부터 다양한 문서들을 접할 수 있다.

2. 펌웨어 프로그래밍 레벨에서 RTOS 는 매우 중요한데 그 이유가 무엇인가 ?

여러 태스크들을 동시 다발적으로 제어하기 위해서는 반드시 OS 가 필요하다.
메모리, 태스크, 드라이버(peripheral) 등등을 지원해준다.
또한 요즘은 FreeRTOS 가 핫하다.

3. ARM 사에 대해 아는대로 기술해보시오.

ARM 사는 원래 영국의 업체였고 현재는 일본 소프트 뱅크의 손정의 회장에게 인수 되었다.
실제 반도체 공장을 돌리는 업체가 아니라 반도체 및 주변 회로를 설계하여
이 설계도만 팔면서 돈을 버는 회사에 해당한다.
우리가 사용하는 스마트 폰부터 시작해서 자동차, 항공기, 가전기기 등
모든 전자제품에 들어가는 것이 ARM 이기 때문에
손정의가 ARM 을 인수한 것이 앞으로 어떠한 파급을 낳을지는 아무도 모른다.

4. 매우 쉬운 STM32 보드의 부트 과정에 대해 기술하시오.

처음에 전원을 인가하면 어셈블리어가 구동 되면서 Floating Point 를 활성화시키게 된다.
그리고 C 언어를 사용하기 위해 Stack 등의 메모리 레이아웃을 잡는다.
이후 PLL 등을 설정하여 System Clock 을 생성하고
Main Clock 으로 사용하거나 분주하면 Peripheral 로 보내준다.
이후에 main 함수를 호출하여 일반적인 C 언어 코드를 구동시킬 수 있게 된다.

5. 우리가 사용하는 FPGA Zybo 보드에서 SD 카드를 통해 부팅을 수행하려면 어떠한 작업이 필요한지 기술하시오.

보드 상에 존재하는 부트 모드 선택 점퍼를 설정하여 SD 카드를 지정하고
스위치를 활성화시켜서 전원을 인가해주면 SD 카드에 있는 Linux Kernel 이미지가 구동 된다.

6. TI DSP 에 올라가는 Linux 부트 코드에는 어셈블리어가 1000 줄 이상 존재한다.
   도대체 어째서 C 언어를 활용하지 않고 어셈블리어 코드가 들어가 있는 것인지 기술하시오.

메모리 레이아웃이 잡히지 않은 상태(스택이 없는 상태)에서는 C 언어를 사용 할 수 없기 때문이다.

7. MCU 에서 UART 를 사용하는 이유는 무엇인가 ?

MCU 에 구성한 주변 회로라든지 기타 통신 초기화 등의 상황을 터미널에서 모니터링 하기 위해 사용한다.

8. MCU 나 FPGA, DSP 모두 GPIO 를 가지고 있다.
   GPIO 에 대해 기술하시오.

범용적인 목적으로 입출력을 담당하는 GPIO(General Purpose Input Output)는 프로세서나 컨트롤러 등에서
일반 목적으로 사용하도록 준비된 입출력 포트로 소프트웨어와 연동시키면
전기적 입력을 받거나 출력으로 특정 디바이스를 제어하게 할 수 있다.

9. SPI 통신에 대해 기술하시오.

SPI 는 완전한 전이중 통신으로 전송되는 비트에 대한 완전한 프로토콜 유연성을 가지며
전송기가 필요하지 않고 매우 단순한 하드웨어 인터페이스 처리가 가능하다는 장점이 있다.

10. TI DSP 나 FPGA 에서 Linux 만지면 BSP 라는 것을 많이 보게 된다.
    도대체 BSP 란 무엇인가 ?

BSP 는 특별하게 지원 코드로 실시간 운영체제에 적합한 상태로 동작되도록 한다.
이것은 통상 부트 로더(bootloader)와 함께 생성되는데
실시간 운영 체제를 로드하기 위한 최소한의 장치를 지원하고,
하드웨어 보드의 모든 장치를 위한 장치 드라이버를 말한다.

11. 일반적으로 GPIO 에서 3.3V 에 근접한 전압이 튀어나온다.
    센서가 필요로 하는 전압이 그 이상인 상황에서 GPIO 를 센서의 스위치로 활용하고자 한다면 어떻게 해야할까 ?

GPIO 에 트랜지스터를 달아서 CE 회로로 구성한다.
그러면 GPIO On 및 Off 에 따라 이것이 스위치가 될 수 있다.

12. Linux Kernel 에서 arch 디렉토리에는 어떠한 정보가 들어있는가 ?

각종 HW 아키텍처와 관련된 소스 코드들이 들어 있다.
그래서 부트 코드도 이 디렉토리에 각 아키텍처별 어셈블리어로 존재한다.

13. MCU 를 활용하여 RC 자동차를 만드려고 한다.
    이 때 필요한 HW 들을 모두 기술하시오.

MCU 보드, 전원 회로(DC-DC 컨버터), LiPo 배터리, ESC 및 BLDC 모터, 서보 모터, 조향각 센서, 차체 프레임, 엔코더

14. RC 자동차의 속도를 제어하고자 한다.
    이를 구현하기 위해 필요한 일련의 절차를 기술하시오.

우선 BLDC 모터와 차량의 물리 모델을 기술하도록 한다.
Block Diagram 으로 변환하기 위해 라플라스 변환 형태로 기술하고
속도 제어에 적합한 PI 제어기를 집어넣는다.
설계를 통해 얻어낸 P 값과 I 값을 기록하고 살짝 조정한 이후
코드 10 줄 가량을 작성하면 속도 제어가 수행 된다.

15. MCU 에서 FreeRTOS 를 사용할 때 Multi-Tasking 은 어떻게 가능한 것인가 ?

Linux Kernel 에서의 task_struct 와 마찬가지로 Task 를 관리하는 구조체가 별도로 존재한다.
TCB 등으로 이름이 붙어 Task Control Block 에 현재까지 진행한 레지스터 정보를 기록하고
다른 Task 로 전환하고 다시 Task 의 제어권이 넘어올 때 저장한 레지스터를 복원하여 기존 정보를 복원한다.
이를 통해서 여러 Task 들이 동시 다발적으로 구동 될 수 있게 만들어준다.
