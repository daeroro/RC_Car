1. GPIO 에 대해 기술하시오.

GPIO 는 일반적인 목적을 가진 I/O 포트를 의미한다.
I/O 라는 의미는 Input, Output 으로 입출력이 가능함을 의미한다.
대부분의 모든 CPU 는 이러한 GPIO 를 지원하고 있다.

2. 통신 포트에 대해 기술하시오.

임베디드 분야에서는 외부 디바이스와 연결을 수행하기 위해 통신이 필요하다.
이러한 통신에는 I2C, SPI, UART 등이 있고 특수한 통신을 위해 CAN, MOST, ZIGBEE 등등이 존재한다.

3. 메모리 맵에 대해 기술하시오.

프로세서에서 디바이스나 레지스터에 접근 할 때 메모리 공간 형태로 배치하는 방식이 있다.
이와 같이 시스템의 메모리와 레지스터 등의 구조를 도식화된 형태로 보여주는 것을 메모리 맵이라 한다.

4. 커널 소스의 init 디렉토리에 대해 기술하시오.

부팅 및 초기화 루틴이 들어있어 커널의 맨 처음 C 구동 함수인 start_kernel() 도 여기에 있다.

5. 리눅스가 파일로 취급하는것은 무엇인지 기술하시오.

네트워크 제어기, 디스크, 키보드, 프린터 등등의 각종 장치들이 모두 파일로 취급 된다.
유닉스의 핵심 철학에 모든 것은 파일이다라는 것과 일맥상통한 것을 볼 수 있다.

6. Makefile 의 구조에 대해 기술해보자.

Makefile 은 target, dependency, command 라는 세 가지 기본 구성으로 이루어져 있다.
target 은 command 가 수행되어 나온 결과고
dependency 는 target 을 생성하기 위해 필요한 요소를 지정하며
command 는 일반적인 쉘 명령어에 해당한다.

7. 현재는 리눅스 커널이 6.x 버전까지 나와있다.
   유물급에 해당하는 2.6 커널은 디바이스 트리 같은 기능은 없었다.
   이 시절에 드라이버와 관련하여 처음으로 도입된 개념이 있었는데 이것에 대해 기술해보도록 한다.

task_struct 를 타고 들어가면 inode 구조체를 만나게 되는데
이 inode 구조체의 i_mode 와 i_rdev 등에서 주 번호와 부 번호를 획득 할 수 있었다.
주 번호는 장치의 종류 자체를 구별하기 위해 사용하고 부 번호는 같은 장치에 대해 id 를 부여하기 위함이다.

8. 디바이스 드라이버 관점에서 ioctl() 의 용도는 무엇인가 ?
   일반적으로 read, write 는 유저 프로그래밍에서의 결과와 동일하다.
   반면 시리얼 통신이나 I2C 통신을 사용하는 경우에는 데이터 송수신 외에도
   통신 스피드나 기타 여러가지 잡다한 설정을 해야 한다.
   이와 같은 설정들을 ioctl() 에서 초기화 해준다고 보면 된다.

9. 인터럽트에 대한 핸들러를 등록하는 방법에 대해 기술하시오.

linux/interrupt.h 헤더에 정의 된 request_irq() 를 활용하여 인터럽트를 활성화시키도록 한다.
인자가 3 개 있는데 1 번째가 요청하는 인터럽트 번호, 2 번째가 핸들러, 3 번째가 인터럽트 관리 옵션에 해당한다.

10. 인터럽트 옵션 중에 IRQF_DISABLED 에 대해 기술하시오.

Kernel 이 Interrupt Handler 를 실행하는 동안 모든 Interrupt 를 비활성화한다.