1. Linux 프로그램을 디버깅하고자 한다.
   어떻게 해야 하는지 기술하시오.

우선 컴파일 할 때 gcc -g 옵션을 줘서 컴파일 한다.
그렇다면 gdb 실행파일명으로 디버거를 구동시킬 수 있다.

2. Linux 디버거인 gdb 는 여러 명령어들을 가지고 있다.
   이 중 bt 는 무엇을 하는 명령어인지 기술하시오.

bt 는 back trace 로 Stack 이 어떤 형식으로 생성 되었는지를 추적 해준다.
대표적으로 재귀 호출을 사용하는 구조에서 이 부분이 매우 유용하게 사용 된다.

3. ddd 라는 디버거에 대해 아는대로 기술하시오.

ddd 는 gdb 와 유사한 디버거인데 그래픽한 디버깅을 수행 할 수 있다.

4. 과거의 디바이스 드라이버를 작성하기 위한 절차를 기술하시오.

우선적으로 task_struct->files_struct->file->file_operations 구조체에는
시스템 콜로 동작하는 read, write, ioctl, close 등의 함수 포인터가 들어간다.
드라이버 코드에 각 read, write, ioctl, close 를 드라이버 용으로 대체 하도록 프로그램 해야 한다.
드라이버는 module_init 에 의해 기록된 함수 포인터를 구동하게 된다.

5. I2C 를 활용한 유저 코드를 작성하고자 한다.
   일련의 절차를 기술하라.

우선 리눅스 시스템 프로그래밍의 open, read, write, close 의 개념을 알고 있어야 한다.
open() 에 의해 드라이버 Wrapper 함수로 read, write, ioctl 등이 대체 될 것이다.
대체 된 이후에는 Kernel 함수가 구동 되는 것이므로
실제 Kernel 코드에 Wrapping 되어 있는 함수를 분석해서
해당 함수가 어떠한 기능을 하는지 정확하게 파악 할 필요성이 존재한다.

6. 홀 펀칭이라는 기법에 대해 기술하시오.

NAT 프로토콜을 사용함으로써 IP 개수의 부족 문제를 해결 할 수 있었다.
문제는 공인 IP 와 사설 IP 의 문제점으로 사설 IP 는 인터넷을 사용 할 수 없다.
그래서 홀 펀칭이라는 기법을 통해서 사설 IP 도 공유기를 통해 원격 네트워킹을 수행 할 수 있게 해주는 기법이다.
어찌 되었든 공인 IP 가 공유기에 물려 있어야 이 기법도 수행이 가능하다.

7. 동기와 비동기에 대해 기술하시오.

동기란 반드시 통신 대상자들간에 상호간 정보를 주고 받겠다는 일련의 절차가 필요하다.
반면 비동기는 이런 일련의 절차 없이 데이터를 보내면 언제든지 서로 주고 받을 수 있다.

8. OpenCL 을 사용하는 이유가 무엇인가 ?

현대에 들어서 CPU 자원의 한계가 존재하고
또 CPU 외에도 그래픽카드와 같은 GPU 자원들이 남아있기에
CPU 와 GPU 를 함께 연산에 활용하는 GPGPU 와 같은 연구가 활성화되면서 만들어진 프레임워크다.
결국 좀 더 빠른 속도와 성능을 도출해내기 위함이라고 볼 수 있다.

9. OpenCL 은 GPU 플랫폼에서만 구동이 가능한 것인지 기술하시오.

일반적으로 OpenCL 은 CPU 와 GPU 를 베이스로 만들어져있다.
그러나 임베디드 솔루션에서 PC 용 CPU 나 PC 용 GPU 를 사용할리는 없다.
그래서 대표적으로 TI 사의 DSP 의 경우에는 CPU 와 DSP 를 활용하여 OpenCL 을 사용하고 있다.

10. 임베디드 애플리케이션을 만들다보면 개발 보드에 작업하는 일도 있겠지만
    휴대폰과 무선 통신으로 상호간의 연결을 구성할 수도 있다.
    만약 이 때 휴대폰에서 처리할 데이터가 많다면
    일반적인 Java 나 Android 프로그래밍으로는 한계가 존재하게 될 것이다.
    이 경우엔 어떤 식으로 문제를 해결해야 하는지 기술하시오.

Java 에는 JNI 라는 Java Native Interface 가 존재한다.
실제로 Java 코드에서 성능에 민감한 코드들은 전부 C 언어가 밑에 숨겨져서 작업을 수행하고 있다.
마찬가지로 특정 작업 루틴들을 C 언어로 처리하게 만들어 줄 수 있는데
이 JNI 를 좀 더 수월하게 사용하게 만들어주는 것이 NDK 라는 것이다.
이를 활용하면 성능 문제를 좀 더 지혜롭게 해결 할 수 있을 것이다.