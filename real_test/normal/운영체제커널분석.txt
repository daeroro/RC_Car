1. 리눅스 커널 4.9 대를 다운 받고자 한다.
   어떻게 접근 해야 하는가 ?

우선 https://www.kernel.org/pub 로 이동한다.
그리고 https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.9.tar.gz 를 다운 받는다.
터미널에서 다운 받을 디렉토리로 이동한 이후에
wget 으로 위의 링크를 적으면 다운 완료다.

2. 이제 커널을 다운로드 했으니 다음으로 소스 코드 분석을 위해 상호간 연동을 수행해야 한다.
   이 작업은 어떻게 하는 것인가 ?

우선 ctags 와 cscope 를 다운로드 받고 ctags -R 명령어로 tag 를 만들고
cscope 를 통해서 모든 변수, 함수, 정의부 등등에 대한 스코핑을 건다.
그리고 .vimrc 를 설정하여 ctags 와 cscope 에서 만든 정보를 참조 할 수 있게 만든다.
이후 vi -t 명령어나 vi 창에서 :cs find 0 찾는것 과 같이 정보를 추출해낼 수 있다.

3. 리눅스 시스템 프로그래밍을 하면서 fork() 나 pthread_create() 를 통해
   Process 혹은 Thread 를 생성한다.
   이렇게 되면 어떠한 일들이 벌어지는가 ?

우선 fork() 던 pthread_create() 이던 Kernel 의 핵심 구조체인 task_struct 가 생성 된다.
상호간 프로세스인지 스레드인지 구별 하는 방법은 pid 와 tgid 가 같은지 같지 않은지 여부다.
pid 와 tgid 가 같은 것은 프로세스고 그렇지 않은 케이스는 전부 스레드에 해당한다.

4. Multi Tasking 의 원리에 대해 기술하시오.

CPU 는 오로지 한 순간에 한 가지 일 밖에 하지 못한다.
그런데 도대체 어떻게 동시다발적으로 여러 일을 하는 것이냐면 착시 현상을 활용하는 것이다.
어차피 운동 선수도 식별 가능한것이 고작 0.3 초에 불과하다.
그러나 컴퓨터의 연산 속도는 최소 0.0000001 초내에 여러개의 연산을 수행 할 수 있다.
즉 아주 짧은 시간 동안 여러 Task 의 제어를 번갈아가면서 짧게 짧게 돌리면
마치 우리가 느끼기에는 동시에 돌아가는 것처럼 느껴질 것이다.
이것이 Multi Tasking 의 원리다.

5. Context Switching 이란 무엇인가 ?

Multi Tasking 을 구현하는데 있어서 핵심적 요소에 해당하는 부분이다.
프로그램이 수행 된다는 것은 결국 main() 함수가 여러개 존재한다는 것인데
이 함수들의 연산은 모두 레지스터를 기반으로 수행하게 된다.
즉 레지스터의 값이 변경되면 정보를 잃게 되는데
A 태스크와 B 태스크 모두 레지스터를 활용하기 때문에
어딘가에 이 정보를 백업해두지 않으면 정보가 손실되어 오동작을 하게 된다.
즉 Kernel 의 thread_union 이라는 커널 스택에 이 정보를 저장하고 나중에 제어권이 돌아올 때 정보를 복원한다.
이러한 일련의 과정을 Context Switching 이라고 한다.

6. 리눅스 스케쥴러에는 어떤 것들이 있는지 기술해보자.

항공기등에서 사용하는 실시간적인 처리가 중요한 실시간 스케쥴러와
일반적인 PC 에서 사용하는 일반적인 스케쥴러가 존재한다.

7. 실시간 스케쥴러와 일반 스케쥴러의 차이점은 무엇인가 ?

둘 사이의 가장 큰 차이점이라면 우선 순위로 인해 선점(Preemption)이 발생 할 수 있다는 것이다.
인터럽트 간에도 우선 순위가 존재하여 중요도가 높은 녀석이
중요도가 낮은 녀석의 제어권을 가져와서 작업을 수행 할 수 있다.

8. 리눅스 커널의 메모리 관리와 관련된 구조체들을 기술하라.

task_struct, mm_struct, vm_area_struct 에 해당한다.
mm_struct 에는 가상 메모리 스택, 힙, 데이터, 텍스트에 대한 정보가 있고
vm_area_struct 는 세그먼트로 같은 종류의 메모리(스택 등등)끼리 모아놓은 것이다.

9. 리눅스 커널의 메모리 관리는 Red Black Tree 로 구성되어 있는데 이유가 무엇인가 ?

우선 트리는 검색 속도 측면에서 장점인데 검색 속도만 봤을 경우 AVL 트리가 가장 빠르다.
하지만 빈번하게 할당과 해제 작업이 발생 하는 경우에 한하여 삽입과 삭제의 속도가 너무 느리다.
이 문제를 해결하기 위해 도입된 것이 Red Black 트리다.
검색 속도가 AVL 만큼 빠르진 않지만 삽입, 삭제, 검색 모두 준수한 레벨이라 자주 활용 된다.

10. 리눅스 커널의 파일 관리에 활용되는 구조체를 모두 기술하시오.

task_struct, files_struct, file, file_operations, path, inode, super_block