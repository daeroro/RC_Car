1. 구조체를 사용하는 이유를 기술하시오.

하나의 데이터 타입으로 여러 데이터 타입을 관리하기 위함

2. 자료구조 작성시 이중 포인터를 활용하는 이유가 무엇인가 ?

트리를 완벽하게 재귀호출 없이 구현할 수 있기 때문이다.

3. 연결리스트를 만들고자 한다.
   필요한 구조체 포맷을 기술해보시오.

struct list
{
    int data;
    struct list *link;

};

4. 트리를 작성하고자 한다.
   이를 수행하기 위한 트리 구조체를 작성해보라.

struct tree
{
   int data;
   struct tree *left;
   struct tree *right;
};

5. AVL 트리를 작성하고자 한다.
   이를 수행하기 위한 구조체를 작성해보라.

struct avl
{
    int data;
    int level;
    struct avl *left;
    struct avl *right;
};

6. 구글, 페이스북, MS 등의 회사에서 아주 즐겨 사용하는 자료구조다.
   리눅스의 메모리 관리, 태스크 관리등에서도 빈번하게 사용된다.
   이것은 무엇인지 기술하고 장점을 기술하시오.

레드 블랙 트리이며 삽입, 삭제, 검색 속도가 모두 평균 이상의 좋은 성능을 보여준다는 것이다.

7. 자료구조를 학습하는 단편적 이유는 무엇인가 ?
   이에 대해 기술하시오.

구조체와 포인터를 자유 자재로 사용해보자!

8. 그래프와 트리의 차이점에 대해 기술하시오.
   이에 대해 기술하시오.

9. 아래 코드를 보고 물음에 답하시오.

struct _list
{
    int data;
    struct _list *link;
};
typedef struct _list list;

int main(void)
{
    list *top = NULL;
    push(&top, 10);
}

여기서 push 의 프로토타입을 기술하시오.

void push(list **top, int data);

10. 다음 코드를 보고 물음에 답하시오.

struct _list
{
    int data;
    struct _list *link;
};
typedef struct _list list;

list *get_node(void)
{
    list *tmp;
    tmp = (list *)malloc(sizeof(list));
    tmp->link = NULL;
    return tmp;
}

여기서 get_node 가 하는 일이 무엇인지 기술해보시오.

list 구조체를 동적할당하여 heap 메모리에 할당받는다.
그리고 해당 메모리에 link 를 NULL 로 초기화시키고 할당받은 메모리의 주소값을 반환한다.