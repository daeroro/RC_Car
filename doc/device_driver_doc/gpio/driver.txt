GPIO Descriptor Driver Interface
================================

This document serves as a guide for GPIO chip drivers writers. Note that it describes the new descriptor-based interface. For a description of the deprecated integer-based GPIO interface please refer to gpio-legacy.txt.

이 문서는 GPIO Chip Driver 작성자를 위한 안내서다.
새로운 Descriptor 기반 인터페이스에 대해 설명한다.
사용되지 않는 정수 기반 GPIO 인터페이스에 대한 설명은 gpio-legacy.txt 를 참조하라!

Each GPIO controller driver needs to include the following header, which defines the structures used to define a GPIO driver:

각 GPIO 컨트롤러 Driver 는 GPIO Driver 를 정의하는데 사용되는 구조를 정의하는 아래 헤더를 포함해야 한다:

 #include <linux/gpio/driver.h>



Internal Representation of GPIOs
================================

Inside a GPIO driver, individual GPIOs are identified by their hardware number, which is a unique number between 0 and n, n being the number of GPIOs managed by the chip. This number is purely internal: the hardware number of a particular GPIO descriptor is never made visible outside of the driver.

GPIO Driver 내에서 개별 GPIO 는 해당 HW 번호로 식별되며
HW 번호는 0 ~ n 사이의 고유 번호이며 n 은 Chip 에서 관리하는 GPIO 갯수이다.
이 번호는 순전히 내부적이다:
특정 GPIO Descriptor 의 HW 번호는 절대로 Driver 외부에서 볼 수 없다.

On top of this internal number, each GPIO also need to have a global number in the integer GPIO namespace so that it can be used with the legacy GPIO interface. Each chip must thus have a "base" number (which can be automatically assigned), and for each GPIO the global number will be (base + hardware number). Although the integer representation is considered deprecated, it still has many users and thus needs to be maintained.

내부 번호 외에 각 GPIO 는 기존 GPIO 인터페이스와 함께 사용할 수 있도록 정수 GPIO 네임 스페이스에 전역 번호가 있어야 한다.
따라서 각 Chip 은 "base" 번호(자동으로 할당 될 수 있음)를 가져야하며
각 GPIO 에 대해 Global 번호sms (base + HW 번호)가 된다.
정수 표현은 사용되지 않는 것으로 간주되지만 여전히 많은 사용자가 있으므로 유지 관리해야한다.

So for example one platform could use numbers 32-159 for GPIOs, with a controller defining 128 GPIOs at a "base" of 32 ; while another platform uses numbers 0..63 with one set of GPIO controllers, 64-79 with another type of GPIO controller, and on one particular board 80-95 with an FPGA. The numbers need not be contiguous; either of those platforms could also use numbers 2000-2063 to identify GPIOs in a bank of I2C GPIO expanders.

예로 하나의 플랫폼이 GPIO 에 32 ~ 159 의 숫자를 사용할 수 있다면 컨트롤러는 "base" 32 비트에서 128 개의 GPIO 를 정의한다;
다른 플랫폼은 한 세트의 GPIO 컨트롤러와 함께 0 ~ 63, 다른 유형의 GPIO 컨트롤러와 함께 64 ~ 79,
FPGA 를 사용하는 특정 보드에서는 80 ~ 95 의 숫자를 사용한다.
번호가 연속적일 필요가 없다;
이러한 플랫폼 중 하나는 I2C GPIO Expanders 의 Bank 에서
GPIO 를 식별하기 위해 2000 ~ 2063 이라는 숫자를 사용할 수도 있다.



Controller Drivers: gpio_chip
=============================

In the gpiolib framework each GPIO controller is packaged as a "struct gpio_chip" (see linux/gpio/driver.h for its complete definition) with members common to each controller of that type:

gpiolib 프레임워크에서 각 GPIO 컨트롤러는 해당 유형의 각 컨트롤러에 공통된 멤버와 함께
"struct gpio_chip" (전체 정의는 linux/gpio/driver.h 참조) 패키지로 제공된다:

 - methods to establish GPIO direction
 - methods used to access GPIO values
 - method to return the IRQ number associated to a given GPIO
 - flag saying whether calls to its methods may sleep
 - optional debugfs dump method (showing extra state like pullup config)
 - optional base number (will be automatically assigned if omitted)
 - label for diagnostics and GPIOs mapping using platform data

 - GPIO 방향 설정
 - GPIO 값에 접근하는데 사용되는 함수
 - 주어진 GPIO 와 관련된 IRQ 번호를 반환하는 함수
 - 함수 호출이 sleep 될 수 있는지 여부를 나타내는 플래그
 - 옵션 debugfs 덤프 함수(풀업 설정과 같은 여분의 상태 표시)
 - 선택적 base 번호(생략된 경우 자동으로 지정됨)
 - Platform 데이터를 사용하는 GPIO 와 진단을 위한 Label

The code implementing a gpio_chip should support multiple instances of the controller, possibly using the driver model. That code will configure each gpio_chip and issue gpiochip_add(). Removing a GPIO controller should be rare; use gpiochip_remove() when it is unavoidable.

gpio_chip 을 구현하는 코드는 Driver Model 을 사용하여 컨트롤러의 여러 instance 를 지원해야 한다.
이 코드는 각 gpio_chip 을 구성하고 gpiochip_add() 를 실행한다.
어쩔 수 없는 경우 gpiochip_remove() 를 사용하도록 한다.

Most often a gpio_chip is part of an instance-specific structure with state not exposed by the GPIO interfaces, such as addressing, power management, and more. Chips such as codecs will have complex non-GPIO state.

대부분 gpio_chip 은 주소 지정, 전원 관리 등과 같은 GPIO 인터페이스에 노출되지 않은 상태의 인스턴스 별 구조의 일부다.
코덱과 같은 Chip 은 GPIO 가 아닌 복잡한 상태를 가진다.

Any debugfs dump method should normally ignore signals which haven't been requested as GPIOs. They can use gpiochip_is_requested(), which returns either NULL or the label associated with that GPIO when it was requested.

모든 debugfs 덤프 함수는 일반적으로 GPIO 로 요청되지 않은 신호를 무시해야 한다.
gpiochip_is_requested() 를 사용하면 NULL 을 반환하거나 요청된 GPIO 와 연관된 레이블을 반환할 수 있다.

RT_FULL: GPIO driver should not use spinlock_t or any sleepable APIs (like PM runtime) in its gpio_chip implementation (.get/.set and direction control callbacks) if it is expected to call GPIO APIs from atomic context on -RT (inside hard IRQ handlers and similar contexts). Normally this should not be required.

RT_FULL:
GPIO Driver 는 gpio_chip 구현(.get/.set 과 방향 제어 콜백)에서
-RT(hard IRQ 핸들러 및 유사한 Contexts) 의 원자적 Context 에서 GPIO API 를 호출해야 하는 경우
spinlock_t 혹은 모든 sleep 가능한 API들(PM Runtime 과 같은) 을 사용하면 안된다.
일반적으로 이것은 필수적이지 않다.

GPIO drivers providing IRQs
---------------------------
It is custom that GPIO drivers (GPIO chips) are also providing interrupts, most often cascaded off a parent interrupt controller, and in some special cases the GPIO logic is melded with a SoC's primary interrupt controller.

GPIO Driver(GPIO Chips) 는 Interrupt 를 제공하며 대부분은 상위 인터럽트 컨트롤러에서 단계별로 처리되며, 특수한 경우에는 GPIO 로직이 SoC 의 기본 인터럽트 컨트롤러와 함께 사용된다.

The IRQ portions of the GPIO block are implemented using an irqchip, using the header <linux/irq.h>. So basically such a driver is utilizing two sub-systems simultaneously: gpio and irq.

GPIO Block 의 IRQ 부분은 <linux/irq.h> 헤더를 사용하여 irqchip 을 사용하여 구현된다.
그래서 기본적으로 이러한 Driver 는 2 개의 Sub-System 을 동시에 사용한다: gpio 와 irq

RT_FULL: GPIO driver should not use spinlock_t or any sleepable APIs (like PM runtime) as part of its irq_chip implementation on -RT.
- spinlock_t should be replaced with raw_spinlock_t [1].
- If sleepable APIs have to be used, these can be done from the .irq_bus_lock() and .irq_bus_unlock() callbacks, as these are the only slowpath callbacks on an irqchip.
Create the callbacks if needed [2].

RT_FULL:
GPIO Driver 는 -RT 에서 irq_chip 구현의 일부로 spinlock_t
혹은 sleep 가능한 APIs(PM runtime 과 같은) 를 사용하지 않아야 한다.
- spinlock_t 는 raw_spinlock_t [1] 로 대체되어야 한다.
- sleep 가능한 API 를 사용하는 경우 irqchip 에 대해 유일한 slowpath 콜백인
  .irq_bus_unclock() 과 .irq_bus_lock() 콜백으로 수행할 수 있다.
  필요하다면 [2] callback 을 생성한다.



GPIO irqchips usually fall in one of two categories:

* CHAINED GPIO irqchips: these are usually the type that is embedded on an SoC. This means that there is a fast IRQ handler for the GPIOs that gets called in a chain from the parent IRQ handler, most typically the system interrupt controller. This means the GPIO irqchip is registered using irq_set_chained_handler() or the corresponding gpiochip_set_chained_irqchip() helper function, and the GPIO irqchip handler will be called immediately from the parent irqchip, while holding the IRQs disabled. The GPIO irqchip will then end up calling something like this sequence in its interrupt handler:

CHAINED GPIO irqchips:
이들은 일반적으로 SoC 에 내장된 형태다.
가장 일반적인 System Interrupt Controller 인 부모 IRQ Handler 에서
chain 되어 호출되는 GPIO 용 고속 IRQ Handler 가 있음을 의미한다.
GPIO irqchip 은 irq_set_chained_handler() 혹은 gpiochip_set_chained_irqchip() helper 함수를 사용하여 등록되며
GPIO irqchip Handler 는 IRQ 를 비활성화한 상태에서 부모 irqchip 에서 즉시 호출된다.
그러면 GPIO irqchip 은 Interrupt Handler 에서 아래와 같은 것을 호출한다:

  static irqreturn_t tc3589x_gpio_irq(int irq, void *data)
      chained_irq_enter(...);
      generic_handle_irq(...);
      chained_irq_exit(...);

  Chained GPIO irqchips typically can NOT set the .can_sleep flag on struct gpio_chip, as everything happens directly in the callbacks.

Chain 된 GPIO irqchips 는 일반적으로 gpio_chip 구조체의 .can_sleep 플래그를 설정할 수 없는데
모든 것이 콜백에서 직접 발생하기 때문이다.

  RT_FULL: Note, chained IRQ handlers will not be forced threaded on -RT. As result, spinlock_t or any sleepable APIs (like PM runtime) can't be used in chained IRQ handler. if required (and if it can't be converted to the nested threaded GPIO irqchip)
  - chained IRQ handler can be converted to generic irq handler and this way it will be threaded IRQ handler on -RT and hard IRQ handler on non-RT (for example, see [3]).
  Know W/A: The generic_handle_irq() is expected to be called with IRQ disabled, so IRQ core will complain if it will be called from IRQ handler wich is forced thread. The "fake?" raw lock can be used to W/A this problem:

RT_FULL:
Chain 된 IRQ Handler 는 -RT 에서 강제로 thread 되지 않는다.
결과적으로 spinlock_t 혹은 sleep 가능한 모든 APIs(PM Runtime 같은) 는 Chain 된 IRQ Handler 에서 사용할 수 없다.
필요하다면(그리고 이것이 중첩된 Threaded GPIO irqchip 으로 변환할 수 없다면)
  - Chain 된 IRQ Handler 는 일반적인 irq Handler 로 변환할 수 있고
    이 방식으로 -RT 에서 thread 된 IRQ Handler 가 되며 비 RT 에서는 Hard IRQ Handler 가 된다.(예 [3] 참조)
  Know W/A:
    generic_handle_irq() 는 IRQ 가 비활성화된 상태에서 호출될 것으로 예상되므로
    강제 thread 인 IRQ Handler 에서 호출되면 IRQ Core 가 불평한다. "fake ?" raw lock 은 W/A 문제에 사용할 수 있다.

 raw_spinlock_t wa_lock;
 static irqreturn_t omap_gpio_irq_handler(int irq, void *gpiobank)
  unsigned long wa_lock_flags;
  raw_spin_lock_irqsave(&bank->wa_lock, wa_lock_flags);
  generic_handle_irq(irq_find_mapping(bank->chip.irqdomain, bit));
  raw_spin_unlock_irqrestore(&bank->wa_lock, wa_lock_flags);

* GENERIC CHAINED GPIO irqchips: these are the same as "CHAINED GPIO irqchips", but chained IRQ handlers are not used. Instead GPIO IRQs dispatching is performed by generic IRQ handler which is configured using request_irq(). The GPIO irqchip will then end up calling something like this sequence in its interrupt handler:

일반 CHAIN 된 GPIO irqchips:
이것들은 "CHAINED GPIO irqchips" 와 동일하지만 연결된 IRQ Handlers 가 사용되지 않는다.
대신 GPIO IRQ Dispatch 는 request_irq() 를 사용하여 구성된 일반 IRQ Handler 에 의해 수행된다.
그러면 GPIO irqchip 이 Interrupt Handler 에서 아래와 같은 것을 호출하게 된다:

  static irqreturn_t gpio_rcar_irq_handler(int irq, void *dev_id)
 for each detected GPIO IRQ
  generic_handle_irq(...);

 각각의 감지된 GPIO IRQ 마다 generic_handle_irq(...)

  RT_FULL: Such kind of handlers will be forced threaded on -RT, as result IRQ core will complain that generic_handle_irq() is called with IRQ enabled and the same W/A as for "CHAINED GPIO irqchips" can be applied.

RT_FULL:
IRQ Core 는 IRQ 가 활성화된 상태에서 generic_handle_irq() 가 호출되고
"CHAIN 된 GPIO irqchips" 와 동일한 W/A 가 적용될 수 있다고 불평할 것이므로
이러한 종류의 Handler 는 -RT 에서 강제로 thread 된다.

* NESTED THREADED GPIO irqchips: these are off-chip GPIO expanders and any other GPIO irqchip residing on the other side of a sleeping bus. Of course such drivers that need slow bus traffic to read out IRQ status and similar, traffic which may in turn incur other IRQs to happen, cannot be handled in a quick IRQ handler with IRQs disabled. Instead they need to spawn a thread and then mask the parent IRQ line until the interrupt is handled by the driver. The hallmark of this driver is to call something like this in its interrupt handler:

* NESTED THREADED GPIO irqchips:
이것들은 off-chip GPIO Expanders 와 Sleeping Bus 의 다른쪽에 있는 다른 GPIO irqchip 이다.
물론 느린 Bus Traffic 이 IRQ 상태 및 이와 유사한 Traffic 을 읽을 때 Traffic 이 IRQ 가 비활성화된 빠른 IRQ Handler 에서 처리할 수 없는 다른 IRQ 가 발생할 수 있다.
대신 Thread 를 생성한 다음 Driver 가 Interrupt 를 처리할 때까지 부모 IRQ 라인을 마스크해야 한다.
이 Driver 의 특징은 Interrupt Handler 에서 아래와 같이 호출한다는 것이다:

  static irqreturn_t tc3589x_gpio_irq(int irq, void *data)
      ...
      handle_nested_irq(irq);

  The hallmark of threaded GPIO irqchips is that they set the .can_sleep flag on struct gpio_chip to true, indicating that this chip may sleep when accessing the GPIOs.

Thread 된 GPIO irqchips 의 특징은 gpio_chip 구조체의 .can_sleep 플래그를 true 로 설정하여 GPIO 에 접근할 때 Chip 이 sleep 상태일 수 있음을 나타낸다.

To help out in handling the set-up and management of GPIO irqchips and the associated irqdomain and resource allocation callbacks, the gpiolib has some helpers that can be enabled by selecting the GPIOLIB_IRQCHIP Kconfig symbol:

gpiolib 에는 GPIO irqchips 및 관련 irqdomain 및 자원 할당 콜백의 설정 및 관리를 돕기 위해 GPIOLIB_IRQCHIP Kconfig Symbol 을 선택하여 사용할 수 있는 몇 가지 Helper 를 가지고 있다:

* gpiochip_irqchip_add(): adds an irqchip to a gpiochip. It will pass the struct gpio_chip* for the chip to all IRQ callbacks, so the callbacks need to embed the gpio_chip in its state container and obtain a pointer to the container using container_of(). (See Documentation/driver-model/design-patterns.txt)

* gpiochip_irqchip_add(): gpiochip 에 irqchip 을 추가한다.
모든 IRQ Callbacks 으로 Chip 을 위한 struct gpio_chip* 을 전달하므로 Callback 은 gpio_chip 을 해당 Container 에 포함하고 container_of() 를 사용하여 Container 에 대한 포인터를 가져와야 한다.
(Documentation/driver-model/design-patterns.txt 를 보라!)

* gpiochip_set_chained_irqchip(): sets up a chained irq handler for a gpio_chip from a parent IRQ and passes the struct gpio_chip* as handler data. (Notice handler data, since the irqchip data is likely used by the parent irqchip!) This is for the chained type of chip. This is also used to set up a nested irqchip if NULL is passed as handler.

* gpiochip_set_chained_irqchip():
부모 IRQ 에서 gpio_chi 에 대해 연결된 irq Handler 를 설정하고 gpio_chip* 구조체를 Handler Data 로 전달한다.
(irqchip 데이터는 부모 irqchip 에 의해 사용되었을 가능성이 있기 때문에 Handler Data 를 주목하라!)
이것은 Chip 의 Chained Type 을 위한 것이다.
NULL 이 Handler 로 전달되면 중첩된 irqchip 을 설정하는데도 사용된다.

To use the helpers please keep the following in mind:

Helper 를 사용하려면 아래 사항에 유의하도록 한다:

- Make sure to assign all relevant members of the struct gpio_chip so that the irqchip can initialize. E.g. .dev and .can_sleep shall be set up properly.

- irqchip 을 초기화할 수 있도록 구조체 gpio_chip 의 모든 관련 멤버를 할당하라!
ex: dev 및 .can_sleep 이 올바르게 설정되어야 한다.

- Nominally set all handlers to handle_bad_irq() in the setup call and pass handle_bad_irq() as flow handler parameter in gpiochip_irqchip_add() if it is expected for GPIO driver that irqchip .set_type() callback have to be called before using/enabling GPIO IRQ. Then set the handler to handle_level_irq() and/or handle_edge_irq() in the irqchip .set_type() callback depending on what your controller supports.

- GPIO IRQ 를 활성화 / 사용하기 이전에 irqchip .set_type() Callback 을 호출해야 하는 GPIO Driver 가 필요한 경우
  모든 Handler 를 설정하고 호출하여 handle_bad_irq() 를 설정하고
  gpiochip_irqchip_add() 에서 Flow Handler 에 매개변수로handle_bad_irq() 를 전달한다.
  다음으로 Controller 가 지원하는 것에 따라 Handler 를 handle_level_irq() 및 / 또는
  handle_edge_irq() 로 irqchip .set_type() Callback 을 설정한다.

It is legal for any IRQ consumer to request an IRQ from any irqchip no matter if that is a combined GPIO+IRQ driver. The basic premise is that gpio_chip and irq_chip are orthogonal, and offering their services independent of each other.

GPIO + IRQ Driver 가 결합되었다면 모든 IRQ Consumer 가 irqchip 에서 IRQ 를 요청할 수 있는 것은 합당하다.
기본 전제는 gpio_chip 과 irq_chip 이 서로 독립적인 서비스를 제공한다는 것이다.

gpiod_to_irq() is just a convenience function to figure out the IRQ for a certain GPIO line and should not be relied upon to have been called before the IRQ is used.

gpiod_to_irq() 는 특정 GPIO 라인에 대한 IRQ 를 알아내는 편리한 함수일 뿐이며 IRQ 가 사용되기 전에 호출되지 않아야 한다.

So always prepare the hardware and make it ready for action in respective callbacks from the GPIO and irqchip APIs. Do not rely on gpiod_to_irq() having been called first.

따라서 항상 HW 를 준비하고 GPIO 및 irqchip API 의 각 Callback 에서 작업을 준비해야 한다.
먼저 호출된 gpiod_to_irq() 에 의존하지 않도록 한다.

This orthogonality leads to ambiguities that we need to solve: if there is competition inside the subsystem which side is using the resource (a certain GPIO line and register for example) it needs to deny certain operations and keep track of usage inside of the gpiolib subsystem. This is why the API below exists.

이러한 독립성은 우리가 풀어야할 모호성을 유발한다.
어느쪽이 Resource(특정 GPIO 라인 및 레지스터)를 사용하고 있는지 Sub System 내부에서 경쟁이 있다면 특정 작업을 거부하고 gpiolib Sub System 내부에서 사용법을 추적해야 한다.
이것이 아래 API 가 존재하는 이유다.



Locking IRQ usage
-----------------
Input GPIOs can be used as IRQ signals. When this happens, a driver is requested to mark the GPIO as being used as an IRQ:

GPIO 입력은 IRQ 신호로 사용할 수 있다.
이런 경우 Driver 는 GPIO 를 IRQ 로 사용하도록 표시해야 한다:

 int gpiochip_lock_as_irq(struct gpio_chip *chip, unsigned int offset)

This will prevent the use of non-irq related GPIO APIs until the GPIO IRQ lock is released:


이렇게 하면 GPIO IRQ Lock 이 해제될 때까지 non-irq 관련 GPIO API 를 사용할 수 없게 된다:

 void gpiochip_unlock_as_irq(struct gpio_chip *chip, unsigned int offset)

When implementing an irqchip inside a GPIO driver, these two functions should
typically be called in the .startup() and .shutdown() callbacks from the
irqchip.

GPIO Driver 내에 irqchip 을 구현할 때 이 두 함수는
일반적으로 irqchip 의 .startup() 및 .shutdown() Callback 에서 호출되어야 한다.

Real-Time compliance for GPIO IRQ chips
---------------------------------------

Any provider of irqchips needs to be carefully tailored to support Real Time
preemption. It is desireable that all irqchips in the GPIO subsystem keep this
in mind and does the proper testing to assure they are real time-enabled.
So, pay attention on above " RT_FULL:" notes, please.
The following is a checklist to follow when preparing a driver for real
time-compliance:

irqchips 의 모든 공급자는 실시간 선점을 지원할 수 있도록 신중하게 조정해야 한다.
GPIO Sub System 에 있는 모든 irqchip 은 이것을 염두에 두어
실시간으로 사용할 수 있도록 적절한 Test 를 수행하는 것이 바람직하다.
그래서 "RT_FULL:" 의 내용을 상기해야 한다.
다음은 실시간 준수를 위한 Driver 를 준비할 때 따라야할 Check List 이다:

- ensure spinlock_t is not used as part irq_chip implementation;
- ensure that sleepable APIs are not used as part irq_chip implementation.
  If sleepable APIs have to be used, these can be done from the .irq_bus_lock()
  and .irq_bus_unlock() callbacks;
- Chained GPIO irqchips: ensure spinlock_t or any sleepable APIs are not used
  from chained IRQ handler;
- Generic chained GPIO irqchips: take care about generic_handle_irq() calls and
  apply corresponding W/A;
- Chained GPIO irqchips: get rid of chained IRQ handler and use generic irq
  handler if possible :)
- regmap_mmio: Sry, but you are in trouble :( if MMIO regmap is used as for
  GPIO IRQ chip implementation;
- Test your driver with the appropriate in-kernel real time test cases for both
  level and edge IRQs.

- spinlock_t 가 부분 irq_chip 구현으로 사용되지 않도록 하라.
- sleep 가능한 AI 가 irq_chip 구현의 일부로 사용되지 않도록 하라.
  절전 모드 API 를 사용해야 하는 경우 .irq_bus_lock() 및 .irq_bus_unlock() Callback 에서 수행 할 수 있다.
- Chain 화된 GPIO irqchips:
  Chain 화된 IRQ Handler 에서 spinlock_t 혹은 sleep 가능한 API 가 사용되지 않도록 하라.
- 일반적인 Chain 화된 GPIO irqchips:
   generic_handle_irq() 호출을 처리하고 해당 W / A 를 적용한다.
- Chain 화된 GPIO irqchips:
  가능한 경우 Chain 화된 IRQ Handler 를 제거하고 IRQ Handler 를 사용하라.
- regmap_mmio:
  미안하지만 문제가 있다:
  (GPIO IRQ Chip 구현으로 MMIO regmap 을 사용하면)
- level 과 edge IRQ 모두에 대해 적절한 Kernel 내 Real-Time Test Cases 를 사용하여 Driver 를 테스트한다.



Requesting self-owned GPIO pins
-------------------------------

Sometimes it is useful to allow a GPIO chip driver to request its own GPIO
descriptors through the gpiolib API. Using gpio_request() for this purpose
does not help since it pins the module to the kernel forever (it calls
try_module_get()). A GPIO driver can use the following functions instead
to request and free descriptors without being pinned to the kernel forever.

때로는 GPIO Chip Driver 가 gpiolib API 를 통해 자체 GPIO Descriptors 를 요청할 수 있도록 하는 것이 유용하다.
이 목적을 위해 gpio_request() 를 사용하면 Module 이 Kernel 에 영구히 고정되므로
(try_module_get() 을 호출하기 때문에) 도움이 되지 않는다.
GPIO Driver 는 대신 아래 함수를 사용하여 영원히 Kernel 에 고정되지 않고 Descriptor 를 요청하고 해제할 수 있다.

 struct gpio_desc *gpiochip_request_own_desc(struct gpio_desc *desc,
          const char *label)

 void gpiochip_free_own_desc(struct gpio_desc *desc)

Descriptors requested with gpiochip_request_own_desc() must be released with
gpiochip_free_own_desc().

gpiochip_request_own_desc() 에서 요청한 Descriptor 는 gpiochip_free_own_desc() 로 해제해야 한다.

These functions must be used with care since they do not affect module use
count. Do not use the functions to request gpio descriptors not owned by the
calling driver.

이 함수는 Module 사용 횟수에 영향을 미치지 않으므로 주의해서 사용해야 한다.
호출하는 Driver 가 소유하지 않은 GPIO Descriptors 를 요청하는 함수를 사용하지 말도록 한다.

[1] http://www.spinics.net/lists/linux-omap/msg120425.html
[2] https://lkml.org/lkml/2015/9/25/494
[3] https://lkml.org/lkml/2015/9/25/495