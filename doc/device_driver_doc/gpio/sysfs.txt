GPIO Sysfs Interface for Userspace
==================================

Platforms which use the "gpiolib" implementors framework may choose to configure a sysfs user interface to GPIOs.
This is different from the debugfs interface, since it provides control over GPIO direction and value instead of just showing a gpio state summary.
Plus, it could be present on production systems without debugging support.

"gpiolib" implementors 프레임워크를 사용하는 Platform 은 sysfs 사용자 인터페이스를 GPIO 로 구성하도록 선택할 수 있다.
이는 gpio 상태 요약을 표시하는 대신 GPIO 방향과 값을 제어할 수 있기 때문에 debugfs 인터페이스와 다르다.
또한 디버깅 지원없이 production systems 에 존재할 수 있다.

Given appropriate hardware documentation for the system, userspace could know for example that GPIO #23 controls the write protect line used to protect boot loader segments in flash memory.
System upgrade procedures may need to temporarily remove that protection, first importing a GPIO, then changing its output state, then updating the code before re-enabling the write protection.
In normal use, GPIO #23 would never be touched, and the kernel would have no need to know about it.

시스템에 대한 적절한 HW 문서가 있으면 사용자 공간은
예로 GPIO #23 이 Flash Memory 의 Boot Loader 세그먼트를 보호하는데 사용되는 쓰기 보호 선을 제어함을 알 수 있다.
System 업그레이드 절차에서는 일시적으로 보호 기능을 제거한 후
GPIO 를 먼저 가져온 다음 출력 상태를 변경하고 쓰기 보호를 다시 활성화하기 이전에 코드를 업데이트할 필요가 있다.
일반적인 사용에서 GPIO #23 은 절대로 손대지 않으며 Kernel 은 이것에 대해 알 필요가 없다.

Again depending on appropriate hardware documentation, on some systems userspace GPIO can be used to determine system configuration data that standard kernels won't know about.
And for some tasks, simple userspace GPIO drivers could be all that the system really needs.

적절한 HW 문서에 따라 일부 System 에서 사용자 공간 GPIO 를 사용하여
표준 Kernel 이 알 수 없는 System 구성 데이터를 결정할 수 있다.
일부 작업의 경우 단순 사용자 공간 GPIO Driver 가 System 에 필요한 모든 것일 수 있다.

DO NOT ABUSE SYSFS TO CONTROL HARDWARE THAT HAS PROPER KERNEL DRIVERS.
PLEASE READ THE DOCUMENT NAMED "drivers-on-gpio.txt" IN THIS DOCUMENTATION DIRECTORY TO AVOID REINVENTING KERNEL WHEELS IN USERSPACE.
I MEAN IT.
REALLY.

올바른 Kernel Driver 가 있는 HW 를 제어하기 위해 sysfs 를 사용하지 말아라!
gpio 문서 디렉토리에 "drivers-on-gpio.txt" 라는 제목의 문서를 읽어서
사용자 공간에서 Kernel 을 너무 많이 바꾸지 않도록 조심해야 한다.
진심으로 하지 말아야 한다.

Paths in Sysfs
--------------
There are three kinds of entries in /sys/class/gpio:

/sys/class/gpio 에는 3 종류의 항목이 있다:

   - Control interfaces used to get userspace control over GPIOs;

   - 사용자 인터페이스에서 GPIO 를 제어하는데 사용되는 제어 인터페이스;

   - GPIOs themselves; and

   - GPIOs 자체;

   - GPIO controllers ("gpio_chip" instances).

   - GPIO 제어기 ("gpio_chip" 인스턴스).

That's in addition to standard files including the "device" symlink.

이것은 "device" 심볼릭 링크를 포함한 표준 파일에 추가된다.

The control interfaces are write-only:

제어 인터페이스는 쓰기 전용이다:

    /sys/class/gpio/

     "export" ... Userspace may ask the kernel to export control of a GPIO to userspace by writing its number to this file.

     "export" ... 사용자 공간은 이 파일에 번호를 써서 GPIO 를 사용자 공간으로 내보내도록 커널에 요청할 수 있다.

  Example:  "echo 19 > export" will create a "gpio19" node for GPIO #19, if that's not requested by kernel code.

  예제 : "echo 19 > export" 는 커널 코드에 의해 요청되지 않은 경우 GPIO #19 에 대한 "gpio19" 노드를 만든다.

     "unexport" ... Reverses the effect of exporting to userspace.

     "unexport" ... 사용자 공간으로 exporting 한 효과를 되돌린다.

  Example:  "echo 19 > unexport" will remove a "gpio19" node exported using the "export" file.

예제: "echo 19 > unexport" 는 "export" file 을 사용하여 export 된 "gpio19" node 를 제거할 것이다.

GPIO signals have paths like /sys/class/gpio/gpio42/ (for GPIO #42) and have the following read/write attributes:

GPIO 신호는 /sys/class/gpio/gpio42/ (GPIO #42) 와 같은 경로를 가지며 아래의 읽기/쓰기 속성을 갖는다:

    /sys/class/gpio/gpioN/

 "direction" ... reads as either "in" or "out". This value may normally be written.
Writing as "out" defaults to initializing the value as low.
To ensure glitch free operation, values "low" and "high" may be written to configure the GPIO as an output with that initial value.

"direction" ... "in" 혹은 "out" 중 하나로 읽는다.
이 값은 일반적으로 쓰여질 수 있다.
"out" 으로 쓰는 것은 기본적으로 값을 낮게 초기화한다.
결함없는 동작을 보장하기 위해 GPIO 를 초기값으로 출력으로 구성하기 위해 "low" 및 "high" 값을 쓸 수 있다.

  Note that this attribute *will not exist* if the kernel doesn't support changing the direction of a GPIO, or it was exported by kernel code that didn't explicitly allow userspace to reconfigure this GPIO's direction.


Kernel 이 GPIO 의 방향 변경을 지원하지 않거나 명시적으로 사용자 공간에서
GPIO 의 방향을 재구성하도록 허용하지 않은 커널 코드에 의해 반출된 경우 이 속성은 존재하지 않는다.

 "value" ... reads as either 0 (low) or 1 (high).
If the GPIO is configured as an output, this value may be written;
any nonzero value is treated as high.

"value" ... 0(low) 혹은 1(high) 로 읽는다.
GPIO 가 output 으로 구성된 경우 이 값을 쓸 수 있다.
0 이 아닌 값은 high 로 처리된다.

  If the pin can be configured as interrupt-generating interrupt and if it has been configured to generate interrupts (see the description of "edge"), you can poll(2) on that file and poll(2) will return whenever the interrupt was triggered.
If you use poll(2), set the events POLLPRI and POLLERR. If you use select(2), set the file descriptor in exceptfds.
After poll(2) returns, either lseek(2) to the beginning of the sysfs file and read the new value or close the file and re-open it to read the value.

핀을 인터럽트 생성 인터럽트로 구성할 수 있고 인터럽트를 생성하도록 구성된 경우("edge" 설명 참조), 해당 파일에서 poll(2) 할 수 있고 poll(2) 는 인터럽트가 발생할 때마다 리턴하도록 트리거된다.
poll(2) 를 사용하는 경우 POLLPRI 와 POLLERR 이벤트를 설정한다.
select(20 를 사용하는 경우 exceptfds 에 파일 기술자를 설정한다.
poll(2) 가 반환된 후 sysfs 파일의 시작 부분에 lseek(2) 를 입력하고 새 값을 읽거나 파일을 닫은 다음 다시 열어 값을 읽는다.

 "edge" ... reads as either "none", "rising", "falling", or "both".
Write these strings to select the signal edge(s) that will make poll(2) on the "value" file return.

"edge" ... "none", "rising", "falling", 혹은 "both" 중 하나로 읽는다.
"value" 파일에서 poll(2) 를 반환할 신호 edge(s) 를 선택하려면 이 문자열을 사용한다.

  This file exists only if the pin can be configured as an interrupt generating input pin.

이 파일은 pin 을 인터럽트 생성 입력 핀으로 구성할 수 있는 경우에만 존재한다.

 "active_low" ... reads as either 0 (false) or 1 (true).
Write any nonzero value to invert the value attribute both for reading and writing.
Existing and subsequent poll(2) support configuration via the edge attribute for "rising" and "falling" edges will follow this setting.

"active_low" ... 0(거짓) 혹은 1(참) 으로 읽는다.
0 이 아닌 값을 작성하여 읽기 및 쓰기 모두 값 속성을 반전한다.
"rising" 및 "falling" edge 에 대한 edge 속성을 통한 기존 및 후속 poll(2) 지원 구성이 이 설정을 따른다.

GPIO controllers have paths like /sys/class/gpio/gpiochip42/ (for the controller implementing GPIOs starting at #42) and have the following read-only attributes:

GPIO 제어기는 /sys/class/gpio/gpiochip42/ (#42 에서 시작하는 GPIO 를 구현하는 제어기용) 와 같은 경로가 있으며 아래와 같은 읽기 전용 속성이 있다:

    /sys/class/gpio/gpiochipN/

     "base" ... same as N, the first GPIO managed by this chip

     "base" ... N 과 동일하며 이 Chip 이 관리하는 첫 번째 GPIO

     "label" ... provided for diagnostics (not always unique)

     "label" ... 진단을 위해 제공됨(항상 고유하지는 않음)

        "ngpio" ... how many GPIOs this manages (N to N + ngpio - 1)

        "ngpio" ... 이것이 몇 개의 GPIO 를 관리하는지 (N ~ N + ngpio - 1)

Board documentation should in most cases cover what GPIOs are used for what purposes.
However, those numbers are not always stable;
GPIOs on a daughtercard might be different depending on the base board being used, or other cards in the stack.
In such cases, you may need to use the gpiochip nodes (possibly in conjunction with schematics) to determine the correct GPIO number to use for a given signal.

대부분의 경우 Board 문서에는 어떤 목적으로 GPIO 가 사용되는지가 포함되어야 한다.
그러나 그 수는 항상 안정적이지 않다.
딸려오는 카드(보드) 의 GPIO 는 사용중인 베이스 보드 혹은 스택된 다른 카드(보드)에 따라 다를 수 있다.
이러한 경우 gpiochip 노드(회로도와 함께 사용 가능)를 사용하여 주어진 신호에 올바른 GPIO 번호를 결정해야 할 수 있다.



Exporting from Kernel code
--------------------------
Kernel code can explicitly manage exports of GPIOs which have already been requested using gpio_request():

Kernel Code 는 gpio_request() 를 사용하여 이미 요청된 GPIO 의 export 를 명시적으로 관리할 수 있다:

 /* export the GPIO to userspace */
 int gpiod_export(struct gpio_desc *desc, bool direction_may_change);

 /* reverse gpio_export() */
 void gpiod_unexport(struct gpio_desc *desc);

 /* create a sysfs link to an exported GPIO node */
 int gpiod_export_link(struct device *dev, const char *name, struct gpio_desc *desc);

After a kernel driver requests a GPIO, it may only be made available in the sysfs interface by gpiod_export().
The driver can control whether the signal direction may change.
This helps drivers prevent userspace code from accidentally clobbering important system state.

Kernel Driver 가 GPIO 를 요청한 후에 gpiod_export() 에 의해 sysfs 인터페이스에서만 사용할 수 있다.
Driver 는 신호 방향이 변경될지 여부를 제어할 수 있다.
이것은 Driver 가 사용자 공간 코드가 실수로 중요한 System State 를 건드리는 것을 방지한다.

This explicit exporting can help with debugging (by making some kinds of experiments easier), or can provide an always-there interface that's suitable for documenting as part of a board support package.

이 명시적 export 는 디버깅에 도움이 될 수 있으며(보드 테스트의 일부를 쉽게 만들어줌으로써)
보드 지원 패키지의 일부로 문서화하기에 적합하며 보드에 항상 존재하는 인터페이스를 제공할 수 있다.

After the GPIO has been exported, gpiod_export_link() allows creating symlinks from elsewhere in sysfs to the GPIO sysfs node.
Drivers can use this to provide the interface under their own device in sysfs with a descriptive name.

GPIO 를 export 한 후 gpiod_export_link() 를 사용하면 sysfs 의 다른 곳에서 GPIO sysfs 노드를 심볼릭 링크로 만들 수 있다.
Driver 는 이를 사용하여 sysfs 의 고유 장치에 대한 인터페이스를 기술하는 이름을 제공할 수 있다.