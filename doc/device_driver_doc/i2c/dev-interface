Usually, i2c devices are controlled by a kernel driver. But it is also
possible to access all devices on an adapter from userspace, through
the /dev interface. You need to load module i2c-dev for this.

일반적으로 i2c 장치는 커널 드라이버에 의해 제어됩니다.
그러나 / dev 인터페이스를 통해 사용자 공간에서 어댑터의 모든 장치에 
액세스 할 수도 있습니다.
이를 위해 i2c-dev 모듈을로드해야합니다.


Each registered i2c adapter gets a number, counting from 0. You can
examine /sys/class/i2c-dev/ to see what number corresponds to which adapter.
Alternatively, you can run "i2cdetect -l" to obtain a formated list of all
i2c adapters present on your system at a given time. i2cdetect is part of
the i2c-tools package.

등록 된 각 i2c 어댑터는 0부터 세어 숫자를 얻습니다.
/ sys / class / i2c-dev /를 검사하여 어떤 번호가 어떤 어댑터와 일치하는지 
확인할 수 있습니다.
또는 "i2cdetect -l"을 실행하여 주어진 시간에 시스템에있는 모든 i2c 어댑터의 
형식화 된 목록을 얻을 수 있습니다.
i2cdetect는 i2c-tools 패키지의 일부입니다.


I2C device files are character device files with major device number 89
and a minor device number corresponding to the number assigned as 
explained above. They should be called "i2c-%d" (i2c-0, i2c-1, ..., 
i2c-10, ...). All 256 minor device numbers are reserved for i2c.

I2C 장치 파일은 주 장치 번호 89와 위에 설명 된대로 할당 된 번호에 해당하는 
보조 장치 번호가있는 문자 장치 파일입니다.
그것들은 "i2c- % d"(i2c-0, i2c-1, ..., i2c-10, ...)이라고해야합니다. 
256 개의 부 장치 번호는 모두 i2c 용으로 예약되어 있습니다.


C example
=========

So let's say you want to access an i2c adapter from a C program. The
first thing to do is "#include <linux/i2c-dev.h>". Please note that
there are two files named "i2c-dev.h" out there, one is distributed
with the Linux kernel and is meant to be included from kernel
driver code, the other one is distributed with i2c-tools and is
meant to be included from user-space programs. You obviously want
the second one here.

C 프로그램에서 i2c 어댑터에 액세스하려고한다고 가정 해 봅시다. 
가장 먼저 할 일은 "#include <linux / i2c-dev.h>"입니다.
"i2c-dev.h"라는 이름의 두 파일이 있습니다. 하나는 Linux 커널과 함께 배포되며 
커널 드라이버 코드에서 포함하기위한 것이고 다른 하나는 i2c-tools와 함께 배포되며 
의도 된 것입니다. 사용자 공간 프로그램에서 포함됩니다.


Now, you have to decide which adapter you want to access. You should
inspect /sys/class/i2c-dev/ or run "i2cdetect -l" to decide this.
Adapter numbers are assigned somewhat dynamically, so you can not
assume much about them. They can even change from one boot to the next.

이제 액세스 할 어댑터를 결정해야합니다.
/ sys / class / i2c-dev /를 검사하거나 "i2cdetect -l"을 실행하여이를 결정해야합니다.
어댑터 번호는 다소 동적으로 할당되어 있으므로 어댑터 번호에 대해 많이 생각할 수 없습니다.
그들은 한 부팅에서 다음 부팅으로 바꿀 수 있습니다.


Next thing, open the device file, as follows:

다음으로, 다음과 같이 장치 파일을 엽니다:

  int file;
  int adapter_nr = 2; /* probably dynamically determined */
  char filename[20];
  
  snprintf(filename, 19, "/dev/i2c-%d", adapter_nr);
  file = open(filename, O_RDWR);
  if (file < 0) {
    /* ERROR HANDLING; you can check errno to see what went wrong */
    exit(1);
  }

When you have opened the device, you must specify with what device
address you want to communicate:

장치를 열었을 때 통신 할 장치 주소를 지정해야합니다:

  int addr = 0x40; /* The I2C address */

  if (ioctl(file, I2C_SLAVE, addr) < 0) {
    /* ERROR HANDLING; you can check errno to see what went wrong */
    exit(1);
  }

Well, you are all set up now. You can now use SMBus commands or plain
I2C to communicate with your device. SMBus commands are preferred if
the device supports them. Both are illustrated below.

자, 이제 너 모두 준비 됐어. 이제 SMBus 명령이나 일반 I2C를 사용하여 장치와 \
통신 할 수 있습니다. SMBus 명령은 장치가 지원하는 경우 선호됩니다.
두 가지 모두 아래에 나와 있습니다.

  __u8 reg = 0x10; /* Device register to access */
  __s32 res;
  char buf[10];

  /* Using SMBus commands */
  res = i2c_smbus_read_word_data(file, reg);
  if (res < 0) {
    /* ERROR HANDLING: i2c transaction failed */
  } else {
    /* res contains the read word */
  }

  /* Using I2C Write, equivalent of 
     i2c_smbus_write_word_data(file, reg, 0x6543) */
  buf[0] = reg;
  buf[1] = 0x43;
  buf[2] = 0x65;
  if (write(file, buf, 3) != 3) {
    /* ERROR HANDLING: i2c transaction failed */
  }

  /* Using I2C Read, equivalent of i2c_smbus_read_byte(file) */
  if (read(file, buf, 1) != 1) {
    /* ERROR HANDLING: i2c transaction failed */
  } else {
    /* buf[0] contains the read byte */
  }

Note that only a subset of the I2C and SMBus protocols can be achieved by
the means of read() and write() calls. In particular, so-called combined
transactions (mixing read and write messages in the same transaction)
aren't supported. For this reason, this interface is almost never used by
user-space programs.

read () 및 write () 호출을 통해 I2C 및 SMBus 프로토콜의 하위 집합 만 구현할 수 있습니다.
특히, 소위 결합 트랜잭션 (동일한 트랜잭션에서 읽기 및 쓰기 메시지를 혼합)은 지원되지 않습니다.
이런 이유로이 인터페이스는 사용자 공간 프로그램에서 거의 사용되지 않습니다.


IMPORTANT: because of the use of inline functions, you *have* to use
'-O' or some variation when you compile your program!

중요 : 인라인 함수를 사용하기 때문에 프로그램을 컴파일 할 때 
'-O'또는 몇 가지 변형을 사용할 수 있습니다!


Full interface description
==========================

The following IOCTLs are defined:

다음 IOCTL이 정의됩니다:

ioctl(file, I2C_SLAVE, long addr)
  Change slave address. The address is passed in the 7 lower bits of the
  argument (except for 10 bit addresses, passed in the 10 lower bits in this
  case).

  슬레이브 주소를 변경하십시오. 
  주소는 인수의 하위 7 비트 (이 경우 10 비트 주소로 전달 된 10 비트 주소 제외)로 전달됩니다.


ioctl(file, I2C_TENBIT, long select)
  Selects ten bit addresses if select not equals 0, selects normal 7 bit
  addresses if select equals 0. Default 0.  This request is only valid
  if the adapter has I2C_FUNC_10BIT_ADDR.

  선택이 0이 아니라면 10 비트 주소를 선택하고, 선택이 0이면 일반 7 비트 주소를 선택합니다. 
  기본값 0.
  이 요청은 어댑터에 I2C_FUNC_10BIT_ADDR이있는 경우에만 유효합니다.


ioctl(file, I2C_PEC, long select)
  Selects SMBus PEC (packet error checking) generation and verification
  if select not equals 0, disables if select equals 0. Default 0.
  Used only for SMBus transactions.  This request only has an effect if the
  the adapter has I2C_FUNC_SMBUS_PEC; it is still safe if not, it just
  doesn't have any effect.

  선택 항목이 0이 아닌 경우 SMBus PEC (패킷 오류 검사) 
  생성 및 확인을 선택하고, 선택이 0이면 비활성화합니다. 기본값 0.
  SMBus 트랜잭션에만 사용됩니다. 이 요청은 어댑터에 I2C_FUNC_SMBUS_PEC가있는 
  경우에만 적용됩니다. 그렇지 않다면 여전히 안전합니다. 아무런 효과가 없습니다.


ioctl(file, I2C_FUNCS, unsigned long *funcs)
  Gets the adapter functionality and puts it in *funcs.

  어댑터 기능을 가져 와서 * funcs에 넣습니다.


ioctl(file, I2C_RDWR, struct i2c_rdwr_ioctl_data *msgset)
  Do combined read/write transaction without stop in between.
  Only valid if the adapter has I2C_FUNC_I2C.  The argument is
  a pointer to a

  그 사이에 중지없이 읽기 / 쓰기 트랜잭션을 결합합니다. 
  어댑터에 I2C_FUNC_I2C가있는 경우에만 유효합니다.
  인수는 아래에 대한 포인터입니다.

  struct i2c_rdwr_ioctl_data {
      struct i2c_msg *msgs;  /* ptr to array of simple messages */
      int nmsgs;             /* number of messages to exchange */
  }

  The msgs[] themselves contain further pointers into data buffers.
  The function will write or read data to or from that buffers depending
  on whether the I2C_M_RD flag is set in a particular message or not.
  The slave address and whether to use ten bit address mode has to be
  set in each message, overriding the values set with the above ioctl's.

  msgs [] 자체는 데이터 버퍼에 대한 추가 포인터를 포함합니다.
  이 함수는 I2C_M_RD 플래그가 특정 메시지에 설정되어 있는지 여부에 따라 
  해당 버퍼에서 데이터를 쓰거나 읽습니다.
  슬레이브 주소와 10 비트 주소 모드 사용 여부는 각 메시지에서 설정해야하며 
  위의 ioctl로 설정된 값을 무시해야합니다.


ioctl(file, I2C_SMBUS, struct i2c_smbus_ioctl_data *args)
  Not meant to be called  directly; instead, use the access functions
  below.

  직접 호출 할 수 없습니다. 대신 아래 액세스 기능을 사용하십시오.


You can do plain i2c transactions by using read(2) and write(2) calls.
You do not need to pass the address byte; instead, set it through
ioctl I2C_SLAVE before you try to access the device.

read (2) 및 write (2) 호출을 사용하여 일반 i2c 트랜잭션을 수행 할 수 있습니다.
주소 바이트를 전달할 필요는 없습니다. 대신 장치에 액세스하기 전에 
ioctl I2C_SLAVE를 통해 설정하십시오.


You can do SMBus level transactions (see documentation file smbus-protocol 
for details) through the following functions:

다음 기능을 통해 SMBus 레벨 트랜잭션을 수행 할 수 있습니다.
(자세한 내용은 문서 파일 smbus-protocol 참조):

  __s32 i2c_smbus_write_quick(int file, __u8 value);
  __s32 i2c_smbus_read_byte(int file);
  __s32 i2c_smbus_write_byte(int file, __u8 value);
  __s32 i2c_smbus_read_byte_data(int file, __u8 command);
  __s32 i2c_smbus_write_byte_data(int file, __u8 command, __u8 value);
  __s32 i2c_smbus_read_word_data(int file, __u8 command);
  __s32 i2c_smbus_write_word_data(int file, __u8 command, __u16 value);
  __s32 i2c_smbus_process_call(int file, __u8 command, __u16 value);
  __s32 i2c_smbus_read_block_data(int file, __u8 command, __u8 *values);
  __s32 i2c_smbus_write_block_data(int file, __u8 command, __u8 length, 
                                   __u8 *values);
All these transactions return -1 on failure; you can read errno to see
what happened. The 'write' transactions return 0 on success; the
'read' transactions return the read value, except for read_block, which
returns the number of values read. The block buffers need not be longer
than 32 bytes.

이러한 모든 트랜잭션은 실패시 -1을 반환합니다. 
무슨 일이 있었는지 알기 위해 errno를 읽을 수 있습니다.
'쓰기'트랜잭션은 성공시 0을 반환합니다. 'read'트랜잭션은 읽은 값의 수를 
반환하는 read_block을 제외하고는 읽기 값을 반환합니다.
블록 버퍼는 32 바이트를 초과 할 필요는 없다.


The above functions are all inline functions, that resolve to calls to
the i2c_smbus_access function, that on its turn calls a specific ioctl
with the data in a specific format. Read the source code if you
want to know what happens behind the screens.

위의 함수는 모두 i2c_smbus_access 함수에 대한 호출로 해석되는 
모든 인라인 함수이며 차례로 특정 형식의 데이터와 함께 특정 ioctl을 호출합니다.
화면 뒤에서 일어나는 일을 알고 싶다면 소스 코드를 읽으십시오.


Implementation details
======================

For the interested, here's the code flow which happens inside the kernel
when you use the /dev interface to I2C:

흥미로운 점은 I2C에 / dev 인터페이스를 사용할 때 커널 내부에서 발생하는 코드 흐름입니다:


1* Your program opens /dev/i2c-N and calls ioctl() on it, as described in
section "C example" above.

프로그램은 / dev / i2c-N을 열고 위에서 "C 예제"절에서 설명한대로 ioctl ()을 호출합니다.


2* These open() and ioctl() calls are handled by the i2c-dev kernel
driver: see i2c-dev.c:i2cdev_open() and i2c-dev.c:i2cdev_ioctl(),
respectively. You can think of i2c-dev as a generic I2C chip driver
that can be programmed from user-space.

이러한 open () 및 ioctl () 호출은 i2c-dev 커널 드라이버에서 처리합니다:
i2c-dev.c : i2cdev_open () 및 i2c-dev.c : i2cdev_ioctl ()을 각각 참조하십시오.
i2c-dev는 사용자 공간에서 프로그래밍 할 수있는 일반적인 I2C 칩 드라이버로 생각할 수 있습니다.


3* Some ioctl() calls are for administrative tasks and are handled by
i2c-dev directly. Examples include I2C_SLAVE (set the address of the
device you want to access) and I2C_PEC (enable or disable SMBus error
checking on future transactions.)

일부 ioctl () 호출은 관리 작업용이며 i2c-dev에 의해 직접 처리됩니다.
예를 들어 I2C_SLAVE (액세스하려는 장치의 주소 설정) 및 I2C_PEC 
(향후 트랜잭션에 대한 SMBus 오류 검사 사용 또는 사용 안 함)


4* Other ioctl() calls are converted to in-kernel function calls by
i2c-dev. Examples include I2C_FUNCS, which queries the I2C adapter
functionality using i2c.h:i2c_get_functionality(), and I2C_SMBUS, which
performs an SMBus transaction using i2c-core.c:i2c_smbus_xfer().

다른 ioctl () 호출은 i2c-dev에 의해 커널 내부 함수 호출로 변환됩니다.
i2C_FUNCS는 i2c 어댑터를 i2c_get_functionality () 및 i2c_core.c : 
i2c_smbus_xfer ()를 사용하여 SMBus 트랜잭션을 수행하는 I2C_SMBUS를 사용하여 쿼리합니다.


The i2c-dev driver is responsible for checking all the parameters that
come from user-space for validity. After this point, there is no
difference between these calls that came from user-space through i2c-dev
and calls that would have been performed by kernel I2C chip drivers
directly. This means that I2C bus drivers don't need to implement
anything special to support access from user-space.

i2c-dev 드라이버는 사용자 영역에서 온 모든 매개 변수를 검사하여 유효성을 검사합니다.
이 시점 이후에는 사용자 공간에서 나온 호출과 i2c-dev를 통한 호출과 커널 I2C 칩 드라이버에서 
직접 수행 한 호출간에 차이가 없습니다.
이것은 I2C 버스 드라이버가 사용자 공간에서의 액세스를 지원하기 위해 특별한 것을 구현할 필요가 
없다는 것을 의미합니다.


5* These i2c-core.c/i2c.h functions are wrappers to the actual
implementation of your I2C bus driver. Each adapter must declare
callback functions implementing these standard calls.
i2c.h:i2c_get_functionality() calls i2c_adapter.algo->functionality(),
while i2c-core.c:i2c_smbus_xfer() calls either
adapter.algo->smbus_xfer() if it is implemented, or if not,
i2c-core.c:i2c_smbus_xfer_emulated() which in turn calls
i2c_adapter.algo->master_xfer().

이 i2c-core.c / i2c.h 함수는 I2C 버스 드라이버의 실제 구현에 대한 래퍼입니다.
각 어댑터는 이러한 표준 호출을 구현하는 콜백 함수를 선언해야합니다.
i2c_core.c : i2c_smbus_xfer ()는 adapter.algo-> smbus_xfer ()가 구현되어 있으면 호출하거나 
그렇지 않으면 i2c-core를 호출합니다. c : i2c_adapter.algo-> master_xfer ()를 호출하는 
i2c_smbus_xfer_emulated ().


After your I2C bus driver has processed these requests, execution runs
up the call chain, with almost no processing done, except by i2c-dev to
package the returned data, if any, in suitable format for the ioctl.

I2C 버스 드라이버가 이러한 요청을 처리 한 후 실행은 거의 처리되지 않고 호출 체인을 실행합니다. 
i2c-dev가 ioctl에 적합한 형식으로 반환 된 데이터를 패키지하는 경우는 예외입니다.

