This document describes the i2c protocol. Or will, when it is finished :-)

Key to symbols
==============

S     (1 bit) : Start bit
P     (1 bit) : Stop bit
Rd/Wr (1 bit) : Read/Write bit. Rd equals 1, Wr equals 0.
A, NA (1 bit) : Accept and reverse accept bit.
Addr  (7 bits): I2C 7 bit address. Note that this can be expanded as usual to
                get a 10 bit I2C address.
Comm  (8 bits): Command byte, a data byte which often selects a register on
                the device.
Data  (8 bits): A plain data byte. Sometimes, I write DataLow, DataHigh
                for 16 bit data.
Count (8 bits): A data byte containing the length of a block operation.

[..]: Data sent by I2C device, as opposed to data sent by the host adapter.


Simple send transaction
======================

This corresponds to i2c_master_send.

  S Addr Wr [A] Data [A] Data [A] ... [A] Data [A] P


Simple receive transaction
===========================

This corresponds to i2c_master_recv

  S Addr Rd [A] [Data] A [Data] A ... A [Data] NA P


Combined transactions
====================

This corresponds to i2c_transfer

They are just like the above transactions, but instead of a stop bit P
a start bit S is sent and the transaction continues. An example of
a byte read, followed by a byte write:

그들은 위의 트랜잭션과 같지만 정지 비트 P 대신 시작 비트 S가 전송되고 트랜잭션이 계속됩니다. 
바이트 읽기와 그 뒤에 바이트 쓰기의 예 :

  S Addr Rd [A] [Data] NA S Addr Wr [A] Data [A] P


Modified transactions
=====================

The following modifications to the I2C protocol can also be generated by
setting these flags for i2c messages. With the exception of I2C_M_NOSTART, they
are usually only needed to work around device issues:

I2C 메시지에 대한 다음 플래그를 설정하여 I2C 프로토콜에 대한 다음 수정 사항을 생성 할 수도 있습니다.
I2C_M_NOSTART를 제외하고는 일반적으로 장치 문제를 해결할 때만 필요합니다:


I2C_M_IGNORE_NAK:
    Normally message is interrupted immediately if there is [NA] from the
    client. Setting this flag treats any [NA] as [A], and all of
    message is sent.
    These messages may still fail to SCL lo->hi timeout.

    클라이언트로부터 [NA]가 있으면 일반적으로 메시지가 즉시 중단됩니다.
    이 플래그를 설정하면 [NA]는 [A]로 취급되고 모든 메시지가 전송됩니다.
    이 메시지는 여전히 SCL lo -> hi timeout에 실패 할 수 있습니다.


I2C_M_NO_RD_ACK:
    In a read message, master A/NA bit is skipped.

    읽기 메시지에서 마스터 A / NA 비트는 건너 뜁니다.


I2C_M_NOSTART:
    In a combined transaction, no 'S Addr Wr/Rd [A]' is generated at some
    point. For example, setting I2C_M_NOSTART on the second partial message
    generates something like:

    결합 된 트랜잭션에서는 'S Addr Wr / Rd [A]'가 생성되지 않습니다.
    예를 들어, 두 번째 부분 메시지에서 I2C_M_NOSTART를 설정하면 다음과 같은 내용이 생성됩니다:

      S Addr Rd [A] [Data] NA Data [A] P
    If you set the I2C_M_NOSTART variable for the first partial message,
    we do not generate Addr, but we do generate the startbit S. This will
    probably confuse all other clients on your bus, so don't try this.

    첫 번째 부분 메시지에 I2C_M_NOSTART 변수를 설정하면 Addr을 생성하지 않지만 시작 비트 S를 생성합니다.
    이렇게하면 버스의 다른 모든 클라이언트가 혼동을 일으킬 수 있으므로이 방법을 사용하지 마십시오.


    This is often used to gather transmits from multiple data buffers in
    system memory into something that appears as a single transfer to the
    I2C device but may also be used between direction changes by some
    rare devices.

    이것은 시스템 메모리의 여러 데이터 버퍼에서 I2C 장치로의 단일 전송으로 나타나는 전송으로 수집하는 데 
    자주 사용되지만 일부 희귀 한 장치에 의한 방향 변경에도 사용할 수 있습니다.


I2C_M_REV_DIR_ADDR:
    This toggles the Rd/Wr flag. That is, if you want to do a write, but
    need to emit an Rd instead of a Wr, or vice versa, you set this
    flag. For example:

    이것은 Rd / Wr 플래그를 토글합니다. 즉, 쓰기를 원하지만 Wr 대신 Rd를 내보내거나 그 반대로 내보내려면이 
    플래그를 설정합니다. 예 :

      S Addr Rd [A] Data [A] Data [A] ... [A] Data [A] P


I2C_M_STOP:
    Force a stop condition (P) after the message. Some I2C related protocols
    like SCCB require that. Normally, you really don't want to get interrupted
    between the messages of one transfer.

    메시지 다음에 강제 종료 조건 (P)을 지정하십시오. 
    SCCB와 같은 일부 I2C 관련 프로토콜에는이를 필요로합니다.
    일반적으로, 당신은 정말로 하나의 전송 메시지 사이에 끼어 들기를 원하지 않습니다.
