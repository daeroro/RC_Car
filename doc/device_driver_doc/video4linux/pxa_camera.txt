                              PXA-Camera Host Driver
                          	PXA- 카메라 호스트 드라이버
                              ======================
 
Constraints	제약 조건
-----------
  a) Image size for YUV422P format
    	YUV422P 형식의 이미지 크기
 	All YUV422P images are enforced to have width x height % 16 = 0.
 	This is due to DMA constraints, which transfers only planes of 8 byte multiples.
    	모든 YUV422P 이미지는 너비 x 높이 % 16 = 0으로 적용됩니다.
    	8 바이트 배수의 평면만 전송하는 DMA 제약 때문입니다.
 
 
Global video workflow  전세계 비디오 워크 플로우
---------------------
  a) QCI stopped   	QCI 중지됨 	
 	Initialy, the QCI interface is stopped.
 	When a buffer is queued (pxa_videobuf_ops->buf_queue), the QCI starts.
    	처음에는 QCI 인터페이스가 중지됩니다.
    	 버퍼가 대기 중일 때 (pxa_videobuf_ops-> buf_queue) QCI가 시작됩니다.
 
  b) QCI started   	QCI 시작
 	More buffers can be queued while the QCI is started without halting the capture.  The new buffers are "appended" at the tail of the DMA chain, and smoothly captured one frame after the other.
캡처를 중지하지 않고 QCI가 시작될 때 더 많은 버퍼를 대기시킬 수 있습니다. 새로운 버퍼는 DMA 체인의 끝에 추가되고 다른 버퍼보다 ​​부드럽게 캡처됩니다.
 
 	Once a buffer is filled in the QCI interface, it is marked as "DONE" and removed from the active buffers list. It can be then requeud or dequeued by userland application.
버퍼가 QCI 인터페이스에 채워지면 "완료"로 표시되고 활성 버퍼 목록에서 제거됩니다. 그런 다음 사용자 영역 응용 프로그램에 의해 다시 큐잉되거나 대기열에서 제외될 수 있습니다.
 	Once the last buffer is filled in, the QCI interface stops.
    	마지막 버퍼가 채워지면 QCI 인터페이스가 중지됩니다.
c) Capture global finite state machine schema
  	global finite state 스키마 캡처
 
  	+----+                         	+---+  +----+
  	| DQ |                         	| Q |  | DQ |
  	|    v                             |   v  |    v
	+-----------+                     +------------------------+
	|   STOP	|                 	| Wait for capture start |   (캡처 시작을 기다리는 중)
	+-----------+     	Q       	+------------------------+
+-> | QCI: stop | ------------------> | QCI: run           	| <------------+
|   | DMA: stop |                 	| DMA: stop    	      |          	|
|   +-----------+         	+-----> +------------------------+              |
|                        	/                        	|               	|
|                       	/         	+---+  +----+   |          	     |
|capture list empty    	/          	| Q |  | DQ |   | QCI Irq EOF   	|
|                     	/           	|   v  |	v   v               	|
|   +--------------------+         	+----------------------+           	|
|   | DMA hotlink missed |         	|	Capture running   |           	|
|   +--------------------+         	+----------------------+           	|
|   | QCI: run       	|     +-----> | QCI: run             | <-+       	|
|   | DMA: stop      	|    /    	| DMA: run         	|   |       	|
|   +--------------------+   /         +----------------------+   | Other 	|
| 	^                 	/DMA still        	|           	| channels  |
| 	| capture list   	/  running	         | DMA Irq End   | not       |
| 	| not empty     	/                   	|           	| finished  |
| 	|              	/                    	v           	| yet   	|
|   +----------------------+       	+----------------------+   |           |
|   |  Videobuf released   |       	|  Channel completed   |   |           |
|   +----------------------+       	+----------------------+   |           |
+-- | QCI: run         	|       	| QCI: run         	| --+  	     |
	| DMA: run         	|       	| DMA: run         	|           	|
	+----------------------+       	+----------------------+           	|
           	^                  	/       	|                       	|
     	      |          no overrun /        	| overrun               	|
           	|                	/         	v                       	|
	+--------------------+     	/   +----------------------+               |
	|  Frame completed   |    	/    | 	Frame overran	|           	|
	+--------------------+ <-----+ 	+----------------------+ restart frame |
	| QCI: run       	|         	| QCI: stop        	| --------------+
	| DMA: run       	|         	| DMA: stop        	|
	+--------------------+         	+----------------------+
 
	Legend: - each box is a FSM state
           	각 box는 FSM 상태입니다.
        	- each arrow is the condition to transition to another state
           	각 화살표는 다른 상태로 전환하기 위한 조건입니다.
        	- an arrow with a comment is a mandatory transition (no condition)
           	주석이 있는 화살표는 필수 전환입니다 (조건 없음).
    	    - arrow "Q" means : a buffer was enqueued
           	화살표 "Q"는 버퍼가 대기열에 들어 갔음을 의미합니다.
        	- arrow "DQ" means : a buffer was dequeued
           	화살표 "DQ"는 버퍼가 대기열에서 제외되었음을 의미합니다.
        	- "QCI: stop" means the QCI interface is not enabled
           	"QCI : 중지"는 QCI 인터페이스가 사용 가능하지 않음을 의미합니다.
        	- "DMA: stop" means all 3 DMA channels are stopped
           	"DMA : 정지"는 3 개의 DMA 채널이 모두 중지되었음을 의미합니다.
        	- "DMA: run" means at least 1 DMA channel is still running
           	"DMA : run"은 적어도 하나의 DMA 채널이 아직 실행 중임을 의미합니다.
DMA usage  	DMA 사용
---------
  a) DMA flow  흐름
 	- first buffer queued for capture           	캡춰를 위해서(때문에) 큐에 넣어 진 최초의 버퍼
   	Once a first buffer is queued for capture, the QCI is started, but data transfer is not started. On "End Of Frame" interrupt, the irq handler starts the DMA chain.
캡처를 위해 첫 번째 버퍼가 대기 상태가 되면 QCI는 시작되지만 데이터 전송은 시작되지 않습니다. "End Of Frame"인터럽트에서, irq 핸들러는 DMA 체인을 시작합니다.
 	- capture of one videobuffer        	하나의 비디오 버퍼 캡처
   	The DMA chain starts transferring data into videobuffer RAM pages.
   	When all pages are transferred, the DMA irq is raised on "ENDINTR" status
DMA 체인은 데이터를 비디오 버퍼 RAM 페이지로 전송하기 시작합니다.
       모든 페이지가 전송되면 "ENDINTR"상태에서 DMA irq가 발생합니다
 	- finishing one videobuffer         	하나의 비디오 버퍼 마무리
   	The DMA irq handler marks the videobuffer as "done", and removes it from the active running queue. Meanwhile, the next videobuffer (if there is one), is transferred by DMA
DMA irq 처리기는 비디오 버퍼를 "완료"로 표시하고 활성 버퍼에서 제거합니다. 한편, 다음 videobuffer (있는 경우), DMA에 의해 전송됩니다
 	- finishing the last videobuffer    	마지막 비디오 버퍼 마무리
   	On the DMA irq of the last videobuffer, the QCI is stopped.
마지막 비디오 버퍼의 DMA irq에서 QCI가 중지됩니다.
 
b) DMA prepared buffer will have this structure
DMA로 준비된 버퍼는이 구조를 가질 것이다.
 
     +------------+-----+---------------+-----------------+
 	| desc-sg[0] | ... | desc-sg[last] | finisher/linker |
     +------------+-----+---------------+-----------------+
 
 	This structure is pointed by dma->sg_cpu.
    	이 구조체는 dma-> sg_cpu에 의해 지시된다.
 	The descriptors are used as follows :  <디스크립터>는 다음과 같이 사용됩니다.
  	- desc-sg[i]: i-th descriptor, transferring the i-th sg element to the video buffer scatter gather
           	i 번째 디스크립터로 i 번째 sg 요소를 비디오 버퍼 scatter gather로 전송
  	- finisher: has ddadr=DADDR_STOP, dcmd=ENDIRQEN
  	- linker: has ddadr= desc-sg[0] of next video buffer, dcmd=0
           	다음 비디오 버퍼의 ddadr = desc-sg [0], dcmd = 0
 
 	For the next schema, let's assume d0=desc-sg[0] .. dN=desc-sg[N], "f" stands for finisher and "l" for linker.
다음 스키마의 경우, d0 = desc-sg [0] .. dN = desc-sg [N]이라고 가정 해 봅시다. "f"는 피니셔를 나타내며 "l"은 링커를 나타냅니다.
 	A typical running chain is :        	일반적인 실행 체인은 다음과 같습니다.
 
     	Videobuffer 1     	Videobuffer 2
 	+---------+----+---+  +----+----+----+---+
 	| d0 | .. | dN | l |  | d0 | .. | dN | f |
 	+---------+----+-|-+  ^----+----+----+---+
                  	|	|
     	             +----+
 
 	After the chaining is finished, the chain looks like :
    	연결이 끝나면 체인 모양은 다음과 같습니다.
 
     	Videobuffer 1     	Videobuffer 2     	Videobuffer 3
 	+---------+----+---+  +----+----+----+---+  +----+----+----+---+
 	| d0 | .. | dN | l |  | d0 | .. | dN | l |  | d0 | .. | dN | f |
 	+---------+----+-|-+  ^----+----+----+-|-+  ^----+----+----+---+
                  	|	|            	|	|
                  	+----+            	+----+
                                           new_link
 
c) DMA hot chaining timeslice issue
  	DMA 핫 체이닝 타임 슬라이스 문제
 
 	As DMA chaining is done while DMA _is_ running, the linking may be done while the DMA jumps from one Videobuffer to another. On the schema, that would be a problem if the following sequence is encountered :
 DMA가 실행 중일 때 DMA 체인이 완료되면 DMA가 한 Videobuffer에서 다른 Videobuffer로 점프하는 동안 연결이 수행 될 수 있습니다. 스키마에서 다음 시퀀스가 ​​발생하면 문제가 됩니다.
 
  	- DMA chain is Videobuffer1 + Videobuffer2
    	DMA 체인은 Videobuffer1 + Videobuffer2입니다.
  	- pxa_videobuf_queue() is called to queue Videobuffer3
    	pxa_videobuf_queue ()가 Videobuffer3 대기열에 호출됩니다.
  	- DMA controller finishes Videobuffer2, and DMA stops
    	DMA 컨트롤러가 Videobuffer2를 종료하고 DMA가 중지됩니다.
  	=>
     	Videobuffer 1     	Videobuffer 2
 	+---------+----+---+  +----+----+----+---+
 	| d0 | .. | dN | l |  | d0 | .. | dN | f |
 	+---------+----+-|-+  ^----+----+----+-^-+
                  	|	|            	|
                  	+----+            	+-- DMA DDADR loads DDADR_STOP
                                         	DMA DDADR은 DDADR_STOP을로드합니다.
 
  	- pxa_dma_add_tail_buf() is called, the Videobuffer2 "finisher" is replaced by a "linker" to Videobuffer3 (creation of new_link)
pxa_dma_add_tail_buf ()가 호출되면 Videobuffer2 "finisher"가 Videobuffer3의 "링커"로 대체됩니다 (new_link 생성).
 
- pxa_videobuf_queue() finishes
    	pxa_videobuf_queue ()가 완료되었습니다.
  	- the DMA irq handler is called, which terminates Videobuffer2
DMA irq 핸들러가 호출되어 Videobuffer2를 종료합니다.
  	- Videobuffer3 capture is not scheduled on DMA chain (as it stopped !!!)
Videobuffer3 캡처가 DMA 체인에서 예약되지 않았습니다 (중단됨 !!!).
 
     	Videobuffer 1     	Videobuffer 2     	Videobuffer 3
 	+---------+----+---+  +----+----+----+---+  +----+----+----+---+
 	| d0 | .. | dN | l |  | d0 | .. | dN | l |  | d0 | .. | dN | f |
 	+---------+----+-|-+  ^----+----+----+-|-+  ^----+----+----+---+
                  	|	|            	|	|
                  	+----+            	+----+
                                           new_link
                 	                     DMA DDADR still is DDADR_STOP
 
  	- pxa_camera_check_link_miss() is called
    	This checks if the DMA is finished and a buffer is still on the pcdev->capture list. If that's the case, the capture will be restarted, and Videobuffer3 is scheduled on DMA chain.
    	pxa_camera_check_link_miss ()가 호출되었습니다.
        이렇게하면 DMA가 완료되고 버퍼가 여전히 pcdev-> capture 목록에 있는지 확인합니다. 이 경우 캡처가 다시 ​​시작되고 Videobuffer3가 DMA 체인에서 예약됩니다.
  	- the DMA irq handler finishes
    	DMA irq 처리기가 완료됩니다.
 
 	Note: if DMA stops just after pxa_camera_check_link_miss() reads DDADR() value, we have the guarantee that the DMA irq handler will be called back when the DMA will finish the buffer, and pxa_camera_check_link_miss() will be called again, to reschedule Videobuffer3.
pxa_camera_check_link_miss ()가 DDADR () 값을 읽은 직후 DMA가 중지되면 DMA가 버퍼를 끝내고 pide_camera_check_link_miss ()가 다시 호출되어 Videobuffer3 일정을 다시 잡을 때 DMA irq 처리기가 다시 호출된다는 보장이 있습니다.
--
Author: Robert Jarzmik <robert.jarzmik@free.fr>
 

