Cropping and Scaling algorithm, used in the sh_mobile_ceu_camera driver
sh_mobile_ceu_camera 드라이버에서 사용되는 
Cropping(자르기) 및 Scaling(크기조정) 알고리즘
    	=======================================================================
 
Terminology	기술
-----------
 
sensor scales: horizontal and vertical scales, configured by the sensor driver
센서 스케일  : 센서 드라이버에 의해 구성된 수평 및 수직 스케일
host scales: -"- host driver
combined scales: sensor_scale * host_scale
결합된 스케일  : 센서 스케일 * 호스트 스케일
 
 
Generic scaling / cropping scheme        	일반 크기 조정 / 자르기 스키마
---------------------------------
 
-1--
|
-2-- -\
|  	--\
|     	--\
+-5-- .  	-- -3-- -\
|  	`...        	-\
|      	`... -4-- .   - -7..
|                 	`.
|                   	`. .6--
|
|                    	. .6'-
|                  	.´
|       	... -4'- .´
|   	...´         	- -7'.
+-5'- .´           	-/
|        	-- -3'- -/
|     	--/
|  	--/
-2'- -/
|
|
-1'-
 
In the above chart minuses and slashes represent "real" data amounts, points and accents represent "useful" data, basically, CEU scaled and cropped output, mapped back onto the client's source plane.
위의 차트에서 빼기와 슬래시는 "실제"데이터 양, 점 및 액센트가 "유용한"데이터를 나타냅니다. 기본적으로 CEU는 출력을 크기 조정하고 잘라내어 클라이언트 소스 평면에 다시 매핑합니다.
Such a configuration can be produced by user requests:
이러한 구성은 사용자 요청에 의해 생성 될 수 있습니다.
 
S_CROP(left / top = (5) - (1), width / height = (5') - (5))
S_FMT(width / height = (6') - (6))
 
Here:
 
(1) to (1') - whole max width or height
(1) to (2)  - sensor cropped left or top
(2) to (2') - sensor cropped width or height
(3) to (3') - sensor scale
(3) to (4)  - CEU cropped left or top
(4) to (4') - CEU cropped width or height
(5) to (5') - reverse sensor scale applied to CEU cropped width or height
(2) to (5)  - reverse sensor scale applied to CEU cropped left or top
(6) to (6') - CEU scale - user window
(1) ~ (1 ') - 전체 최대 너비 또는 높이
(1) ~ (2) - 센서가 왼쪽 또는 위쪽으로 잘린 상태
(2) ~ (2 ') - 센서 크롭된 폭 또는 높이
(3) ~ (3 ') - 센서 스케일
(3) ~ (4) - CEU는 왼쪽 또는 위쪽에서 잘렸습니다.
(4) ~ (4 ') - CEU 자른 폭 또는 높이
(5) ~ (5 ') - CEU 자르기 폭 또는 높이에 적용된 역 센서 스케일
(2) ~ (5) - CEU에 적용된 리버스 센서 스케일 왼쪽 또는 위 자르기
(6) ~ (6 ') - CEU 스케일 - 사용자 창
 
S_FMT      	
-----
 
Do not touch input rectangle - it is already optimal.
입력 사각형을 만지지 마십시오. 이미 최적입니다.
 
1. Calculate current sensor scales:
 
    	scale_s = ((2') - (2)) / ((3') - (3))
 
2. Calculate "effective" input crop (sensor subwindow) - CEU crop scaled back at current sensor scales onto input window - this is user S_CROP:
 
    	width_u = (5') - (5) = ((4') - (4)) * scale_s
 
3. Calculate new combined scales from "effective" input window to requested user window:
 
    	scale_comb = width_u / ((6') - (6))
 
4. Calculate sensor output window by applying combined scales to real input window:
 
    	width_s_out = ((7') - (7)) = ((2') - (2)) / scale_comb
 
5. Apply iterative sensor S_FMT for sensor output window.
 
    	subdev->video_ops->s_fmt(.width = width_s_out)
 
6. Retrieve sensor output window (g_fmt)
 
7. Calculate new sensor scales:
 
    	scale_s_new = ((3')_new - (3)_new) / ((2') - (2))
 
8. Calculate new CEU crop - apply sensor scales to previously calculated "effective" crop:
 
    	width_ceu = (4')_new - (4)_new = width_u / scale_s_new
    	left_ceu = (4)_new - (3)_new = ((5) - (2)) / scale_s_new
 
9. Use CEU cropping to crop to the new window:
 
    	ceu_crop(.width = width_ceu, .left = left_ceu)
 
10. Use CEU scaling to scale to the requested user window:
 
    	scale_ceu = width_ceu / width
 
 
S_CROP     	
------
 
The API at http://v4l2spec.bytesex.org/spec/x1904.htm says:
 
"...specification does not define an origin or units. However by convention drivers should horizontally count unscaled samples relative to 0H."
"... 스펙은 원점이나 단위를 정의하지 않지만, 관례에 따라 운전자는 0H를 기준으로 스케일이 조정되지 않은 샘플을 가로로 계산해야 합니다."
 
We choose to follow the advise and interpret cropping units as client input pixels.
우리는 조언을 따라하고 자르기 단위를 클라이언트 입력 픽셀로 해석하도록 선택합니다.
Cropping is performed in the following 6 steps:
자르기는 다음 6 단계로 수행됩니다.
 
1. Request exactly user rectangle from the sensor.
    	센서에서 정확히 사용자 사각형을 요청하십시오.
 
2. If smaller - iterate until a larger one is obtained. Result: sensor cropped to 2 : 2', target crop 5 : 5', current output format 6' - 6.
더 작은 경우 - 더 큰 것을 얻을 때까지 반복하십시오. 결과 : 센서가 2 : 2 '로 자르고 대상 작물 5 : 5', 현재 출력 형식이 6 '- 6입니다.
 
3. In the previous step the sensor has tried to preserve its output frame as good as possible, but it could have changed. Retrieve it again.
    	이전 단계에서 센서는 가능한 한 출력 프레임을 보존하려고했지만 변경되었을 수 있습니다. 다시 검색하십시오.
 
4. Sensor scaled to 3 : 3'. Sensor's scale is (2' - 2) / (3' - 3). Calculate intermediate window: 4' - 4 = (5' - 5) * (3' - 3) / (2' - 2)
센서가 3 : 3 '로 scaling 된다. 센서의 스케일(크기)은 (2 '- 2) / (3'- 3)입니다. 중간 창 계산 : 4 '- 4 = (5'- 5) * (3 '- 3) / (2'- 2)
 
5. Calculate and apply host scale = (6' - 6) / (4' - 4)
호스트 스케일(크기) = (6 '- 6) / (4'- 4)를 계산하여 적용하십시오.
 
6. Calculate and apply host crop: 6 - 7 = (5 - 2) * (6' - 6) / (5' - 5)
    	계산해서 호스트크롭핑을 적용하십시오 :
--
Author: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
 

