PVR350 Video decoder registers 0x02002800 -> 0x02002B00
PVR350 비디오 디코더는 0x02002800 -> 0x02002B00을 등록합니다.
=======================================================
 
This list has been worked out through trial and error. There will be mistakes and omissions. Some registers have no obvious effect so it's hard to say what they do, while others interact with each other, or require a certain load sequence. Horizontal filter setup is one example, with six registers working in unison and requiring a certain load sequence to correctly configure. The indexed colour palette is much easier to set at just two registers, but again it requires a certain load sequence.
이 목록은 시행 착오를 통해 해결되었습니다. 실수와 생략이 있을 것입니다. 일부 레지스터에는 분명한 효과가 없으므로 레지스터가 무엇을하는지, 다른 레지스터는 서로 상호 작용하는지, 특정로드 시퀀스가 필요하다고 말하는 것은 어렵습니다. 수평 필터 설정은 6 개의 레지스터가 조화롭게 작동하고 올바르게 구성하기 위해 특정로드 시퀀스가 필요한 예입니다. 인덱싱 된 색상 표는 두 개의 레지스터로 설정하는 것이 훨씬 쉽지만 다시 특정load 시퀀스가 필요합니다.
 
Some registers are fussy about what they are set to. Load in a bad value & the decoder will fail. A firmware reload will often recover, but sometimes a reset is required. For registers containing size information, setting them to 0 is generally a bad idea. For other control registers i.e. 2878, you'll only find out what values are bad when it hangs.
일부 레지스터는 설정 한 항목에 대해 까다로운 내용을 가지고 있습니다. 잘못된 값으로 로드하면 디코더가 실패합니다. 펌웨어 리로드는 종종 복구되지만 때때로 리셋이 필요합니다. 크기 정보를 포함하는 레지스터의 경우 일반적으로 0으로 설정하는 것이 좋지 않습니다. 다른 제어 레지스터, 즉 2878의 경우, 값이 매달릴 때만 잘못된 값을 알 수 있습니다.
 
--------------------------------------------------------------------------------
2800
      bit 0
	Decoder enable
	  0 = disable
	  1 = enable
--------------------------------------------------------------------------------
2804
      bits 0:31
	Decoder horizontal Y alias register 1
---------------
2808
      bits 0:31
	Decoder horizontal Y alias register 2
---------------
280C
      bits 0:31
	Decoder horizontal Y alias register 3
---------------
2810
      bits 0:31
	Decoder horizontal Y alias register 4
---------------
2814
      bits 0:31
	Decoder horizontal Y alias register 5
---------------
2818
      bits 0:31
	Decoder horizontal Y alias trigger
 
     These six registers control the horizontal aliasing filter for the Y plane.
     이 6 개의 레지스터는 Y 평면에 대한 수평 앨리어싱 필터를 제어합니다.
 
     The first five registers must all be loaded before accessing the trigger(2818), as this register actually clocks the data through for the first five.
     첫 번째 5 개의 레지스터는 트리거에 액세스하기 전에 모두 로드해야합니다(2818). 이 레지스터는 실제로 처음 5 개의 데이터를 클록합니다.
 
     To correctly program set the filter, this whole procedure must be done 16 times. The actual register contents are copied from a lookup-table in the firmware which contains 4 different filter settings.
     필터를 올바르게 프로그래밍 하려면 이 전체 절차를 16 번 수행해야 합니다. 실제 레지스터 내용은 4 개의 다른 필터 설정이 들어있는 펌웨어의 찾아보기 테이블에서 복사됩니다.
 
--------------------------------------------------------------------------------
281C
      bits 0:31
	Decoder horizontal UV alias register 1
---------------
2820
      bits 0:31
	Decoder horizontal UV alias register 2
---------------
2824
      bits 0:31
	Decoder horizontal UV alias register 3
---------------
2828
      bits 0:31
	Decoder horizontal UV alias register 4
---------------
282C
      bits 0:31
	Decoder horizontal UV alias register 5
---------------
2830
      bits 0:31
	Decoder horizontal UV alias trigger
 
     These six registers control the horizontal aliasing for the UV plane.
     Operation is the same as the Y filter, with 2830 being the trigger register.
     이 6 개의 레지스터는 UV 평면에 대한 수평 앨리어싱을 제어합니다.
?????작동은 Y 필터와 동일하며 2830이 트리거 레지스터입니다.
 
--------------------------------------------------------------------------------
2834
      bits 0:15
	Decoder Y source width in pixels
 
      bits 16:31
	Decoder Y destination width in pixels
---------------
2838
      bits 0:15
	Decoder UV source width in pixels
 
      bits 16:31
	Decoder UV destination width in pixels
 
     NOTE: For both registers, the resulting image must be fully visible on screen. If the image exceeds the right edge both the source and destination size must be adjusted to reflect the visible portion. For the source width, you must take into account the scaling when calculating the new value.
     참고 : 두 레지스터 모두 결과 이미지가 화면에 완전히 표시되어야 합니다. 이미지가 오른쪽 가장자리를 초과하는 경우 소스 및 대상 크기를 모두 표시된 부분을 반영하도록 조정해야합니다. 소스 너비의 경우 새 값을 계산할 때 크기 조정을 고려해야합니다.
--------------------------------------------------------------------------------
 
283C
      bits 0:31
	Decoder Y horizontal scaling
		    Normally = Reg 2854 >> 2
---------------
2840
      bits 0:31
	Decoder ?? unknown - horizontal scaling
	  Usually 0x00080514
---------------
2844
      bits 0:31
	Decoder UV horizontal scaling
	  Normally = Reg 2854 >> 2
---------------
2848
      bits 0:31
	Decoder ?? unknown - horizontal scaling
	  Usually 0x00100514
---------------
284C
      bits 0:31
	Decoder ?? unknown - Y plane
	  Usually 0x00200020
---------------
2850
      bits 0:31
	Decoder ?? unknown - UV plane
	  Usually 0x00200020
---------------
2854
      bits 0:31
	Decoder 'master' value for horizontal scaling
---------------
2858
      bits 0:31
	Decoder ?? unknown
	  Usually 0
---------------
285C
      bits 0:31
	Decoder ?? unknown
	  Normally = Reg 2854 >> 1
---------------
2860
      bits 0:31
	Decoder ?? unknown
	  Usually 0
---------------
2864
      bits 0:31
	Decoder ?? unknown
	  Normally = Reg 2854 >> 1
---------------
2868
      bits 0:31
	Decoder ?? unknown
	  Usually 0
 
     Most of these registers either control horizontal scaling, or appear linked to it in some way. Register 2854 contains the 'master' value & the other registers can be calculated from that one. You must also remember to correctly set the divider in Reg 2874.
     이 레지스터의 대부분은 수평 스케일링을 제어하거나 어떤식 으로든 그것에 링크 된 것처럼 보입니다. 레지스터 2854에는 '마스터'값이 포함되어 있으며 다른 레지스터는 해당 값에서 계산할 수 있습니다. 또한 Reg 2874에서 구분선을 올바르게 설정하는 것을 기억해야합니다.
 
     To enlarge:
	     Reg 2854 = (source_width * 0x00200000) / destination_width
	     Reg 2874 = No divide
 
     To reduce from full size down to half size:
	     Reg 2854 = (source_width/2 * 0x00200000) / destination width
	     Reg 2874 = Divide by 2
 
     To reduce from half size down to quarter size:
	     Reg 2854 = (source_width/4 * 0x00200000) / destination width
	     Reg 2874 = Divide by 4
 
     The result is always rounded up.
 
--------------------------------------------------------------------------------
286C
      bits 0:15
	Decoder horizontal Y buffer offset
 
      bits 15:31
	Decoder horizontal UV buffer offset
 
     Offset into the video image buffer. If the offset is gradually incremented, the on screen image will move left & wrap around higher up on the right.
    비디오 이미지 버퍼로 오프셋. 오프셋이 점진적으로 증가하면 화면 이미지가 왼쪽으로 이동하고 오른쪽으로 위로 감습니다.
 
--------------------------------------------------------------------------------
2870
      bits 0:15
	Decoder horizontal Y output offset
 
      bits 16:31
	Decoder horizontal UV output offset
 
     Offsets the actual video output. Controls output alignment of the Y & UV planes. The higher the value, the greater the shift to the left. Use reg 2890 to move the image right.
     실제 비디오 출력을 오프셋합니다. Y 및 UV 평면의 출력 정렬을 조정합니다. 값이 높을수록 왼쪽으로의 이동이 커집니다. 이미지를 오른쪽으로 이동하려면 reg 2890을 사용하십시오.
 
--------------------------------------------------------------------------------
2874
      bits 0:1
	Decoder horizontal Y output size divider
	  00 = No divide
	  01 = Divide by 2
	  10 = Divide by 3
 
      bits 4:5
	Decoder horizontal UV output size divider
	  00 = No divide
	  01 = Divide by 2
	  10 = Divide by 3
 
      bit 8
	Decoder ?? unknown
	  0 = Normal
	  1 = Affects video output levels
 
      bit 16
	Decoder ?? unknown
	  0 = Normal
	  1 = Disable horizontal filter
 
--------------------------------------------------------------------------------
2878
      bit 0
	?? unknown
 
      bit 1
	osd on/off
	  0 = osd off
	  1 = osd on
 
      bit 2
	Decoder + osd video timing
	  0 = NTSC
	  1 = PAL
 
      bits 3:4
	?? unknown
 
      bit 5
	Decoder + osd
	  Swaps upper & lower fields
 
--------------------------------------------------------------------------------
287C
      bits 0:10
	Decoder & osd ?? unknown
	  Moves entire screen horizontally. Starts at 0x005 with the screen shifted heavily to the right. Incrementing in steps of 0x004 will gradually shift the screen to the left.
             전체 화면을 수평으로 이동합니다. 화면이 오른쪽으로 크게 이동 한 상태에서 0x005부터 시작합니다. 0x004 단계로 점진적으로 점차적으로 화면이 왼쪽으로 이동합니다.
      bits 11:31
	?? unknown
 
     Normally contents are 0x00101111 (NTSC) or 0x1010111d (PAL)
 
--------------------------------------------------------------------------------
2880  --------    ?? unknown
2884  --------    ?? unknown
--------------------------------------------------------------------------------
2888
      bit 0
	Decoder + osd ?? unknown
	  0 = Normal
	  1 = Misaligned fields (Correctable through 289C & 28A4)
 
      bit 4
	?? unknown
 
      bit 8
	?? unknown
 
     Warning: Bad values will require a firmware reload to recover.
		 Known to be bad are 0x000,0x011,0x100,0x111
 		값이 잘못되면 복구를 위해 펌웨어를 다시로드해야합니다.
		잘못된 예 : 0x000,0x011,0x100,0x111
--------------------------------------------------------------------------------
288C
      bits 0:15
	osd ?? unknown
	  Appears to affect the osd position stability. The higher the value the more unstable it becomes. Decoder output remains stable.
 	 osd 위치 안정성에 영향을 미치는 것으로 나타납니다. 값이 높을수록 불안정 해집니다. 디코더 출력은 안정적입니다.
 
      bits 16:31
	osd ?? unknown
	  Same as bits 0:15
 
--------------------------------------------------------------------------------
2890
      bits 0:11
	Decoder output horizontal offset.
	디코더 출력 수평 오프셋.
 
     Horizontal offset moves the video image right. A small left shift is possible, but it's better to use reg 2870 for that due to its greater range.
     수평 오프셋은 비디오 이미지를 오른쪽으로 이동시킵니다. 약간의 왼쪽 시프트가 가능하지만 더 큰 범위로 인해 reg 2870을 사용하는 것이 좋습니다.
 
     NOTE: Video corruption will occur if video window is shifted off the right edge. To avoid this read the notes for 2834 & 2838.
참고 : 비디오 창이 오른쪽 가장자리에서 벗어난 경우 비디오가 손상됩니다. 이를 피하려면 2834 & 2838에 대한 메모를 읽으십시오.
 
--------------------------------------------------------------------------------
2894
      bits 0:23
	Decoder output video surround colour.
 
     Contains the colour (in yuv) used to fill the screen when the video is running in a window.
     비디오가 창에서 실행될 때 화면을 채우는 데 사용되는 색상 (yuv)을 포함합니다.
--------------------------------------------------------------------------------
2898
      bits 0:23
	Decoder video window colour
	  Contains the colour (in yuv) used to fill the video window when the video is turned off.
	디코더 비디오 창 색상
	  비디오가 꺼질 때 비디오 창을 채우는 데 사용되는 색상 (yuv)을 포함합니다.
 
      bit 24
	Decoder video output
	  0 = Video on
	  1 = Video off
 
      bit 28
	Decoder plane order
	  0 = Y,UV
	  1 = UV,Y
 
      bit 29
	Decoder second plane byte order
	  0 = Normal (UV)
	  1 = Swapped (VU)
 
     In normal usage, the first plane is Y & the second plane is UV. Though the order of the planes can be swapped, only the byte order of the second plane can be swapped. This isn't much use for the Y plane, but can be useful for the UV plane.
     일반적인 사용법에서는 첫 번째 평면이 Y이며 두 번째 평면은 UV입니다. 평면의 순서는 바꿀 수 있지만 두 번째 평면의 바이트 순서 만 바꿀 수 있습니다. 이것은 Y 평면에는 그리 유용하지 않지만 UV 평면에 유용 할 수 있습니다.
 
--------------------------------------------------------------------------------
289C
      bits 0:15
	Decoder vertical field offset 1
 
      bits 16:31
	Decoder vertical field offset 2
 
     Controls field output vertical alignment. The higher the number, the lower the image on screen. Known starting values are 0x011E0017 (NTSC) & 0x01500017 (PAL)
     필드 출력 수직 정렬을 조정합니다. 숫자가 높을수록 화면의 이미지가 낮아집니다. 알려진 시작 값은 0x011E0017 (NTSC) 및 0x01500017 (PAL)입니다.
--------------------------------------------------------------------------------
28A0
      bits 0:15
	Decoder & osd width in pixels
 
      bits 16:31
	Decoder & osd height in pixels
 
     All output from the decoder & osd are disabled beyond this area. Decoder output will simply go black outside of this region. If the osd tries to exceed this area it will become corrupt.
     디코더 및 osd의 모든 출력은 이 영역을 벗어나서 사용할 수 없습니다. 디코더 출력은이 영역 밖에서 검게됩니다. osd가이 영역을 초과하면 훼손됩니다.
--------------------------------------------------------------------------------
28A4
      bits 0:11
	osd left shift.
 
     Has a range of 0x770->0x7FF. With the exception of 0, any value outside of this range corrupts the osd.
     0x770 -> 0x7FF의 범위를가집니다. 0을 제외하고 이 범위를 벗어나는 값은 osd를 손상시킵니다.
--------------------------------------------------------------------------------
28A8
      bits 0:15
	osd vertical field offset 1
 
      bits 16:31
	osd vertical field offset 2
 
     Controls field output vertical alignment. The higher the number, the lower the image on screen. Known starting values are 0x011E0017 (NTSC) & 0x01500017 (PAL)
     필드 출력 수직 정렬을 조정합니다. 숫자가 높을수록 화면의 이미지가 낮아집니다. 알려진 시작 값은 0x011E0017 (NTSC) 및 0x01500017 (PAL)입니다.
--------------------------------------------------------------------------------
28AC  --------    ?? unknown
 |
 V
28BC  --------    ?? unknown
--------------------------------------------------------------------------------
28C0
      bit 0
	Current output field
	  0 = first field
	  1 = second field
 
      bits 16:31
	Current scanline
	  The scanline counts from the top line of the first field through to the last line of the second field.
	현재 스캔 라인
	  스캔 라인은 첫 번째 필드의 맨 위 줄부터 두 번째 필드의 마지막 줄까지 계산됩니다.
--------------------------------------------------------------------------------
28C4  --------    ?? unknown
 |
 V
28F8  --------    ?? unknown
--------------------------------------------------------------------------------
28FC
      bit 0
	?? unknown
	  0 = Normal
	  1 = Breaks decoder & osd output
--------------------------------------------------------------------------------
2900
      bits 0:31
	Decoder vertical Y alias register 1
---------------
2904
      bits 0:31
	Decoder vertical Y alias register 2
---------------
2908
      bits 0:31
	Decoder vertical Y alias trigger
 
     These three registers control the vertical aliasing filter for the Y plane.
     Operation is similar to the horizontal Y filter (2804). The only real difference is that there are only two registers to set before accessing the trigger register (2908). As for the horizontal filter, the values are taken from a lookup table in the firmware, and the procedure must be repeated 16 times to fully program the filter.
      이 세 레지스터는 Y 평면에 대한 수직 앨리어싱 필터를 제어합니다.
????? 작동은 수평 Y 필터 (2804)와 유사합니다. 유일하게 실제적인 차이점은 트리거 레지스터 (2908)에 액세스하기 전에 설정할 레지스터가 두 개뿐이라는 것입니다. 수평 필터의 경우 펌웨어의 룩업 테이블에서 값을 가져오고 필터를 완전히 프로그래밍하려면 절차를 16 번 반복해야합니다.
--------------------------------------------------------------------------------
290C
      bits 0:31
	Decoder vertical UV alias register 1
---------------
2910
      bits 0:31
	Decoder vertical UV alias register 2
---------------
2914
      bits 0:31
	Decoder vertical UV alias trigger
 
     These three registers control the vertical aliasing filter for the UV plane. Operation is the same as the Y filter, with 2914 being the trigger.
     이 세 레지스터는 UV 평면에 대한 수직 앨리어싱 필터를 제어합니다. 작동은 2914가 트리거 인 Y 필터와 동일합니다.
--------------------------------------------------------------------------------
2918
      bits 0:15
	Decoder Y source height in pixels
 
      bits 16:31
	Decoder Y destination height in pixels
---------------
291C
      bits 0:15
	Decoder UV source height in pixels divided by 2
 
      bits 16:31
	Decoder UV destination height in pixels
 
     NOTE: For both registers, the resulting image must be fully visible on screen. If the image exceeds the bottom edge both the source and destination size must be adjusted to reflect the visible portion. For the source height, you must take into account the scaling when calculating the new value.
     참고 : 두 레지스터 모두 결과 이미지가 화면에 완전히 표시되어야합니다. 이미지가 하단 가장자리를 초과하는 경우 소스 및 대상 크기를 모두 표시 부분을 반영하도록 조정해야합니다. 소스 높이의 경우 새 값을 계산할 때 크기 조정을 고려해야합니다.
--------------------------------------------------------------------------------
2920
      bits 0:31
	Decoder Y vertical scaling
	  Normally = Reg 2930 >> 2
---------------
2924
      bits 0:31
	Decoder Y vertical scaling
	  Normally = Reg 2920 + 0x514
---------------
2928
      bits 0:31
	Decoder UV vertical scaling
	  When enlarging = Reg 2930 >> 2
	  When reducing = Reg 2930 >> 3
---------------
292C
      bits 0:31
	Decoder UV vertical scaling
	  Normally = Reg 2928 + 0x514
---------------
2930
      bits 0:31
	Decoder 'master' value for vertical scaling
---------------
2934
      bits 0:31
	Decoder ?? unknown - Y vertical scaling
---------------
2938
      bits 0:31
	Decoder Y vertical scaling
	  Normally = Reg 2930
---------------
293C
      bits 0:31
	Decoder ?? unknown - Y vertical scaling
---------------
2940
      bits 0:31
	Decoder UV vertical scaling
	  When enlarging = Reg 2930 >> 1
	  When reducing = Reg 2930
---------------
2944
      bits 0:31
	Decoder ?? unknown - UV vertical scaling
---------------
2948
      bits 0:31
	Decoder UV vertical scaling
	  Normally = Reg 2940
---------------
294C
      bits 0:31
	Decoder ?? unknown - UV vertical scaling
 
     Most of these registers either control vertical scaling, or appear linked to it in some way. Register 2930 contains the 'master' value & all other registers can be calculated from that one. You must also remember to correctly set the divider in Reg 296C
     이러한 레지스터의 대부분은 수직 스케일링을 제어하거나 어떤 식 으로든 그것에 링크 된 것처럼 보입니다. 2930 레지스터는 '마스터'값을 포함하고 있으며 다른 모든 레지스터는 그 값으로부터 계산할 수 있습니다. Reg 296C에서 디바이더를 올바르게 설정하는 것을 기억해야합니다
 
     To enlarge:
	     Reg 2930 = (source_height * 0x00200000) / destination_height
	     Reg 296C = No divide
 
     To reduce from full size down to half size:
	     Reg 2930 = (source_height/2 * 0x00200000) / destination height
	     Reg 296C = Divide by 2
 
      To reduce from half down to quarter.
	     Reg 2930 = (source_height/4 * 0x00200000) / destination height
	     Reg 296C = Divide by 4
 
--------------------------------------------------------------------------------
2950
      bits 0:15
	Decoder Y line index into display buffer, first field
 
      bits 16:31
	Decoder Y vertical line skip, first field
--------------------------------------------------------------------------------
2954
      bits 0:15
	Decoder Y line index into display buffer, second field
 
      bits 16:31
	Decoder Y vertical line skip, second field
--------------------------------------------------------------------------------
2958
      bits 0:15
	Decoder UV line index into display buffer, first field
 
      bits 16:31
	Decoder UV vertical line skip, first field
--------------------------------------------------------------------------------
295C
      bits 0:15
	Decoder UV line index into display buffer, second field
 
      bits 16:31
	Decoder UV vertical line skip, second field
--------------------------------------------------------------------------------
2960
      bits 0:15
	Decoder destination height minus 1
 
      bits 16:31
	Decoder destination height divided by 2
--------------------------------------------------------------------------------
2964
      bits 0:15
	Decoder Y vertical offset, second field
 
      bits 16:31
	Decoder Y vertical offset, first field
 
     These two registers shift the Y plane up. The higher the number, the greater the shift.
     이 두 레지스터는 Y 평면을 위로 이동시킵니다. 숫자가 높을수록 shift가 커집니다.
--------------------------------------------------------------------------------
2968
      bits 0:15
	Decoder UV vertical offset, second field
 
      bits 16:31
	Decoder UV vertical offset, first field
 
     These two registers shift the UV plane up. The higher the number, the greater the shift.
     이 두 레지스터는 UV 평면을 위로 이동시킵니다. 숫자가 높을수록 shift가 커집니다.
--------------------------------------------------------------------------------
296C
      bits 0:1
	Decoder vertical Y output size divider
	  00 = No divide
	  01 = Divide by 2
	  10 = Divide by 4
 
      bits 8:9
	Decoder vertical UV output size divider
	  00 = No divide
	  01 = Divide by 2
	  10 = Divide by 4
--------------------------------------------------------------------------------
2970
      bit 0
	Decoder ?? unknown
	  0 = Normal
	  1 = Affect video output levels
 
      bit 16
	Decoder ?? unknown
	  0 = Normal
	  1 = Disable vertical filter
 
--------------------------------------------------------------------------------
2974  --------   ?? unknown
 |
 V
29EF  --------   ?? unknown
--------------------------------------------------------------------------------
2A00
      bits 0:2
	osd colour mode
	  000 = 8 bit indexed
	  001 = 16 bit (565)
	  010 = 15 bit (555)
	  011 = 12 bit (444)
	  100 = 32 bit (8888)
 
      bits 4:5
	osd display bpp
	  01 = 8 bit
	  10 = 16 bit
	  11 = 32 bit
 
      bit 8
	osd global alpha
	  0 = Off
	  1 = On
 
      bit 9
	osd local alpha
	  0 = Off
	  1 = On
 
      bit 10
	osd colour key
	  0 = Off
	  1 = On
 
      bit 11
	osd ?? unknown
	  Must be 1
 
      bit 13
	osd colour space
	  0 = ARGB
	  1 = AYVU
 
      bits 16:31
	osd ?? unknown
	  Must be 0x001B (some kind of buffer pointer ?)
	  0x001B 여야합니다 (버퍼 포인터 일종인가?)
 
     When the bits-per-pixel is set to 8, the colour mode is ignored and assumed to be 8 bit indexed. For 16 & 32 bits-per-pixel the colour depth is honoured, and when using a colour depth that requires fewer bytes than allocated the extra bytes are used as padding. So for a 32 bpp with 8 bit index colour, there are 3 padding bytes per pixel. It's also possible to select 16bpp with a 32 bit colour mode. This results in the pixel width being doubled, but the color key will not work as expected in this mode.
     픽셀 당 비트 수가 8로 설정되면 색상 모드는 무시되고 8 비트 색인으로 가정됩니다. 픽셀 당 16 및 32 비트의 경우 색상 심도가 적용되며 할당 된 것보다 적은 바이트가 필요한 색상 심도를 사용할 때 여분의 바이트가 패딩으로 사용됩니다. 따라서 8 비트 인덱스 색상의 32bpp의 경우 픽셀 당 3 개의 패딩 바이트가 있습니다. 32 비트 컬러 모드로 16bpp를 선택할 수도 있습니다. 결과적으로 픽셀 너비가 두 배가되지만이 모드에서는 컬러 키가 예상대로 작동하지 않습니다.
 
     Colour key is as it suggests. You designate a colour which will become completely transparent. When using 565, 555 or 444 colour modes, the colour key is always 16 bits wide. The colour to key on is set in Reg 2A18.
     Local alpha works differently depending on the colour mode. For 32bpp & 8 bit indexed, local alpha is a per-pixel 256 step transparency, with 0 being transparent and 255 being solid. For the 16bpp modes 555 & 444, the unused bit(s) act as a simple transparency switch, with 0 being solid & 1 being fully transparent. There is no local alpha support for 16bit 565.
?????색상 키는 제안대로입니다. 완전히 투명하게 될 색상을 지정합니다. 565, 555 또는 444 색상 모드를 사용할 때 색상 키는 항상 16 비트 폭입니다. 키를 켤 색상은 Reg 2A18에 설정되어 있습니다.
?????로컬 알파는 색상 모드에 따라 다르게 작동합니다. 32bpp 및 8 비트 인덱싱의 경우 로컬 알파는 픽셀 당 256 단계 투명도이며 0은 투명하고 255는 단색입니다. 16bpp 모드 555 및 444의 경우, 사용되지 않은 비트는 0 인 솔리드 및 1 솔로가 단순한 투명 스위치로 작용합니다. 16 비트 565에 대한 로컬 알파 지원은 없습니다.
 
     Global alpha is a 256 step transparency that applies to the entire osd, with 0 being transparent & 255 being solid.
 ????전역 알파는 전체 osd에 적용되는 256 단계 투명도로 0은 투명하고 255는 단색입니다.
 
     It's possible to combine colour key, local alpha & global alpha.
?????컬러 키, 로컬 알파 및 글로벌 알파를 결합 할 수 있습니다.
--------------------------------------------------------------------------------
2A04
      bits 0:15
	osd x coord for left edge
 
      bits 16:31
	osd y coord for top edge
---------------
2A08
      bits 0:15
	osd x coord for right edge
 
      bits 16:31
	osd y coord for bottom edge
 
     For both registers, (0,0) = top left corner of the display area. These registers do not control the osd size, only where it's positioned & how much is visible. The visible osd area cannot exceed the right edge of the display, otherwise the osd will become corrupt. See reg 2A10 for setting osd width.
     두 레지스터 모두에 대해 (0,0) = 표시 영역의 왼쪽 위 모서리입니다. 이 레지스터는 osd 크기를 제어하지 않으며 위치 및 표시 정도 만 조절합니다. 보이는 osd 영역은 디스플레이의 오른쪽 끝을 초과 할 수 없습니다. 그렇지 않으면 osd가 손상됩니다. osd 너비 설정은 reg 2A10을 참조하십시오.
[참고] 디지털 방송 수신 장치의 ＯＳＤ 인터페이스{On Screen Display interface for digital broadcast receiving device}
본 발명은 디지털 방송 수신 장치에 관한 것으로, 더욱 상세하게는 디지털 TV나 셋탑 박스 등의 디지털 방송 수신 장치에서 OSD(On Screen Display) 데이터를 위한 인터페이스에 관한 것이다.
--------------------------------------------------------------------------------
2A0C
      bits 0:31
	osd buffer index
 
     An index into the osd buffer. Slowly incrementing this moves the osd left, wrapping around onto the right edge
--------------------------------------------------------------------------------
2A10
      bits 0:11
	osd buffer 32 bit word width
 
     Contains the width of the osd measured in 32 bit words. This means that all colour modes are restricted to a byte width which is divisible by 4.
--------------------------------------------------------------------------------
2A14
      bits 0:15
	osd height in pixels
 
      bits 16:32
	osd line index into buffer
	osd will start displaying from this line.
--------------------------------------------------------------------------------
2A18
      bits 0:31
	osd colour key
 
     Contains the colour value which will be transparent.
--------------------------------------------------------------------------------
2A1C
      bits 0:7
	osd global alpha
 
     Contains the global alpha value (equiv ivtvfbctl --alpha XX)
--------------------------------------------------------------------------------
2A20  --------    ?? unknown
 |
 V
2A2C  --------    ?? unknown
--------------------------------------------------------------------------------
2A30
      bits 0:7
	osd colour to change in indexed palette
---------------
2A34
      bits 0:31
	osd colour for indexed palette
 
     To set the new palette, first load the index of the colour to change into 2A30, then load the new colour into 2A34. The full palette is 256 colours, so the index range is 0x00-0xFF
     새 팔레트를 설정하려면 먼저 2A30으로 변경할 색상 색인을 로드 한 다음 2A34에 새 색상을 로드합니다. 전체 팔레트는 256 색이므로 색인 범위는 0x00-0xFF입니다.
--------------------------------------------------------------------------------
2A38  --------    ?? unknown
2A3C  --------    ?? unknown
--------------------------------------------------------------------------------
2A40
      bits 0:31
	osd ?? unknown
 
     Affects overall brightness, wrapping around to black
--------------------------------------------------------------------------------
2A44
      bits 0:31
	osd ?? unknown
 
     Green tint
--------------------------------------------------------------------------------
2A48
      bits 0:31
	osd ?? unknown
 
     Red tint
--------------------------------------------------------------------------------
2A4C
      bits 0:31
	osd ?? unknown
 
     Affects overall brightness, wrapping around to black
--------------------------------------------------------------------------------
2A50
      bits 0:31
	osd ?? unknown
 
     Colour shift
--------------------------------------------------------------------------------
2A54
      bits 0:31
	osd ?? unknown
 
     Colour shift
--------------------------------------------------------------------------------
2A58  --------    ?? unknown
 |
 V
2AFC  --------    ?? unknown
--------------------------------------------------------------------------------
2B00
      bit 0
	osd filter control
	  0 = filter off
	  1 = filter on
 
      bits 1:4
	osd ?? unknown
 
--------------------------------------------------------------------------------
 
v0.4 - 12 March 2007 - Ian Armstrong (ian@iarmst.demon.co.uk)

