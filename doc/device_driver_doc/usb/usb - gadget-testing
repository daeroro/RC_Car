This file summarizes information on basic testing of USB functions
provided by gadgets.

이 파일은 가젯에서 제공하는 USB function의 기본 테스트에 대한 정보를 요약합니다.
(이 파일이 중요한 것 같다. 디바이스 드라이버를 작성할 때 기존의 있는 함수를 활용하기도 한다)
(그런데 이 function들을 어떻게 쓰는 건지 모르겠다.)

1. ACM function
2. ECM function
3. ECM subset function
4. EEM function

5. FFS function
6. HID function
7. LOOPBACK function
8. MASS STORAGE function
9. MIDI function
10. NCM function
11. OBEX function
12. PHONET function
13. RNDIS function
14. SERIAL function
15. SOURCESINK function
16. UAC1 function
17. UAC2 function
18. UVC function
19. PRINTER function


1. ACM function
===============

The function is provided by usb_f_acm.ko module.

이 함수는 usb_f_acm.ko 모듈에 의해 제공됩니다.


Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "acm".

함수 디렉토리를 작성할 때 사용할 함수 이름은 "acm"입니다.
(함수 이름은 그 함수를 사용한 장치 이름)

The ACM function provides just one attribute in its function directory:

ACM 기능은 함수 디렉토리에 하나의 속성만 제공합니다:

	port_num

The attribute is read-only.

속성은 읽기 전용입니다.
(속성은 내가 수정할 수 없는 사항인 것 같다)

There can be at most 4 ACM/generic serial/OBEX ports in the system.

시스템에는 최대 4개의 ACM/일반 직렬/OBEX 포트가 있을 수 있습니다.


Testing the ACM function
------------------------
ACM 기능 테스트

On the host: cat > /dev/ttyACM<X>
On the device : cat /dev/ttyGS<Y>

then the other way round

그 다음에는 다른 경로

On the device: cat > /dev/ttyGS<Y>
On the host: cat /dev/ttyACM<X>


2. ECM function
===============

The function is provided by usb_f_ecm.ko module.

이 함수는 usb_f_ecm.ko 모듈에 의해 제공됩니다.


Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "ecm".
The ECM function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "ecm"입니다.
ECM 함수는 함수 디렉토리에 이러한 속성을 제공합니다:

	ifname		- network device interface name associated with this
			function instance
			- 이 함수 인스턴스와 연관된 네트워크 장치 인터페이스 이름
	qmult		- queue length multiplier for high and super speed
			- 고속 및 초고속을 위한 큐 길이 승수
	host_addr	- MAC address of host's end of this
			Ethernet over USB link
			- USB 링크를 통한 이 이더넷의 호스트 말단 MAC 주소
	dev_addr	- MAC address of device's end of this
			Ethernet over USB link
			- USB 링크를 통한 이 이더넷의 장치 끝 MAC 주소

and after creating the functions/ecm.<instance name> they contain default
values: qmult is 5, dev_addr and host_addr are randomly selected.
Except for ifname they can be written to until the function is linked to a
configuration. The ifname is read-only and contains the name of the interface
which was assigned by the net core, e. g. usb0.

/ecm.<instance name> 함수를 작성한 후 기본 값을 포함합니다: 
qmult는 5이고, dev_addr 및 host_addr은 무작위로 선택됩니다.
ifname을 제외하고는 함수가 구성(configuration)에 링크 될 때까지 쓸 수 있습니다.
ifname은 읽기 전용이며 net 코어에 의해 할당된 인터페이스의 이름을 포함합니다. (예. usb0)


Testing the ECM function
------------------------
ECM 기능 테스트

Configure IP addresses of the device and the host. Then:

장치 및 호스트의 IP 주소를 구성하십시오. 그때:

On the device: ping <host's IP>
On the host: ping <device's IP>


3. ECM subset function
======================

The function is provided by usb_f_ecm_subset.ko module.

이 함수는 usb_f_ecm_subset.ko 모듈에 의해 제공됩니다.


Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "geth".
The ECM subset function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "geth"입니다.
ECM 서브 세트 기능은 기능 디렉토리에서 이러한 속성을 제공합니다:

	ifname		- network device interface name associated with this
			function instance
			- 이 함수 인스턴스와 연관된 네트워크 장치 인터페이스 이름
	qmult		- queue length multiplier for high and super speed
			- 고속 및 초고속을위한 큐 길이 승수
	host_addr	- MAC address of host's end of this
			Ethernet over USB link
			- USB 링크를 통한이 이더넷의 호스트 말단 MAC 주소
	dev_addr	- MAC address of device's end of this
			Ethernet over USB link
			- USB 링크를 통한이 이더넷의 장치 끝 MAC 주소

and after creating the functions/ecm.<instance name> they contain default
values: qmult is 5, dev_addr and host_addr are randomly selected.
Except for ifname they can be written to until the function is linked to a
configuration. The ifname is read-only and contains the name of the interface
which was assigned by the net core, e. g. usb0.

functions/ecm. <instance name> 를 만든 후 기본 값을 포함합니다:
qmult가 5이면 dev_addr과 host_addr이 무작위로 선택됩니다.
ifname을 제외하고는 함수가 구성에 링크 될 때까지 쓸 수 있습니다.
ifname은 읽기 전용이며 net 코어에 의해 할당 된 인터페이스의 이름을 포함합니다. (예. usb0)


Testing the ECM subset function
-------------------------------
ECM 하위 집합 함수 테스트

Configure IP addresses of the device and the host. Then:
장치 및 호스트의 IP 주소를 구성하십시오. 그때:

On the device: ping <host's IP>
On the host: ping <device's IP>


4. EEM function
===============

The function is provided by usb_f_eem.ko module.

이 함수는 usb_f_eem.ko 모듈에 의해 제공됩니다.


Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "eem".
The EEM function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "eem"입니다.
EEM 함수는 함수 디렉토리에 이러한 속성을 제공합니다:

	ifname		- network device interface name associated with this
			function instance
			- 이 함수 인스턴스와 연관된 네트워크 장치 인터페이스 이름
	qmult		- queue length multiplier for high and super speed
			- 고속 및 초고속을 위한 큐 길이 승수
	host_addr	- MAC address of host's end of this
			Ethernet over USB link
			- USB 링크를 통한 이 이더넷의 호스트 말단 MAC 주소
	dev_addr	- MAC address of device's end of this
			Ethernet over USB link
			- USB 링크를 통한 이 이더넷의 장치 끝 MAC 주소

and after creating the functions/eem.<instance name> they contain default
values: qmult is 5, dev_addr and host_addr are randomly selected.
Except for ifname they can be written to until the function is linked to a
configuration. The ifname is read-only and contains the name of the interface
which was assigned by the net core, e. g. usb0.

functions/eem. <인스턴스 이름>을 만든 후에는 기본값을 포함합니다:
qmult가 5이면 dev_addr과 host_addr이 무작위로 선택됩니다.
ifname을 제외하고는 함수가 구성에 링크 될 때까지 쓸 수 있습니다.
ifname은 읽기 전용이며 net 코어에 의해 할당 된 인터페이스의 이름을 포함합니다. (예. usb0)


Testing the EEM function
------------------------
EEM 함수 테스트

Configure IP addresses of the device and the host. Then:

장치 및 호스트의 IP 주소를 구성하십시오. 그때:

On the device: ping <host's IP>
On the host: ping <device's IP>


5. FFS function
===============

The function is provided by usb_f_fs.ko module.

이 함수는 usb_f_fs.ko 모듈에 의해 제공됩니다.


Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "ffs".
The function directory is intentionally empty and not modifiable.

함수 디렉토리를 만들 때 사용할 함수 이름은 "ffs"입니다.
함수 디렉토리는 고의적으로 비어 있으며 수정할 수 없습니다.

After creating the directory there is a new instance (a "device") of FunctionFS
available in the system. Once a "device" is available, the user should follow
the standard procedure for using FunctionFS (mount it, run the userspace
process which implements the function proper). The gadget should be enabled
by writing a suitable string to usb_gadget/<gadget>/UDC.

디렉토리를 생성 한 후 FunctionFS의 새로운 인스턴스 ("장치")가 시스템에서 사용 가능합니다.
"장치"를 사용할 수 있게 되면 사용자는 FunctionFS를 사용하기위한 표준 절차를 따라야합니다. 
(마운트하고 적절한 기능을 구현하는 사용자 공간 프로세스를 실행하십시오)
가젯은 usb_gadget/<gadget>/UDC에 적합한 문자열을 작성하여 활성화 해야합니다.


Testing the FFS function
------------------------
FFS 함수 테스트

On the device: start the function's userspace daemon, enable the gadget
On the host: use the USB function provided by the device

on the device: function의 사용자 공간 데몬을 시작하고, 가젯을 활성화합니다.
on the host: 장치에서 제공하는 USB function 사용


6. HID function
===============

The function is provided by usb_f_hid.ko module.

이 함수는 usb_f_hid.ko 모듈에 의해 제공됩니다.


Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "hid".
The HID function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "hid"입니다.
HID 함수는 함수 디렉토리에 이러한 속성을 제공합니다:

	protocol	- HID protocol to use
			- 사용할 HID 프로토콜
	report_desc	- data to be used in HID reports, except data
			passed with /dev/hidg<X>
			- /dev/hidg<X>와 함께 전달 된 데이터를 제외하고 HID 보고서에 사용될 데이터
	report_length	- HID report length
			- HID 보고서 길이
	subclass	- HID subclass to use
			- 사용할 HID 서브 클래스

For a keyboard the protocol and the subclass are 1, the report_length is 8,
while the report_desc is:

키보드의 경우 프로토콜 및 하위 클래스는 1, report_length는 8, report_desc는 다음과 같습니다:

$ hd my_report_desc
00000000  05 01 09 06 a1 01 05 07  19 e0 29 e7 15 00 25 01  |..........)...%.|
00000010  75 01 95 08 81 02 95 01  75 08 81 03 95 05 75 01  |u.......u.....u.|
00000020  05 08 19 01 29 05 91 02  95 01 75 03 91 03 95 06  |....).....u.....|
00000030  75 08 15 00 25 65 05 07  19 00 29 65 81 00 c0     |u...%e....)e...|
0000003f

Such a sequence of bytes can be stored to the attribute with echo:

이러한 일련의 바이트는 echo와 함께 속성에 저장할 수 있습니다:

$ echo -ne \\x05\\x01\\x09\\x06\\xa1.....


Testing the HID function
------------------------
HID 기능 테스트

Device:
- create the gadget

- 가제트 만들기

- connect the gadget to a host, preferably not the one used
to control the gadget

- 가젯을 호스트에 연결하십시오. 가제트를 제어하는 데 사용하지 않는 것이 바람직합니다.

- run a program which writes to /dev/hidg<N>, e.g.
a userspace program found in Documentation/usb/gadget_hid.txt:

- /dev/hidg<N>에 쓰는 프로그램을 실행하십시오. Documentation/usb/gadget_hid.txt에있는 userspace 프로그램:

$ ./hid_gadget_test /dev/hidg0 keyboard

Host:
- observe the keystrokes from the gadget
- 가제트의 키 입력을 관찰한다.


7. LOOPBACK function
====================

The function is provided by usb_f_ss_lb.ko module.

이 함수는 usb_f_ss_lb.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "Loopback".
The LOOPBACK function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "Loopback"입니다.
LOOPBACK 함수는 함수 디렉토리에 이러한 속성을 제공합니다:

	qlen		- depth of loopback queue
			- 루프백 대기열의 깊이
	bulk_buflen	- buffer length
			- 버퍼 길이

Testing the LOOPBACK function
-----------------------------
LOOPBACK 함수 테스트

device: run the gadget
device: 가제트를 실행하십시오.
host: test-usb (tools/usb/testusb.c)


8. MASS STORAGE function
========================

The function is provided by usb_f_mass_storage.ko module.

이 함수는 usb_f_mass_storage.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "mass_storage".
The MASS STORAGE function provides these attributes in its directory:
files:

함수 디렉토리를 만들 때 사용할 함수 이름은 "mass_storage"입니다.
MASS STORAGE 함수는 디렉토리에 이러한 속성을 제공합니다:
파일:

	stall		- Set to permit function to halt bulk endpoints.
			Disabled on some USB devices known not to work
			correctly. You should set it to true.
			- function이 bulk endpoint를 중지하도록 설정하십시오. 
			제대로 작동하지 않는 것으로 알려진 일부 USB 장치에서는 비활성화되어 있습니다. 
			사실(true)로 설정해야합니다.
	num_buffers	- Number of pipeline buffers. Valid numbers
			are 2..4. Available only if
			CONFIG_USB_GADGET_DEBUG_FILES is set.
			- 파이프 라인 버퍼 수입니다. 유효한 수는 2~4입니다. 
			CONFIG_USB_GADGET_DEBUG_FILES가 설정된 경우에만 사용할 수 있습니다.

and a default lun.0 directory corresponding to SCSI LUN #0.

SCSI LUN #0에 해당하는 기본 lun.0 디렉토리가 있습니다.

A new lun can be added with mkdir:

mkdir을 사용하여 새 LUN을 추가 할 수 있습니다:

$ mkdir functions/mass_storage.0/partition.5

Lun numbering does not have to be continuous, except for lun #0 which is
created by default. A maximum of 8 luns can be specified and they all must be
named following the <name>.<number> scheme. The numbers can be 0..8.
Probably a good convention is to name the luns "lun.<number>",
although it is not mandatory.

Lun 번호 매김은 기본적으로 생성되는 lun #0을 제외하고 연속적일 필요는 없습니다.
최대 8 개의 LUN을 지정할 수 있으며 모두 <name>.<number> 체계에 따라 이름을 지정해야합니다.
숫자는 0~8이 될 수 있습니다. 
아마도 좋은 규칙은 luns의 이름을 "lun.<number>"라고 지정하는 것이지만 필수는 아닙니다.

In each lun directory there are the following attribute files:

각 lun 디렉토리에 다음 속성 파일이 있습니다:

	file		- The path to the backing file for the LUN.
			Required if LUN is not marked as removable.
			- LUN에 대한 백업 파일의 경로. 
			LUN이 이동식으로 표시되지 않은 경우 필요합니다.
	ro		- Flag specifying access to the LUN shall be
			read-only. This is implied if CD-ROM emulation
			is enabled as well as when it was impossible
			to open "filename" in R/W mode.
			- LUN에 대한 액세스를 지정하는 플래그는 읽기 전용이어야 합니다.
			이는 R/W 모드에서 "filename"을 열 수 없는 경우 뿐만 아니라 
			CD-ROM 에뮬레이션이 활성화 된 경우에 암시됩니다.
	removable	- Flag specifying that LUN shall be indicated as
			being removable.
			- LUN이 제거 가능으로 표시되도록 지정하는 플래그.
	cdrom		- Flag specifying that LUN shall be reported as
			being a CD-ROM.
			- LUN을 CD-ROM으로 보고하도록 지정하는 플래그.
	nofua		- Flag specifying that FUA flag
			in SCSI WRITE(10,12)
			- SCSI WRITE(10,12)에서 FUA 플래그를 지정하는 플래그.

Testing the MASS STORAGE function
---------------------------------
MASS STORAGE 기능 테스트

device: connect the gadget, enable it
host: dmesg, see the USB drives appear (if system configured to automatically
mount)

device: 가젯을 연결하고 사용하도록 설정합니다.
host: dmesg, USB 드라이브가 나타남 (시스템이 자동으로 마운트 되도록 구성된 경우)


9. MIDI function
================

The function is provided by usb_f_midi.ko module.

이 함수는 usb_f_midi.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "midi".
The MIDI function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "midi"입니다. 
MIDI 함수는 함수 디렉토리에 이러한 속성을 제공합니다:

	buflen		- MIDI buffer length
			- MIDI 버퍼 길이
	id		- ID string for the USB MIDI adapter
			- USB MIDI 어댑터의 ID 문자열
	in_ports	- number of MIDI input ports
			- MIDI 입력 포트 수
	index		- index value for the USB MIDI adapter
			- USB MIDI 어댑터의 index 값
	out_ports	- number of MIDI output ports
			- MIDI 출력 포트 수
	qlen		- USB read request queue length
			- USB 읽기 요청 대기열 길이

Testing the MIDI function
-------------------------
MIDI 기능 테스트

There are two cases: playing a mid from the gadget to
the host and playing a mid from the host to the gadget.

두 가지 경우가 있습니다. 가젯에서 호스트로 mid 재생하고 호스트에서 가제트로 mid 재생.

1) Playing a mid from the gadget to the host

1) 가제트를 호스트로 재생

host)

$ arecordmidi -l
 Port    Client name                      Port name
 14:0    Midi Through                     Midi Through Port-0
 24:0    MIDI Gadget                      MIDI Gadget MIDI 1
$ arecordmidi -p 24:0 from_gadget.mid

gadget)

$ aplaymidi -l
 Port    Client name                      Port name
 20:0    f_midi                           f_midi

$ aplaymidi -p 20:0 to_host.mid


2) Playing a mid from the host to the gadget

2) 호스트에서 가제트로 mid 플레이하기

gadget)

$ arecordmidi -l
 Port    Client name                      Port name
 20:0    f_midi                           f_midi

$ arecordmidi -p 20:0 from_host.mid

host)

$ aplaymidi -l
 Port    Client name                      Port name
 14:0    Midi Through                     Midi Through Port-0
 24:0    MIDI Gadget                      MIDI Gadget MIDI 1

$ aplaymidi -p24:0 to_gadget.mid

The from_gadget.mid should sound identical to the to_host.mid.
The from_host.id should sound identical to the to_gadget.mid.

from_gadget.mid는 to_host.mid와 동일하게 들립니다.
from_host.id는 to_gadget.mid와 동일하게 들립니다.

MIDI files can be played to speakers/headphones with e.g. timidity installed
MIDI 파일은 스피커/헤드폰으로 재생할 수 있습니다. timidity?가 설치되었습니다.

$ aplaymidi -l
 Port    Client name                      Port name
 14:0    Midi Through                     Midi Through Port-0
 24:0    MIDI Gadget                      MIDI Gadget MIDI 1
128:0    TiMidity                         TiMidity port 0
128:1    TiMidity                         TiMidity port 1
128:2    TiMidity                         TiMidity port 2
128:3    TiMidity                         TiMidity port 3

$ aplaymidi -p 128:0 file.mid

MIDI ports can be logically connected using the aconnect utility, e.g.:

MIDI 포트는 논리적으로 aconnect 유틸리티를 사용하여 연결할 수 있습니다:

$ aconnect 24:0 128:0 # try it on the host

After the gadget's MIDI port is connected to timidity's MIDI port,
whatever is played at the gadget side with aplaymidi -l is audible
in host's speakers/headphones.

가제트의 MIDI 포트가 timidity의 MIDI 포트에 연결되면 
가제트 쪽에서 재생되는 모든 것은 호스트의 스피커/헤드폰에서 들을 수 있습니다.


10. NCM function
================

The function is provided by usb_f_ncm.ko module.

이 함수는 usb_f_ncm.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "ncm".
The NCM function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "ncm"입니다. 
NCM 기능은 기능 디렉토리에서 이러한 속성을 제공합니다:

	ifname		- network device interface name associated with this
			function instance
			- 이 함수 인스턴스와 연관된 네트워크 장치 인터페이스 이름
	qmult		- queue length multiplier for high and super speed
			- 고속 및 초고속을 위한 큐 길이 승수
	host_addr	- MAC address of host's end of this
			Ethernet over USB link
			- USB 링크를 통한 이 이더넷의 호스트 말단 MAC 주소
	dev_addr	- MAC address of device's end of this
			Ethernet over USB link
			- USB 링크를 통한 이 이더넷의 장치 끝 MAC 주소

and after creating the functions/ncm.<instance name> they contain default
values: qmult is 5, dev_addr and host_addr are randomly selected.
Except for ifname they can be written to until the function is linked to a
configuration. The ifname is read-only and contains the name of the interface
which was assigned by the net core, e. g. usb0.

function/ncm.<instance name> 를 만든 후 기본 값을 포함합니다:
qmult가 5이면 dev_addr과 host_addr이 무작위로 선택됩니다.
ifname을 제외하고는 함수가 구성에 링크 될 때까지 쓸 수 있습니다.
ifname은 읽기 전용이며 net 코어에 의해 할당된 인터페이스의 이름을 포함합니다. (예. usb0)


Testing the NCM function
------------------------
NCM 기능 테스트

Configure IP addresses of the device and the host. Then:

장치 및 호스트의 IP 주소를 구성하십시오. 그때:

On the device: ping <host's IP>
On the host: ping <device's IP>


11. OBEX function
=================

The function is provided by usb_f_obex.ko module.

이 함수는 usb_f_obex.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "obex".
The OBEX function provides just one attribute in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "obex"입니다. 
OBEX 함수는 함수 디렉토리에 하나의 속성만 제공합니다:

	port_num

The attribute is read-only.

속성은 읽기 전용입니다.

There can be at most 4 ACM/generic serial/OBEX ports in the system.

시스템에는 최대 4 개의 ACM/일반 직렬/OBEX 포트가있을 수 있습니다. (포트가 각각 4개씩?)


Testing the OBEX function
-------------------------
OBEX 함수 테스트

On device: seriald -f /dev/ttyGS<Y> -s 1024
On host: serialc -v <vendorID> -p <productID> -i<interface#> -a1 -s1024 \
             -t<out endpoint addr> -r<in endpoint addr>

where seriald and serialc are Felipe's utilities found here:

여기서 seriald와 serialc는 Felipe의 유틸리티입니다:

https://git.gitorious.org/usb/usb-tools.git master


12. PHONET function
===================

The function is provided by usb_f_phonet.ko module.

이 함수는 usb_f_phonet.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "phonet".
The PHONET function provides just one attribute in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "phonet"입니다. 
PHONET 함수는 함수 디렉토리에 하나의 속성만을 제공합니다:

	ifname		- network device interface name associated with this
			function instance
			- 이 함수 인스턴스와 연관된 네트워크 장치 인터페이스 이름

Testing the PHONET function
---------------------------
PHONET 기능 테스트하기

It is not possible to test the SOCK_STREAM protocol without a specific piece
of hardware, so only SOCK_DGRAM has been tested. For the latter to work,
in the past I had to apply the patch mentioned here:

특정 하드웨어없이 SOCK_STREAM 프로토콜을 테스트 할 수 없으므로 SOCK_DGRAM 만 테스트되었습니다. 
후자가 작동하려면 과거에 여기에 언급 된 패치를 적용해야했습니다:

http://www.spinics.net/lists/linux-usb/msg85689.html

These tools are required:

다음 도구가 필요합니다:

git://git.gitorious.org/meego-cellular/phonet-utils.git

On the host:

$ ./phonet -a 0x10 -i usbpn0
$ ./pnroute add 0x6c usbpn0
$./pnroute add 0x10 usbpn0
$ ifconfig usbpn0 up

On the device:

$ ./phonet -a 0x6c -i upnlink0
$ ./pnroute add 0x10 upnlink0
$ ifconfig upnlink0 up

Then a test program can be used:

그런 다음 테스트 프로그램을 사용할 수 있습니다:

http://www.spinics.net/lists/linux-usb/msg85690.html

On the device:

$ ./pnxmit -a 0x6c -r

On the host:

$ ./pnxmit -a 0x10 -s 0x6c

As a result some data should be sent from host to device.
Then the other way round:

결과적으로 일부 데이터는 호스트에서 장치로 보내야 합니다. 
다음 다른 방법 라운드? :

On the host:

$ ./pnxmit -a 0x10 -r

On the device:

$ ./pnxmit -a 0x6c -s 0x10


13. RNDIS function
==================

The function is provided by usb_f_rndis.ko module.

이 함수는 usb_f_rndis.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "rndis".
The RNDIS function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "rndis"입니다. 
RNDIS 함수는 함수 디렉토리에 이러한 속성을 제공합니다:

	ifname		- network device interface name associated with this
			function instance
			- 이 함수 인스턴스와 연관된 네트워크 장치 인터페이스 이름
	qmult		- queue length multiplier for high and super speed
			- 고속 및 초고속을위한 큐 길이 승수
	host_addr	- MAC address of host's end of this
			Ethernet over USB link
			- USB 링크를 통한 이 이더넷의 호스트 말단 MAC 주소
	dev_addr	- MAC address of device's end of this
			Ethernet over USB link
			- USB 링크를 통한 이 이더넷의 장치 끝 MAC 주소

and after creating the functions/rndis.<instance name> they contain default
values: qmult is 5, dev_addr and host_addr are randomly selected.
Except for ifname they can be written to until the function is linked to a
configuration. The ifname is read-only and contains the name of the interface
which was assigned by the net core, e. g. usb0.

functions/rndis.<instance name> 를 작성한 후 기본 값을 포함합니다:
qmult가 5이면 dev_addr과 host_addr이 무작위로 선택됩니다.
ifname을 제외하고는 함수가 구성에 링크 될 때까지 쓸 수 있습니다. 
ifname은 읽기 전용이며 net 코어에 의해 할당된 인터페이스의 이름을 포함합니다. (예. usb0)

Testing the RNDIS function
--------------------------
RNDIS 기능 테스트

Configure IP addresses of the device and the host. Then:

장치 및 호스트의 IP 주소를 구성하십시오. 그때:

On the device: ping <host's IP>
On the host: ping <device's IP>


14. SERIAL function
===================

The function is provided by usb_f_gser.ko module.

이 함수는 usb_f_gser.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "gser".
The SERIAL function provides just one attribute in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "gser"입니다.
SERIAL 함수는 함수 디렉토리에 하나의 속성 만 제공합니다:

	port_num

The attribute is read-only.

속성은 읽기 전용입니다.

There can be at most 4 ACM/generic serial/OBEX ports in the system.

시스템에는 최대 4 개의 ACM/일반 직렬/OBEX 포트가있을 수 있습니다.

Testing the SERIAL function
---------------------------
SERIAL 함수 테스트

On host: insmod usbserial
	 echo VID PID >/sys/bus/usb-serial/drivers/generic/new_id
On host: cat > /dev/ttyUSB<X>
On target: cat /dev/ttyGS<Y>

then the other way round

그 다음에는 다른 방법

On target: cat > /dev/ttyGS<Y>
On host: cat /dev/ttyUSB<X>


15. SOURCESINK function
=======================

The function is provided by usb_f_ss_lb.ko module.

이 함수는 usb_f_ss_lb.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "SourceSink".
The SOURCESINK function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "SourceSink"입니다.
SOURCESINK 함수는 함수 디렉토리에 이러한 속성을 제공합니다:

	pattern		- 0 (all zeros), 1 (mod63), 2 (none)
	isoc_interval	- 1..16
	isoc_maxpacket	- 0 - 1023 (fs), 0 - 1024 (hs/ss)
	isoc_mult	- 0..2 (hs/ss only)
	isoc_maxburst	- 0..15 (ss only)
	bulk_buflen	- buffer length

Testing the SOURCESINK function
-------------------------------
SOURCESINK 기능 테스트

device: run the gadget
device: 가제트를 실행하십시오.
host: test-usb (tools/usb/testusb.c)


16. UAC1 function
=================

The function is provided by usb_f_uac1.ko module.

이 함수는 usb_f_uac1.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "uac1".
The uac1 function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "uac1"입니다.
uac1 함수는 함수 디렉토리에 이러한 속성을 제공합니다

	audio_buf_size - audio buffer size
		       - 오디오 버퍼 크기
	fn_cap - capture pcm device file name
	       - 캡처 장치 파일 이름
	fn_cntl - control device file name
		- 제어 장치 파일 이름
	fn_play - playback pcm device file name
		- 재생 장치 파일 이름
	req_buf_size - ISO OUT endpoint request buffer size
		     - ISO OUT 끝점 요청 버퍼 크기
	req_count - ISO OUT endpoint request count
		  - ISO OUT 끝점 요청 수

The attributes have sane default values.

속성에는 정상적인 기본값이 있습니다.

Testing the UAC1 function
-------------------------
UAC1 기능 테스트

device: run the gadget
device: 가제트를 실행하십시오.
host: aplay -l # should list our USB Audio Gadget
host: aplay -l #은 USB 오디오 장치를 나열해야합니다.


17. UAC2 function
=================

The function is provided by usb_f_uac2.ko module.

이 함수는 usb_f_uac2.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "uac2".
The uac2 function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "uac2"입니다.
uac2 함수는 함수 디렉토리에 이러한 속성을 제공합니다:

	c_chmask - capture channel mask
		 - 채널 마스크 캡처
	c_srate - capture sampling rate
		- 샘플링 속도 캡처
	c_ssize - capture sample size (bytes)
		- 샘플 크기 (바이트) 캡처
	p_chmask - playback channel mask
		 - 재생 채널 마스크
	p_srate - playback sampling rate
		- 재생 샘플링 속도
	p_ssize - playback sample size (bytes)
		- 재생 샘플 크기 (바이트)

The attributes have sane default values.

속성에는 정상적인 기본값이 있습니다.

Testing the UAC2 function
-------------------------
UAC2 기능 테스트

device: run the gadget
device: 가제트를 실행하십시오.
host: aplay -l # should list our USB Audio Gadget
host: aplay -l #은 USB 오디오 장치를 나열해야합니다.

This function does not require real hardware support, it just
sends a stream of audio data to/from the host. In order to
actually hear something at the device side, a command similar
to this must be used at the device side:

이 기능은 실제 하드웨어 지원을 필요로하지 않으며 단지 오디오 데이터 스트림을 호스트로/로부터 전송합니다.
장치 측에서 실제로 무언가를 듣기 위해서는 다음과 같은 명령을 장치 측에서 사용해야합니다:

$ arecord -f dat -t wav -D hw:2,0 | aplay -D hw:0,0 &

e.g.:
예:

$ arecord -f dat -t wav -D hw:CARD=UAC2Gadget,DEV=0 | \
aplay -D default:CARD=OdroidU3


18. UVC function
================

The function is provided by usb_f_uvc.ko module.

이 함수는 usb_f_uvc.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "uvc".
The uvc function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "uvc"입니다.
uvc 함수는 함수 디렉토리에 다음 속성을 제공합니다:

	streaming_interval - interval for polling endpoint for data transfers
			   - 데이터 전송을위한 폴링 엔드 포인트의 간격
	streaming_maxburst - bMaxBurst for super speed companion descriptor
			   - 초고속 컴패니언 설명자용 bMaxBurst
	streaming_maxpacket - maximum packet size this endpoint is capable of
			      sending or receiving when this configuration is
			      selected
			    - 이 구성을 선택하면 이 endpoint에서 보내거나 받을 수 있는 최대 패킷 크기

There are also "control" and "streaming" subdirectories, each of which contain
a number of their subdirectories. There are some sane defaults provided, but
the user must provide the following:

또한 "제어"및 "스트리밍"하위 디렉토리가 있으며 각 하위 디렉토리에는 여러 하위 디렉토리가 있습니다.
일부 정상적인 기본값이 제공되지만 사용자는 다음을 제공해야합니다:

	control header - create in control/header, link from control/class/fs
			and/or control/class/ss
		       - 컨트롤/헤더에서 생성, control/class/fs and/or control/class/ss의 링크
	streaming header - create in streaming/header, link from
			streaming/class/fs and/or streaming/class/hs and/or
			streaming/class/ss
			 - 스트리밍/헤더에서 생성, 스트리밍/클래스/fs and/or 스트리밍/클래스/hs and/or 스트리밍/클래스/
	format description - create in streaming/mjpeg and/or
			streaming/uncompressed
			   - 스트리밍/mjpeg and/or 스트리밍/비 압축으로 생성
	frame description - create in streaming/mjpeg/<format> and/or in
			streaming/uncompressed/<format>
			  - 스트리밍/mjpeg/<format> and/or 스트리밍/비 압축/<format>

Each frame description contains frame interval specification, and each
such specification consists of a number of lines with an inverval value
in each line. The rules stated above are best illustrated with an example:

각 프레임 설명에는 프레임 간격 지정이 포함되어 있으며 이러한 각 사양은 각 행에 간격 값이 있는 여러 행으로 구성됩니다.
위에서 언급 한 규칙은 예제를 통해 가장 잘 설명됩니다.

# mkdir functions/uvc.usb0/control/header/h
# cd functions/uvc.usb0/control/header/h
# ln -s header/h class/fs
# ln -s header/h class/ss
# mkdir -p functions/uvc.usb0/streaming/uncompressed/u/360p
# cat <<EOF > functions/uvc.usb0/streaming/uncompressed/u/360p/dwFrameInterval
666666
1000000
5000000
EOF
# cd $GADGET_CONFIGFS_ROOT
# mkdir functions/uvc.usb0/streaming/header/h
# cd functions/uvc.usb0/streaming/header/h
# ln -s ../../uncompressed/u
# cd ../../class/fs
# ln -s ../../header/h
# cd ../../class/hs
# ln -s ../../header/h
# cd ../../class/ss
# ln -s ../../header/h


Testing the UVC function
------------------------
UVC 기능 테스트

device: run the gadget, modprobe vivid
device: 가제트, modprobe vivid를 실행

# uvc-gadget -u /dev/video<uvc video node #> -v /dev/video<vivid video node #>

where uvc-gadget is this program:
http://git.ideasonboard.org/uvc-gadget.git

with these patches:
http://www.spinics.net/lists/linux-usb/msg99220.html

host: luvcview -f yuv


19. PRINTER function
====================

The function is provided by usb_f_printer.ko module.

이 함수는 usb_f_printer.ko 모듈에 의해 제공됩니다.

Function-specific configfs interface
------------------------------------
기능별 configfs 인터페이스

The function name to use when creating the function directory is "printer".
The printer function provides these attributes in its function directory:

함수 디렉토리를 만들 때 사용할 함수 이름은 "printer"입니다.
프린터 기능은 함수 디렉토리에 다음 속성을 제공합니다:

	pnp_string	- Data to be passed to the host in pnp string
			- pnp 문자열로 호스트에 전달할 데이터
	q_len		- Number of requests per endpoint
			- endpoint 당 요청 수

Testing the PRINTER function
----------------------------
PRINTER 함수 테스트

The most basic testing:
가장 기본적인 테스트:

device: run the gadget
device: 가제트를 실행
# ls -l /devices/virtual/usb_printer_gadget/

should show g_printer<number>.
g_printer<number>가 표시되어야 합니다.

If udev is active, then /dev/g_printer<number> should appear automatically.

udev가 활성화되어 있으면 /dev/g_printer<number>가 자동으로 나타납니다.

host:

If udev is active, then e.g. /dev/usb/lp0 should appear.

udev가 활성화 된 경우 예를 들어 /dev/usb/lp0가 나타나야 합니다.

host->device transmission:

device:
# cat /dev/g_printer<number>
host:
# cat > /dev/usb/lp0

device->host transmission:

# cat > /dev/g_printer<number>
host:
# cat /dev/usb/lp0

More advanced testing can be done with the prn_example
described in Documentation/usb/gadget-printer.txt.

더 자세한 테스트는 Documentation/usb/gadget-printer.txt에 설명된 prn 예제를 사용하여 수행할 수 있습니다.
