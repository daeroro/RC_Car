CPU Scheduler implementation hints for architecture specific code

아키텍처 특정 코드에 대한 CPU 스케줄러 구현 힌트

	Nick Piggin, 2005

Context switch
==============
1. Runqueue locking
By default, the switch_to arch function is called with the runqueue
locked. This is usually not a problem unless switch_to may need to
take the runqueue lock. This is usually due to a wake up operation in
the context switch. See arch/ia64/include/asm/switch_to.h for an example.

1. 런큐 잠금
기본적으로 switch_to arch 함수는 실행 대기열을 잠그고 호출됩니다. 
switch_to가 runqueue lock을 취해야하는 경우가 아니면 일반적으로 문제가되지 않습니다. 
이는 일반적으로 컨텍스트 스위치에서 웨이크 업 작업으로 인해 발생합니다. 
예제는 arch / ia64 / include / asm / switch_to.h를 참조하십시오.

To request the scheduler call switch_to with the runqueue unlocked,
you must `#define __ARCH_WANT_UNLOCKED_CTXSW` in a header file
(typically the one where switch_to is defined).

runqueue를 잠그지 않은 상태에서 scheduler 호출을 switch_to에 요청하려면 헤더 파일 
(일반적으로 switch_to가 정의 된 파일)에`#define __ARCH_WANT_UNLOCKED_CTXSW`를 사용해야합니다.

Unlocked context switches introduce only a very minor performance
penalty to the core scheduler implementation in the CONFIG_SMP case.

잠금 해제 된 컨텍스트 스위치는 CONFIG_SMP의 경우 핵심 스케줄러 구현에 아주 작은 성능 저하를 가져옵니다.

CPU idle

CPU 유휴 상태
========
Your cpu_idle routines need to obey the following rules:

cpu_idle 루틴은 다음 규칙을 따라야합니다. :

1. Preempt should now disabled over idle routines. Should only
   be enabled to call schedule() then disabled again.

1. 선매는 유휴 루틴을 통해 비활성화되어야합니다. schedule () 호출 만 활성화 한 다음 다시 비활성화해야합니다.

2. need_resched/TIF_NEED_RESCHED is only ever set, and will never
   be cleared until the running task has called schedule(). Idle
   threads need only ever query need_resched, and may never set or
   clear it.

2. need_resched / TIF_NEED_RESCHED는 실행 중의 태스크가 schedule ()를 호출 할 때까지 결코 설정되지 않고 클리어되지 않습니다. 
   유휴 스레드는 need_resched라는 쿼리 만 필요하며, 설정하거나 지울 수 없습니다.

3. When cpu_idle finds (need_resched() == 'true'), it should call
   schedule(). It should not call schedule() otherwise.

3. cpu_idle이 (need_resched () == 'true') 발견하면 schedule ()을 호출해야합니다. 
   그렇지 않으면 schedule ()을 호출해서는 안됩니다.

4. The only time interrupts need to be disabled when checking
   need_resched is if we are about to sleep the processor until
   the next interrupt (this doesn't provide any protection of
   need_resched, it prevents losing an interrupt).

4. need_resched를 검사 할 때 인터럽트를 비활성화해야하는 유일한 경우는 다음 인터럽트가 발생할 때까지 
   프로세서를 잠자기 상태로 설정하는 것입니다 (이는 need_resched를 전혀 제공하지 않으므로 인터럽트를 방지합니다).

	4a. Common problem with this type of sleep appears to be:

	4a. 이 유형의 수면과 관련된 일반적인 문제는 다음과 같습니다.

	        local_irq_disable();
	        if (!need_resched()) {
	                local_irq_enable();
	                *** resched interrupt arrives here ***
	                __asm__("sleep until next interrupt");
	        }

5. TIF_POLLING_NRFLAG can be set by idle routines that do not
   need an interrupt to wake them up when need_resched goes high.
   In other words, they must be periodically polling need_resched,
   although it may be reasonable to do some background work or enter
   a low CPU priority.

5. TIF_POLLING_NRFLAG는 need_resched가 하이가 될 때 인터럽트를 필요로하지 않는 유휴 루틴에 의해 설정 될 수 있습니다. 
   다시 말해, 백그라운드 작업을 수행하거나 낮은 CPU 우선 순위를 입력하는 것이 합리적 일지라도 정기적으로 need_resched를 폴링해야합니다.

   	5a. If TIF_POLLING_NRFLAG is set, and we do decide to enter
	    an interrupt sleep, it needs to be cleared then a memory
	    barrier issued (followed by a test of need_resched with
	    interrupts disabled, as explained in 3).

	5a. TIF_POLLING_NRFLAG가 설정되어 있고 인터럽트 절전 모드로 들어가기로 결정한 경우에는 
	    메모리 장벽을 해제 한 다음 (3에서 설명한대로 인터럽트를 사용하지 않도록 설정 한 need_resched 테스트가 뒤따라야 함) 필요합니다.

arch/x86/kernel/process.c has examples of both polling and
sleeping idle functions.

arch / x86 / kernel / process.c에는 폴링 및 휴면 유휴 기능의 예제가 있습니다.


Possible arch/ problems

가능한 아치 / 문제
=======================

Possible arch problems I found (and either tried to fix or didn't):

ia64 - is safe_halt call racy vs interrupts? (does it sleep?) (See #4a)

sh64 - Is sleeping racy vs interrupts? (See #4a)

sparc - IRQs on at this point(?), change local_irq_save to _disable.
      - TODO: needs secondary CPUs to disable preempt (See #1)

가능한 아치 문제를 발견했으나 해결하지 못했거나 시도하지 못했습니다.

ia64 - safe_halt 통화 대 레이팅과 인터럽트는 무엇입니까? (잠을 자나요?) (# 4a 참조)

sh64 - 레이스와 인터럽트를 자고 있습니까? (# 4a 참조)

sparc - 이 시점에서 IRQ가 켜지면 (?), local_irq_save를 _disable로 변경하십시오.
      - TODO : 선점 사용을 중지하려면 보조 CPU가 필요합니다 (# 1 참조).

