PLIP: The Parallel Line Internet Protocol Device
PLIP : 병렬 선 인터넷 프로토콜 장치

Donald Becker (becker@super.org)
I.D.A. Supercomputing Research Center, Bowie MD 20715

At some point T. Thorn will probably contribute text,
Tommy Thorn (tthorn@daimi.aau.dk)

PLIP Introduction
-----------------

This document describes the parallel port packet pusher for Net/LGX.
This device interface allows a point-to-point connection between two
parallel ports to appear as a IP network interface.
이 문서에서는 Net / LGX 용 병렬 포트 패킷 푸셔에 대해 설명합니다.
이 장치 인터페이스를 통해 두 개의 병렬 포트 간 지점 간 연결을 IP 네트워크 인터페이스로 나타낼 수 있습니다.

What is PLIP?
=============

PLIP is Parallel Line IP, that is, the transportation of IP packages
over a parallel port. In the case of a PC, the obvious choice is the
printer port.  PLIP is a non-standard, but [can use] uses the standard
LapLink null-printer cable [can also work in turbo mode, with a PLIP
cable]. [The protocol used to pack IP packages, is a simple one
initiated by Crynwr.
PLIP는 병렬 라인 IP, 즉 병렬 포트를 통한 IP 패키지의 전송입니다. PC의 경우 확실한 선택은 프린터 포트입니다. PLIP는 비표준이지만 표준 LapLink null-printer 케이블 [PLIP 케이블로 터보 모드에서도 작동 할 수 있습니다]를 사용합니다. [IP 패키지를 패키징하는 데 사용되는 프로토콜은 Crynwr이 시작한 간단한 프로토콜입니다.]

Advantages of PLIP
==================

It's cheap, it's available everywhere, and it's easy.
저렴하고 모든 곳에서 사용할 수 있으며 쉽습니다.

The PLIP cable is all that's needed to connect two Linux boxes, and it
can be built for very few bucks.
PLIP 케이블은 두 개의 리눅스 박스를 연결하는 데 필요한 모든 것이고 아주 적은 돈으로 구축 할 수 있습니다.

Connecting two Linux boxes takes only a second's decision and a few
minutes' work, no need to search for a [supported] netcard. This might
even be especially important in the case of notebooks, where netcards
are not easily available.
두 개의 리눅스 박스를 연결하는 데는 단 1 초 밖에 걸리지 않으며 몇 분이 걸리는 [supported] 네트 카드를 검색 할 필요가 없습니다. 넷 카드를 쉽게 구할 수없는 노트북의 경우 특히 그렇습니다.

Not requiring a netcard also means that apart from connecting the
cables, everything else is software configuration [which in principle
could be made very easy.]
넷 카드가 필요 없다는 것은 케이블을 연결하는 것 외에 다른 모든 것들은 소프트웨어 구성 [원칙적으로 매우 쉽게 만들 수 있음]을 의미합니다.

Disadvantages of PLIP
=====================

Doesn't work over a modem, like SLIP and PPP. Limited range, 15 m.
Can only be used to connect three (?) Linux boxes. Doesn't connect to
an existing Ethernet. Isn't standard (not even de facto standard, like
SLIP).
SLIP 및 PPP와 같은 모뎀에서는 작동하지 않습니다. 제한된 범위, 15m. 세 개의 (?) 리눅스 박스를 연결하는 데에만 사용할 수 있습니다. 기존 이더넷에 연결하지 않습니다. 표준이 아닙니다 (SLIP와 같은 사실상 표준조차도 아닙니다).

Performance
===========

PLIP easily outperforms Ethernet cards....(ups, I was dreaming, but
it *is* getting late. EOB)
PLIP는 이더넷 카드보다 성능이 뛰어납니다 .... (업, 꿈을 꾸었지만 늦었습니다.)

PLIP driver details
-------------------

The Linux PLIP driver is an implementation of the original Crynwr protocol,
that uses the parallel port subsystem of the kernel in order to properly
share parallel ports between PLIP and other services.
Linux PLIP 드라이버는 PLIP와 다른 서비스 간의 병렬 포트를 적절하게 공유하기 위해 커널의 parallel port subsystem을 사용하는 원래의 Crynwr 프로토콜을 구현 한 것입니다.

IRQs and trigger timeouts
=========================

When a parallel port used for a PLIP driver has an IRQ configured to it, the
PLIP driver is signaled whenever data is sent to it via the cable, such that
when no data is available, the driver isn't being used.
PLIP 드라이버에 사용 된 병렬 포트에 IRQ가 구성된 경우 PLIP 드라이버는 케이블을 통해 데이터가 전송 될 때마다 신호를 보내 데이터를 사용할 수 없으면 드라이버가 사용되지 않도록합니다.

However, on some machines it is hard, if not impossible, to configure an IRQ
to a certain parallel port, mainly because it is used by some other device.
On these machines, the PLIP driver can be used in IRQ-less mode, where
the PLIP driver would constantly poll the parallel port for data waiting,
and if such data is available, process it. This mode is less efficient than
the IRQ mode, because the driver has to check the parallel port many times
per second, even when no data at all is sent. Some rough measurements
indicate that there isn't a noticeable performance drop when using IRQ-less
mode as compared to IRQ mode as far as the data transfer speed is involved.
There is a performance drop on the machine hosting the driver.
그러나 일부 컴퓨터에서는 IRQ를 특정 병렬 포트에 구성하는 것이 불가능하지는 않더라도 어렵습니다. 주로 다른 장치에서 사용되기 때문입니다.
이 머신에서 PLIP 드라이버는 IRQ-less 모드로 사용할 수 있습니다. PLIP 드라이버는 데이터 대기를 위해 지속적으로 병렬 포트를 poll하고, 그러한 데이터가 사용 가능한 경우 이를 처리합니다.
이 모드는 IRQ 모드보다 비효율적인데, 그 이유는 드라이버가 전혀 데이터가 전송되지 않더라도 초당 여러 번 병렬 포트를 점검해야하기 때문입니다.
대략적인 측정은 데이터 전송 속도가 관련되어있는 한 IRQ 모드와 IRQ없는 모드를 비교하여 사용할 때 눈에 띄는 성능 저하가 없음을 나타냅니다.
드라이버를 호스팅하는 시스템의 성능이 저하됩니다.

When the PLIP driver is used in IRQ mode, the timeout used for triggering a
data transfer (the maximal time the PLIP driver would allow the other side
before announcing a timeout, when trying to handshake a transfer of some
data) is, by default, 500usec. As IRQ delivery is more or less immediate,
this timeout is quite sufficient. 
PLIP 드라이버가 IRQ 모드에서 사용될 때 데이터 전송을 트리거하는 데 사용되는 시간 제한 (일부 데이터의 전송을 핸드 셰이크하려고 시도 할 때 PLIP 드라이버가 다른 쪽에서 시간 제한을 알리는 최대 시간)은 기본적으로 500usec입니다 . IRQ 전달이 어느 정도 즉각적이기 때문에 제한 시간은 충분합니다.

When in IRQ-less mode, the PLIP driver polls the parallel port HZ times
per second (where HZ is typically 100 on most platforms, and 1024 on an
Alpha, as of this writing). Between two such polls, there are 10^6/HZ usecs.
On an i386, for example, 10^6/100 = 10000usec. It is easy to see that it is
quite possible for the trigger timeout to expire between two such polls, as
the timeout is only 500usec long. As a result, it is required to change the
trigger timeout on the *other* side of a PLIP connection, to about
10^6/HZ usecs. If both sides of a PLIP connection are used in IRQ-less mode,
this timeout is required on both sides.
IRQ-less 모드 일 때, PLIP 드라이버는 병렬 포트를 초당 HZ 회 (HZ는 대부분의 플랫폼에서 보통 100이고 Alpha에서는 1024)를 polls합니다. 두 가지 설문 조사 사이에는 10 ^ 6 / HZ 사용법이 있습니다. 두 가지 설문 조사 사이에는 10 ^ 6 / HZ 사용법이 있습니다. 예를 들어 i386에서는 10 ^ 6 / 100 = 10000usec입니다.
타임 아웃이 500usec에 불과하기 때문에 두 개의 polls 사이에서 트리거 타임 아웃이 만료 될 수 있음을 쉽게 알 수 있습니다. 결과적으로, PLIP 연결의 * other * 쪽에서 트리거 시간 초과를 약 10 ^ 6 / HZ usecs로 변경해야합니다. PLIP 연결의 양측이 IRQ-less 모드에서 사용되면이 시간 초과가 양쪽에서 필요합니다.

It appears that in practice, the trigger timeout can be shorter than in the
above calculation. It isn't an important issue, unless the wire is faulty,
in which case a long timeout would stall the machine when, for whatever
reason, bits are dropped.
실제로 트리거 타임 아웃은 위의 계산보다 짧을 수 있습니다. 와이어가 고장난 경우를 제외하고는 중요한 문제는 아닙니다. 어떠한 이유로 든 비트가 떨어지면 긴 타임 아웃으로 인해 기계가 멈추게됩니다.

A utility that can perform this change in Linux is plipconfig, which is part
of the net-tools package (its location can be found in the
Documentation/Changes file). An example command would be
'plipconfig plipX trigger 10000', where plipX is the appropriate
PLIP device.
Linux에서이 변경을 수행 할 수있는 유틸리티는 plipconfig이며 net-tools 패키지의 일부입니다 (위치는 Documentation / Changes 파일에서 찾을 수 있음). 예제 명령은 'plipconfig plipX trigger 10000'입니다. plipX는 적절한 PLIP 장치입니다.

PLIP hardware interconnection
-----------------------------

PLIP uses several different data transfer methods.  The first (and the
only one implemented in the early version of the code) uses a standard
printer "null" cable to transfer data four bits at a time using
data bit outputs connected to status bit inputs.
PLIP는 몇 가지 다른 데이터 전송 방법을 사용합니다. 첫 번째 (그리고 코드의 초기 버전에서 구현 된 유일한 것)는 상태 비트 입력에 연결된 데이터 비트 출력을 사용하여 한 번에 4 비트 씩 데이터를 전송하는 표준 프린터 "널 (null)"케이블을 사용합니다.

The second data transfer method relies on both machines having
bi-directional parallel ports, rather than output-only ``printer''
ports.  This allows byte-wide transfers and avoids reconstructing
nibbles into bytes, leading to much faster transfers.
두 번째 데이터 전송 방법은 출력 전용 "printer"포트가 아닌 양방향 병렬 포트를 사용하는 두 시스템에 의존합니다. 이를 통해 바이트 단위 전송이 가능하며 바이트 단위로 nibbles을 재구성하지 않아도되므로 훨씬 빠른 전송이 가능합니다.

Parallel Transfer Mode 0 Cable
==============================

The cable for the first transfer mode is a standard
printer "null" cable which transfers data four bits at a time using
data bit outputs of the first port (machine T) connected to the
status bit inputs of the second port (machine R).  There are five
status inputs, and they are used as four data inputs and a clock (data
strobe) input, arranged so that the data input bits appear as contiguous
bits with standard status register implementation.
첫 번째 전송 모드 용 케이블은 두 번째 포트 (머신 R)의 상태 비트 입력에 연결된 첫 번째 포트 (머신 T)의 데이터 비트 출력을 사용하여 한 번에 4 비트 씩 데이터를 전송하는 표준 프린터 "널 (null)"케이블입니다. 5 개의 상태 입력이 있고 그들은 4 개의 데이터 입력 및 클럭 (데이터 스트로브) 입력으로 사용되어 데이터 입력 비트가 표준 상태 레지스터의 구현 연속 비트로 나타나도록 배치되어 있습니다.

A cable that implements this protocol is available commercially as a
"Null Printer" or "Turbo Laplink" cable.  It can be constructed with
two DB-25 male connectors symmetrically connected as follows:
이 프로토콜을 구현하는 케이블은 "Null Printer"또는 "Turbo Laplink"케이블로 상업적으로 사용할 수 있습니다. 다음과 같이 대칭으로 연결된 두 개의 DB-25 수 커넥터를 사용하여 구성 할 수 있습니다.

    STROBE output	1*
    D0->ERROR	2 - 15		15 - 2
    D1->SLCT	3 - 13		13 - 3
    D2->PAPOUT	4 - 12		12 - 4
    D3->ACK	5 - 10		10 - 5
    D4->BUSY	6 - 11		11 - 6
    D5,D6,D7 are   7*, 8*, 9*
    AUTOFD output 14*
    INIT   output 16*
    SLCTIN	17 - 17
    extra grounds are 18*,19*,20*,21*,22*,23*,24*
    GROUND	25 - 25
* Do not connect these pins on either end
* 양쪽 끝에이 핀들을 연결하지 마십시오.

If the cable you are using has a metallic shield it should be
connected to the metallic DB-25 shell at one end only.
사용중인 케이블에 금속 실드가있는 경우 금속 DB-25 쉘에 한쪽 끝에서만 연결해야합니다.

Parallel Transfer Mode 1
========================

The second data transfer method relies on both machines having
bi-directional parallel ports, rather than output-only ``printer''
ports.  This allows byte-wide transfers, and avoids reconstructing
nibbles into bytes.  This cable should not be used on unidirectional
``printer'' (as opposed to ``parallel'') ports or when the machine
isn't configured for PLIP, as it will result in output driver
conflicts and the (unlikely) possibility of damage.
두 번째 데이터 전송 방법은 출력 전용 "프린터"포트가 아닌 양방향 병렬 포트를 사용하는 두 시스템에 의존합니다. 
이렇게하면 바이트 단위로 전송할 수 있으므로 nibbles을 바이트로 재구성 할 필요가 없습니다.두 번째 데이터 전송 방법은 출력 전용 "프린터"포트가 아닌 양방향 병렬 포트를 사용하는 두 시스템에 의존합니다. 이렇게하면 바이트 단위로 전송할 수 있으므로 nibbles을 바이트로 재구성 할 필요가 없습니다. 이 케이블은 단방향 프린터 ( "병렬"포트와 반대) 나 PLIP 용으로 구성되지 않은 포트에서 사용하면 안됩니다. 출력 드라이버 충돌과 (거의없는) 손상 가능성이 있습니다. 

The cable for this transfer mode should be constructed as follows:
이 전송 모드의 케이블은 다음과 같이 구성해야합니다.

    STROBE->BUSY 1 - 11
    D0->D0	2 - 2
    D1->D1	3 - 3
    D2->D2	4 - 4
    D3->D3	5 - 5
    D4->D4	6 - 6
    D5->D5	7 - 7
    D6->D6	8 - 8
    D7->D7	9 - 9
    INIT -> ACK  16 - 10
    AUTOFD->PAPOUT 14 - 12
    SLCT->SLCTIN 13 - 17
    GND->ERROR	18 - 15
    extra grounds are 19*,20*,21*,22*,23*,24*
    GROUND	25 - 25
* Do not connect these pins on either end
* 양쪽 끝에이 핀들을 연결하지 마십시오.

Once again, if the cable you are using has a metallic shield it should
be connected to the metallic DB-25 shell at one end only.
다시 한번, 사용중인 케이블에 금속 실드가있는 경우 금속 DB-25 쉘에 한쪽 끝에서만 연결해야합니다.

PLIP Mode 0 transfer protocol
=============================

The PLIP driver is compatible with the "Crynwr" parallel port transfer
standard in Mode 0.  That standard specifies the following protocol:
PLIP 드라이버는 모드 0의 "Crynwr"병렬 포트 전송 표준과 호환됩니다.이 표준은 다음 프로토콜을 지정합니다.

   send header nibble '0x8'
   count-low octet
   count-high octet
   ... data octets
   checksum octet

Each octet is sent as
각 octet은 다음과 같이 전송됩니다.

	<wait for rx. '0x1?'>	<send 0x10+(octet&0x0F)>
	<wait for rx. '0x0?'>	<send 0x00+((octet>>4)&0x0F)>

To start a transfer the transmitting machine outputs a nibble 0x08.
That raises the ACK line, triggering an interrupt in the receiving
machine.  The receiving machine disables interrupts and raises its own ACK
line. 
전송을 시작하기 위해 송신기는 nibble 0x08을 출력합니다.
이는 ACK 회선을 발생시켜 수신 컴퓨터에서 인터럽트를 트리거합니다. 수신 장치는 인터럽트를 비활성화하고 자체 ACK 회선을 발생시킵니다.

Restated:

(OUT is bit 0-4, OUT.j is bit j from OUT. IN likewise)
(OUT은 비트 0-4, OUT.j는 OUT의 비트 j입니다. 마찬가지로 IN)

Send_Byte:
   OUT := low nibble, OUT.4 := 1
   WAIT FOR IN.4 = 1
   OUT := high nibble, OUT.4 := 0
   WAIT FOR IN.4 = 0