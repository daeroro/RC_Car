----------------------------------------------------------------------------
NOTE:  See also arcnet-hardware.txt in this directory for jumper-setting
and cabling information if you're like many of us and didn't happen to get a
manual with your ARCnet card.
참고 : 점퍼 설정 및 케이블 연결 정보는 arcnet-hardware.txt를 참조하십시오. 많은 사람들이 ARCnet 카드 설명서를받지 못한 경우에는 케이블 링 정보를 참조하십시오.

----------------------------------------------------------------------------

Since no one seems to listen to me otherwise, perhaps a poem will get your
attention:
		This driver's getting fat and beefy,
		But my cat is still named Fifi.

Hmm, I think I'm allowed to call that a poem, even though it's only two
lines.  Hey, I'm in Computer Science, not English.  Give me a break.

The point is:  I REALLY REALLY REALLY REALLY REALLY want to hear from you if
you test this and get it working.  Or if you don't.  Or anything.

ARCnet 0.32 ALPHA first made it into the Linux kernel 1.1.80 - this was
nice, but after that even FEWER people started writing to me because they
didn't even have to install the patch.  <sigh>

Come on, be a sport!  Send me a success report!

(hey, that was even better than my original poem... this is getting bad!)

아무도 내 말을 듣지 않는 것처럼 보이기 때문에 아마도 시가주의를 끌 것입니다.
이 운전사는 점점 뚱뚱해 지지만, 제 고양이는 여전히 Fifi라고합니다.

흠, 나는 그것이 단지 두 줄 일지라도 그 시라고 부를 수 있다고 생각합니다. 이봐, 나는 영어가 아니라 컴퓨터 과학에있어. 잠시만 요.
요점은 : 당신이 정말로 이것을 테스트하고 작동 시키면 정말로 당신이 정말로 듣고 싶어한다는 것입니다. 아니면 그렇지 않으면. 아니면 아무것도.
ARCnet 0.32 ALPHA는 리눅스 커널 1.1.80에 처음으로 포함 시켰습니다. 그러나 이것은 좋았지 만, 패치를 설치하지 않아도 사람들이 더 적은 글자를 쓰기 시작했습니다. <한숨>

어서, 스포츠가 돼! 나에게 성공 보고서를 보내라!
(이봐, 저의 원래시보다 더 좋았습니다 ... 이것은 나 빠지고 있습니다!)

--------
WARNING:
--------

If you don't e-mail me about your success/failure soon, I may be forced to
start SINGING.  And we don't want that, do we?
조만간 성공 / 실패에 대해 이메일을 보내지 않으면 SINGING을 시작해야 할 수도 있습니다. 그리고 우리는 그것을 원하지 않습니다.

(You know, it might be argued that I'm pushing this point a little too much. 
If you think so, why not flame me in a quick little e-mail?  Please also
include the type of card(s) you're using, software, size of network, and
whether it's working or not.)
(당신도 알다시피, 나는이 점을 너무 많이 강조한다고 주장 할 수도있다.
그렇게 생각한다면 왜 작은 이메일을 보내겠습니까? 사용중인 카드 종류, 소프트웨어, 네트워크 크기, 작동 여부 등도 함께 입력하십시오.)

My e-mail address is: apenwarr@worldvisions.ca
내 이메일 주소 : apenwarr@worldvisions.ca

---------------------------------------------------------------------------

			
These are the ARCnet drivers for Linux.
이들은 Linux 용 ARCnet 드라이버입니다.

This new release (2.91) has been put together by David Woodhouse 
<dwmw2@infradead.org>, in an attempt to tidy up the driver after adding support
for yet another chipset. Now the generic support has been separated from the
individual chipset drivers, and the source files aren't quite so packed with
#ifdefs! I've changed this file a bit, but kept it in the first person from
Avery, because I didn't want to completely rewrite it.
이 새로운 자료 (2.91)는 David Woodhouse
  <dwmw2@infradead.org>는 다른 칩셋에 대한 지원을 추가 한 후 드라이버를 정리하려고 시도했다. 이제 일반 지원이 개별 칩셋 드라이버와 분리되어 소스 파일에 #ifdefs가 너무 많이 포함되어 있지 않습니다! 나는이 파일을 약간 바꿨지만 Avery의 첫 번째 사람에게 보관했습니다. 완전히 다시 쓰고 싶지 않았기 때문입니다.


The previous release resulted from many months of on-and-off effort from me
(Avery Pennarun), many bug reports/fixes and suggestions from others, and in
particular a lot of input and coding from Tomasz Motylewski.  Starting with
ARCnet 2.10 ALPHA, Tomasz's all-new-and-improved RFC1051 support has been
included and seems to be working fine!
이전 릴리스는 나에게 수천 달 동안의 온 - 앤 - 오프 노력 (Avery Pennarun), 많은 버그보고 / 수정 및 다른 제안, 특히 Tomasz Motylewski의 많은 입력 및 코딩의 결과였습니다. ARCnet 2.10 ALPHA부터 Tomasz의 새롭고 향상된 RFC1051 지원이 포함되어 잘 작동하는 것 같습니다!


Where do I discuss these drivers?
---------------------------------

Tomasz has been so kind as to set up a new and improved mailing list. 
Subscribe by sending a message with the BODY "subscribe linux-arcnet YOUR
REAL NAME" to listserv@tichy.ch.uj.edu.pl.  Then, to submit messages to the
list, mail to linux-arcnet@tichy.ch.uj.edu.pl.
Tomasz는 친절하고 새롭고 향상된 메일 링리스트를 설정했습니다.
BODY "subscribe linux-arcnet YOUR REAL NAME"과 함께 listserv@tichy.ch.uj.edu.pl로 메시지를 보내 구독하십시오. 그런 다음 목록에 메시지를 제출하려면 linux-arcnet@tichy.ch.uj.edu.pl로 메일을 보내십시오.

There are archives of the mailing list at:
메일 링리스트의 보관소는 다음과 같습니다.

	http://epistolary.org/mailman/listinfo.cgi/arcnet

The people on linux-net@vger.kernel.org (now defunct, replaced by
netdev@vger.kernel.org) have also been known to be very helpful, especially
when we're talking about ALPHA Linux kernels that may or may not work right
in the first place.
linux-net@vger.kernel.org에있는 사람들 (netdev@vger.kernel.org로 대체 됨)은 매우 유용하다고 알려져 있습니다. 특히 ALPHA Linux 커널에 관해 이야기 할 때 유용합니다. 처음부터 올바르게 일하십시오.

Other Drivers and Info
----------------------

You can try my ARCNET page on the World Wide Web at:
월드 와이드 웹 (World Wide Web)에서 나의 ARCNET 페이지를 시험해 볼 수 있습니다 :

	http://www.qis.net/~jschmitz/arcnet/	

Also, SMC (one of the companies that makes ARCnet cards) has a WWW site you
might be interested in, which includes several drivers for various cards
including ARCnet.  Try:
또한 SMC (ARCnet 카드를 만드는 회사 중 하나)에는 ARCnet을 비롯한 다양한 카드 용 드라이버가 포함되어있는 WWW 사이트가 있습니다. Try:
	http://www.smc.com/
	
Performance Technologies makes various network software that supports
ARCnet:
Performance Technologies는 ARCnet을 지원하는 다양한 네트워크 소프트웨어를 만듭니다.
	http://www.perftech.com/ or ftp to ftp.perftech.com.
	
Novell makes a networking stack for DOS which includes ARCnet drivers.  Try
FTPing to ftp.novell.com.
Novell은 ARCnet 드라이버가 포함 된 DOS 용 네트워킹 스택을 만듭니다. ftp.novell.com으로 FTPing 해보십시오.

You can get the Crynwr packet driver collection (including arcether.com, the
one you'll want to use with ARCnet cards) from
oak.oakland.edu:/simtel/msdos/pktdrvr. It won't work perfectly on a 386+
without patches, though, and also doesn't like several cards.  Fixed
versions are available on my WWW page, or via e-mail if you don't have WWW
access. 
oak.oakland.edu:/simtel/msdos/pktdrvr에서 Crynwr 패킷 드라이버 모음 (ARCnet 카드와 함께 사용하려는 arcether.com 포함)을 얻을 수 있습니다. 386 이상에서는 패치없이 완벽하게 작동하지 않으며 여러 카드를 좋아하지 않습니다. 고정 된 버전은 내 WWW 페이지에서 또는 WWW 액세스 권한이없는 경우 전자 메일을 통해 사용할 수 있습니다.

Installing the Driver
---------------------

All you will need to do in order to install the driver is:
드라이버를 설치하기 위해해야 할 일은 다음과 같습니다.

	make config
		(be sure to choose ARCnet in the network devices 
		and at least one chipset driver.)
		(네트워크 장치 및 적어도 하나의 칩셋 드라이버에서 ARCnet을 선택하십시오.)
	make clean
	make zImage
	
If you obtained this ARCnet package as an upgrade to the ARCnet driver in
your current kernel, you will need to first copy arcnet.c over the one in
the linux/drivers/net directory.
이 ARCnet 패키지를 현재 커널의 ARCnet 드라이버 업그레이드로 얻은 경우 먼저 arcnet.c를 linux / drivers / net 디렉토리의 ARCnet 드라이버에 복사해야합니다.

You will know the driver is installed properly if you get some ARCnet
messages when you reboot into the new Linux kernel.
새 Linux 커널로 재부팅 할 때 ARCnet 메시지가 나타나면 드라이버가 제대로 설치되었음을 알 수 있습니다.

There are four chipset options:
4 가지 칩셋 옵션이 있습니다.

 1. Standard ARCnet COM90xx chipset.

This is the normal ARCnet card, which you've probably got. This is the only
chipset driver which will autoprobe if not told where the card is.
It following options on the command line:
이것은 아마도 ARCnet 카드 일 겁니다. 이것은 카드가 어디에 있는지 말하지 않으면 자동 탐색 할 유일한 칩셋 드라이버입니다. 명령 행에서 다음과 같은 옵션을 사용할 수 있습니다 :

 com90xx=[<io>[,<irq>[,<shmem>]]][,<name>] | <name>

If you load the chipset support as a module, the options are:
칩셋 지원을 모듈로 로드하는 경우 옵션은 다음과 같습니다.

 io=<io> irq=<irq> shmem=<shmem> device=<name>

To disable the autoprobe, just specify "com90xx=" on the kernel command line.
To specify the name alone, but allow autoprobe, just put "com90xx=<name>"
자동 탐색을 비활성화하려면 커널 명령 행에 "com90xx ="를 지정하면됩니다.
이름 만 지정하고 자동 탐색을 허용하려면 "com90xx = <name>"

 2. ARCnet COM20020 chipset.

This is the new chipset from SMC with support for promiscuous mode (packet 
sniffing), extra diagnostic information, etc. Unfortunately, there is no
sensible method of autoprobing for these cards. You must specify the I/O
address on the kernel command line.
이것은 promiscuous mode (패킷 스니핑), 추가 진단 정보 등을 지원하는 SMC의 새로운 칩셋입니다. 불행히도 이러한 카드에 대한 자동 탐색 방법은 없습니다. I / O 주소는 커널 명령 행에 지정해야합니다.

The command line options are:
명령 행 옵션은 다음과 같습니다.

 com20020=<io>[,<irq>[,<node_ID>[,backplane[,CKP[,timeout]]]]][,name]

If you load the chipset support as a module, the options are:
칩셋 지원을 모듈로 로드하는 경우 옵션은 다음과 같습니다.
 io=<io> irq=<irq> node=<node_ID> backplane=<backplane> clock=<CKP>
 timeout=<timeout> device=<name>

The COM20020 chipset allows you to set the node ID in software, overriding the
default which is still set in DIP switches on the card. If you don't have the
COM20020 data sheets, and you don't know what the other three options refer
to, then they won't interest you - forget them.
COM20020 칩셋을 사용하면 소프트웨어의 노드 ID를 설정하여 카드의 DIP 스위치에 여전히 설정된 기본값을 무시할 수 있습니다. COM20020 데이터 시트가 없지만 다른 세 가지 옵션이 무엇을 참조하는지 모를 경우 관심이 없으므로 잊어 버릴 수 있습니다.

 3. ARCnet COM90xx chipset in IO-mapped mode.

This will also work with the normal ARCnet cards, but doesn't use the shared
memory. It performs less well than the above driver, but is provided in case
you have a card which doesn't support shared memory, or (strangely) in case
you have so many ARCnet cards in your machine that you run out of shmem slots.
If you don't give the IO address on the kernel command line, then the driver
will not find the card.
이것은 일반 ARCnet 카드에서도 작동하지만 공유 메모리는 사용하지 않습니다. 위의 드라이버보다 성능이 떨어지지 만, 공유 메모리를 지원하지 않는 카드를 가지고 있거나 (이상하게) 컴퓨터에 ARCnet 카드가 너무 많아서 shmem 슬롯이 부족한 경우 제공됩니다.
커널 명령 행에 IO 주소를주지 않으면 드라이버가 카드를 찾지 못합니다.

The command line options are:
 com90io=<io>[,<irq>][,<name>] 

If you load the chipset support as a module, the options are:
셋칩 지원을 모듈로로드하는 경우 옵션은 다음과 같습니다.
 io=<io> irq=<irq> device=<name>

 4. ARCnet RIM I cards.

These are COM90xx chips which are _completely_ memory mapped. The support for
these is not tested. If you have one, please mail the author with a success 
report. All options must be specified, except the device name.
이들은 COM90xx 칩으로 전체적으로 메모리 맵핑되어 있습니다. 이들에 대한 지원은 테스트되지 않았습니다. 가지고 계시다면 작성자에게 성공 보고서를 우편으로 보내주십시오. 장치 이름을 제외한 모든 옵션을 지정해야합니다.

Command line options:
 arcrimi=<shmem>,<irq>,<node_ID>[,<name>]

If you load the chipset support as a module, the options are:
셋칩 지원을 모듈로로드하는 경우 옵션은 다음과 같습니다.

 shmem=<shmem> irq=<irq> node=<node_ID> device=<name>


Loadable Module Support
-----------------------

Configure and rebuild Linux.  When asked, answer 'm' to "Generic ARCnet 
support" and to support for your ARCnet chipset if you want to use the
loadable module. You can also say 'y' to "Generic ARCnet support" and 'm' 
to the chipset support if you wish.
Linux를 설정하고 다시 빌드하십시오. 질문을 받으면 '일반 ARCnet 지원'으로 'm'을 입력하고로드 가능한 모듈을 사용하려면 ARCnet 칩셋을 지원하십시오. 원한다면 '일반 ARCnet 지원'에 'y'라고 말하고 칩셋 지원에 'm'이라고 말할 수도 있습니다.

	make config
	make clean	
	make zImage
	make modules
	
If you're using a loadable module, you need to use insmod to load it, and
you can specify various characteristics of your card on the command
line.  (In recent versions of the driver, autoprobing is much more reliable
and works as a module, so most of this is now unnecessary.)
로드 가능한 모듈을 사용하는 경우 insmod를 사용하여 모듈을 로드 해야하며 명령 행에서 카드의 다양한 특성을 지정할 수 있습니다. (최근 버전의 드라이버에서 자동 검색은 훨씬 더 안정적이며 모듈로 작동하므로 대부분 필요하지 않습니다.)

For example:
	cd /usr/src/linux/modules
	insmod arcnet.o
	insmod com90xx.o
	insmod com20020.o io=0x2e0 device=eth1
	

Using the Driver
----------------

If you build your kernel with ARCnet COM90xx support included, it should 
probe for your card automatically when you boot. If you use a different
chipset driver complied into the kernel, you must give the necessary options
on the kernel command line, as detailed above.
ARCnet COM90xx 지원이 포함 된 커널을 빌드하면 부팅 할 때 자동으로 카드를 검사해야합니다. 커널에 맞춰진 다른 칩셋 드라이버를 사용하는 경우 위와 같이 커널 명령 행에 필요한 옵션을 지정해야합니다.

Go read the NET-2-HOWTO and ETHERNET-HOWTO for Linux; they should be
available where you picked up this driver.  Think of your ARCnet as a
souped-up (or down, as the case may be) Ethernet card.
리눅스 용 NET-2-HOWTO와 ETHERNET-HOWTO를 읽으십시오. 이 드라이버를 가져온 곳에서 사용할 수 있어야합니다. 귀하의 ARCnet을 세련된 (또는 경우에 따라) 이더넷 카드라고 생각하십시오.

By the way, be sure to change all references from "eth0" to "arc0" in the
HOWTOs.  Remember that ARCnet isn't a "true" Ethernet, and the device name
is DIFFERENT.
그런데 HOWTO에서 모든 참조를 "eth0"에서 "arc0"으로 변경해야합니다. ARCnet은 "true" Ethernet이 아니며 장치 이름은 DIFFERENT입니다.

Multiple Cards in One Computer
------------------------------

Linux has pretty good support for this now, but since I've been busy, the
ARCnet driver has somewhat suffered in this respect. COM90xx support, if 
compiled into the kernel, will (try to) autodetect all the installed cards. 
리눅스는 지금 당장은 꽤 좋은 지원을하고 있지만, 바빴던 이래 ARCnet 드라이버는이 점에서 다소 어려움을 겪고 있습니다. COM90xx 지원은 커널에 컴파일되면 설치된 모든 카드를 자동 감지합니다.

If you have other cards, with support compiled into the kernel, then you can 
just repeat the options on the kernel command line, e.g.:
커널에 컴파일 된 지원이있는 다른 카드가 있다면 커널 명령 행 e.g.에서 옵션을 반복하면됩니다.
LILO: linux com20020=0x2e0 com20020=0x380 com90io=0x260

If you have the chipset support built as a loadable module, then you need to 
do something like this:
로드 가능한 모듈로 칩셋 지원을 구축 한 경우 다음과 같이해야합니다.

	insmod -o arc0 com90xx
	insmod -o arc1 com20020 io=0x2e0
	insmod -o arc2 com90xx
The ARCnet drivers will now sort out their names automatically.
ARCnet 드라이버는 이제 이름을 자동으로 분류합니다.

How do I get it to work with...?
--------------------------------

NFS: Should be fine linux->linux, just pretend you're using Ethernet cards. 
        oak.oakland.edu:/simtel/msdos/nfs has some nice DOS clients.  There
        is also a DOS-based NFS server called SOSS.  It doesn't multitask
        quite the way Linux does (actually, it doesn't multitask AT ALL) but
        you never know what you might need.
NFS : 리눅스에서 리눅스로 잘되어야한다. 이더넷 카드를 사용하고있는 것처럼 가장한다.
         oak.oakland.edu:/simtel/msdos/nfs에는 멋진 DOS 클라이언트가 있습니다. SOSS라고하는 DOS 기반 NFS 서버도 있습니다. Linux가하는 것처럼 멀티 태스킹을하지는 않지만 (실제로는 AT ALL을 	
		멀티 태스킹하지 않습니다.) 그러나 당신은 당신이 무엇을 필요로하는지 결코 알지 못할 것입니다.

        With AmiTCP (and possibly others), you may need to set the following
        options in your Amiga nfstab:  MD 1024 MR 1024 MW 1024
        (Thanks to Christian Gottschling <ferksy@indigo.tng.oche.de>
		for this.)
		AmiTCP (그리고 아마도 다른 것들)를 사용하여 Amiga nfstab에서 다음 옵션을 설정해야 할 수도 있습니다 : MD 1024 MR 1024 MW 1024 (Christian Gottschling <ferksy@indigo.tng.oche.de>에게 감사드립니다)

	Probably these refer to maximum NFS data/read/write block sizes.  I
	don't know why the defaults on the Amiga didn't work; write to me if
	you know more.
	아마도 이들은 최대 NFS 데이터 / 읽기 / 쓰기 블록 크기를 참조 할 것입니다. 난 아미의 기본이 잘되지 않았던 이유를 모르겠어요. 당신이 더 알고 있다면 나에게 쓰십시오.

DOS: If you're using the freeware arcether.com, you might want to install
        the driver patch from my web page.  It helps with PC/TCP, and also
        can get arcether to load if it timed out too quickly during
        initialization.  In fact, if you use it on a 386+ you REALLY need
        the patch, really.
DOS : 프리웨어 인 arcether.com을 사용한다면 내 웹 페이지에서 드라이버 패치를 설치하고 싶을 것입니다. 그것은 PC / TCP와 함께 도움이되며 초기화 중에 너무 빨리 시간이 초과되면 arcether가로드되도록 할 수 있습니다. 사실 386+ 이상에서 사용한다면 정말로 패치가 필요합니다.

			
Windows:  See DOS :)  Trumpet Winsock works fine with either the Novell or
	Arcether client, assuming you remember to load winpkt of course.
Windows : DOS 참고 : Trumpet Winsock은 물론 winpkt를로드하는 것을 기억한다면 Novell 또는 Arcether 클라이언트와 잘 작동합니다.

LAN Manager and Windows for Workgroups: These programs use protocols that
        are incompatible with the Internet standard.  They try to pretend
        the cards are Ethernet, and confuse everyone else on the network. 
LAN Manager 및 Windows for Workgroups :이 프로그램은 인터넷 표준과 호환되지 않는 프로토콜을 사용합니다. 그들은 카드가 이더넷 인 척하고 네트워크의 다른 모든 사람들을 혼란스럽게합니다.

        However, v2.00 and higher of the Linux ARCnet driver supports this
        protocol via the 'arc0e' device.  See the section on "Multiprotocol
        Support" for more information.
        그러나 Linux ARCnet 드라이버 v2.00 이상은 'arc0e'장치를 통해이 프로토콜을 지원합니다. 자세한 내용은 "멀티 프로토콜 지원"절을 참조하십시오.

	Using the freeware Samba server and clients for Linux, you can now
	interface quite nicely with TCP/IP-based WfWg or Lan Manager
	networks.
	Linux 용 프리웨어 Samba 서버와 클라이언트를 사용하면 이제 TCP / IP 기반 WfWg 또는 Lan Manager 네트워크와 아주 잘 인터페이스 할 수 있습니다.

Windows 95: Tools are included with Win95 that let you use either the LANMAN
	style network drivers (NDIS) or Novell drivers (ODI) to handle your
	ARCnet packets.  If you use ODI, you'll need to use the 'arc0'
	device with Linux.  If you use NDIS, then try the 'arc0e' device. 
	See the "Multiprotocol Support" section below if you need arc0e,
	you're completely insane, and/or you need to build some kind of
	hybrid network that uses both encapsulation types.
Windows 95 : LANMAN 스타일 네트워크 드라이버 (NDIS) 또는 Novell 드라이버 (ODI)를 사용하여 ARCnet 패킷을 처리 할 수있게 해주는 도구가 Win95에 포함되어 있습니다. ODI를 사용한다면 Linux에서 'arc0'장치를 사용해야합니다. NDIS를 사용하는 경우 'arc0e'장치를 사용해보십시오.
arc0e가 필요하고 완전히 미친 경우 및 캡슐화 유형을 모두 사용하는 일종의 하이브리드 네트워크를 구축해야하는 경우 아래 "멀티 프로토콜 지원"섹션을 참조하십시오.

OS/2: I've been told it works under Warp Connect with an ARCnet driver from
	SMC.  You need to use the 'arc0e' interface for this.  If you get
	the SMC driver to work with the TCP/IP stuff included in the
	"normal" Warp Bonus Pack, let me know.
OS / 2 : SMC의 ARCnet 드라이버와 함께 Warp Connect에서 작동한다고 들었습니다. 이를 위해서는 'arc0e'인터페이스를 사용해야합니다. SMC 드라이버가 "normal"Warp Bonus Pack에 포함 된 TCP / IP 항목으로 작업하게되면 알려주십시오.

	ftp.microsoft.com also has a freeware "Lan Manager for OS/2" client
	which should use the same protocol as WfWg does.  I had no luck
	installing it under Warp, however.  Please mail me with any results.
	ftp.microsoft.com에는 WfWg와 동일한 프로토콜을 사용해야하는 프리웨어 "Lan Manager for OS / 2"클라이언트도 있습니다. 그러나 Warp에서 설치 한 운이 없었습니다. 어떤 결과가 나에게 우편으로 보내십시오.

NetBSD/AmiTCP: These use an old version of the Internet standard ARCnet
	protocol (RFC1051) which is compatible with the Linux driver v2.10
	ALPHA and above using the arc0s device. (See "Multiprotocol ARCnet"
	below.)  ** Newer versions of NetBSD apparently support RFC1201.
NetBSD / AmiTCP : arc0s 장치를 사용하는 Linux 드라이버 v2.10 ALPHA 이상과 호환되는 인터넷 표준 ARCnet 프로토콜 (RFC1051)의 이전 버전을 사용합니다. (아래의 "Multiprotocol ARCnet"을보십시오.) ** NetBSD의 새로운 버전은 분명히 RFC1201을 지원합니다.

Using Multiprotocol ARCnet
--------------------------

The ARCnet driver v2.10 ALPHA supports three protocols, each on its own
"virtual network device":
ARCnet 드라이버 v2.10 ALPHA는 자체 "가상 네트워크 장치"에 각각 3 가지 프로토콜을 지원합니다.

	arc0  - RFC1201 protocol, the official Internet standard which just
		happens to be 100% compatible with Novell's TRXNET driver. 
		Version 1.00 of the ARCnet driver supported _only_ this
		protocol.  arc0 is the fastest of the three protocols (for
		whatever reason), and allows larger packets to be used
		because it supports RFC1201 "packet splitting" operations. 
		Unless you have a specific need to use a different protocol,
		I strongly suggest that you stick with this one.
	arc0 - RFC1201 프로토콜. Novell의 TRXNET 드라이버와 100 % 호환되는 공식 인터넷 표준입니다. ARCnet 드라이버 버전 1.00은이 프로토콜을 _only_ 지원했습니다. arc0은 세 가지 프로토콜 중 가장 빠른 프로토콜로 (이유가 무엇이든) RFC1201 "packet splitting"작업을 지원하므로 더 큰 패킷을 사용할 수 있습니다. 다른 프로토콜을 사용할 필요가 없다면이 프로토콜을 계속 사용하는 것이 좋습니다.

	arc0e - "Ethernet-Encapsulation" which sends packets over ARCnet
		that are actually a lot like Ethernet packets, including the
		6-byte hardware addresses.  This protocol is compatible with
		Microsoft's NDIS ARCnet driver, like the one in WfWg and
		LANMAN.  Because the MTU of 493 is actually smaller than the
		one "required" by TCP/IP (576), there is a chance that some
		network operations will not function properly.  The Linux
		TCP/IP layer can compensate in most cases, however, by
		automatically fragmenting the TCP/IP packets to make them
		fit.  arc0e also works slightly more slowly than arc0, for
		reasons yet to be determined.  (Probably it's the smaller
		MTU that does it.)
	arc0e - ARCnet을 통해 실제로 6 바이트 하드웨어 주소를 포함하여 이더넷 패킷과 비슷한 패킷을 보내는 "이더넷 캡슐화". 이 프로토콜은 WfWg 및 LANMAN과 같은 Microsoft의 NDIS ARCnet 드라이버와 호환됩니다. 493의 MTU가 실제로 TCP / IP (576)에 의해 요구되는 것보다 작기 때문에 일부 네트워크 작업이 제대로 작동하지 않을 가능성이 있습니다. Linux TCP / IP 계층은 대부분의 경우 TCP / IP 패킷을 자동으로 조각 화하여 적절하게 보완 할 수 있습니다. 또한 arc0e는 아직 결정되지 않은 이유로 arc0보다 조금 느리게 작동합니다. (아마도 작은 MTU 일 것입니다.)

	arc0s - The "[s]imple" RFC1051 protocol is the "previous" Internet
		standard that is completely incompatible with the new
		standard.  Some software today, however, continues to
		support the old standard (and only the old standard)
		including NetBSD and AmiTCP.  RFC1051 also does not support
		RFC1201's packet splitting, and the MTU of 507 is still
		smaller than the Internet "requirement," so it's quite
		possible that you may run into problems.  It's also slower
		than RFC1201 by about 25%, for the same reason as arc0e.
	arc0s - "[s]imple"imple "RFC1051 프로토콜은 새로운 표준과 완전히 호환되지 않는 "previous "인터넷 표준입니다. 그러나 오늘날 일부 소프트웨어는 NetBSD 및 AmiTCP를 포함하여 이전 표준 (및 이전 표준 만 지원)을 계속 지원합니다. RFC1051은 또한 RFC1201의 패킷 분할을 지원하지 않으며 507의 MTU는 인터넷 "requirement"보다 작으므로 문제가 발생할 가능성이 큽니다. arc0e와 같은 이유로 RFC1201보다 약 25 % 느립니다.

		The arc0s support was contributed by Tomasz Motylewski
		and modified somewhat by me.  Bugs are probably my fault.
		arc0s 지원은 Tomasz Motylewski가 기고했으며 다소 수정되었습니다. Bug는 아마 내 잘못이야.	

You can choose not to compile arc0e and arc0s into the driver if you want -
this will save you a bit of memory and avoid confusion when eg. trying to
use the "NFS-root" stuff in recent Linux kernels.
원하는 경우 arc0e 및 arc0s를 드라이버에 컴파일하지 않도록 선택할 수 있습니다. 이렇게하면 약간의 메모리를 절약하고 예를 들어 혼란을 피할 수 있습니다. 최근 리눅스 커널에서 "NFS-root"를 사용하려한다.

The arc0e and arc0s devices are created automatically when you first
ifconfig the arc0 device.  To actually use them, though, you need to also
ifconfig the other virtual devices you need.  There are a number of ways you
can set up your network then:
arc0e 및 arc0s 장치는 arc0 장치를 처음 ifconfig 할 때 자동으로 만들어집니다. 실제로 이들을 사용하려면 필요로하는 다른 가상 장치를 ifconfig해야합니다. 네트워크를 설정할 수있는 방법에는 여러 가지가 있습니다.

1. Single Protocol.

   This is the simplest way to configure your network: use just one of the
   two available protocols.  As mentioned above, it's a good idea to use
   only arc0 unless you have a good reason (like some other software, ie.
   WfWg, that only works with arc0e).
   네트워크를 구성하는 가장 간단한 방법은 사용 가능한 두 가지 프로토콜 중 하나를 사용하는 것입니다. 위에서 언급했듯이 좋은 이유가 없다면 arc0 만 사용하는 것이 좋습니다 (다른 소프트웨어 인 ie. WfWg와 같이 arc0e에서만 작동 함).

   If you need only arc0, then the following commands should get you going:
   	ifconfig arc0 MY.IP.ADD.RESS
   	route add MY.IP.ADD.RESS arc0
   	route add -net SUB.NET.ADD.RESS arc0
   	[add other local routes here]
   	arc0 만 필요하면 다음 명령을 사용하십시오 :
    ifconfig arc0 MY.IP.ADD.RESS
    경로 추가 MY.IP.ADD.RESS arc0
    경로 추가 -net SUB.NET.ADD.RESS arc0
    [여기에 다른 지역 노선 추가]

   If you need arc0e (and only arc0e), it's a little different:
   	ifconfig arc0 MY.IP.ADD.RESS
   	ifconfig arc0e MY.IP.ADD.RESS
   	route add MY.IP.ADD.RESS arc0e
   	route add -net SUB.NET.ADD.RESS arc0e
   arc0e (그리고 오직 arc0e)가 필요하다면 조금 다르다.
    ifconfig arc0 MY.IP.ADD.RESS
    ifconfig arc0e MY.IP.ADD.RESS
    경로 추가 MY.IP.ADD.RESS arc0e
    경로 추가 -net SUB.NET.ADD.RESS arc0e

   arc0s works much the same way as arc0e.
   arc0s는 arc0e와 같은 방식으로 작동합니다.

2. More than one protocol on the same wire.
  동일한 전선에 하나 이상의 프로토콜이 있습니다.

   Now things start getting confusing.  To even try it, you may need to be
   partly crazy.  Here's what *I* did. :) Note that I don't include arc0s in
   my home network; I don't have any NetBSD or AmiTCP computers, so I only
   use arc0s during limited testing.
   이제 일이 혼란스러워지기 시작합니다. 그것을 시도하기 위해서, 당신은 부분적으로 미쳐야 할 수도 있습니다. * 내가 한 일이 여기에 있습니다. :) 내 홈 네트워크에는 arc0s가 포함되어 있지 않습니다. NetBSD 또는 AmiTCP 컴퓨터가 없으므로 제한된 테스트 중에 만 arc0s를 사용합니다.

   I have three computers on my home network; two Linux boxes (which prefer
   RFC1201 protocol, for reasons listed above), and one XT that can't run
   Linux but runs the free Microsoft LANMAN Client instead.
   나는 집의 네트워크에 3 대의 컴퓨터를 가지고 있습니다. 2 개의 Linux 상자 (위의 이유로 RFC1201 프로토콜을 선호)와 Linux를 실행 할 수 없지만, 대신 무료 Microsoft LANMAN 클라이언트를 실행하는 하나의 XT가 있습니다.

   Worse, one of the Linux computers (freedom) also has a modem and acts as
   a router to my Internet provider.  The other Linux box (insight) also has
   its own IP address and needs to use freedom as its default gateway.  The
   XT (patience), however, does not have its own Internet IP address and so
   I assigned it one on a "private subnet" (as defined by RFC1597).
더 나쁜 것은 리눅스 컴퓨터 중 하나 (자유)에도 모뎀이 있으며 인터넷 공급자에게 라우터 역할을한다는 것입니다. 다른 리눅스 박스 (통찰력)는 자체 IP 주소를 가지며 freedom를 기본 게이트웨이로 사용해야합니다. 그러나 XT (patience)에는 자체 인터넷 IP 주소가 없으므로 "private subne"(RFC1597에 정의 된대로)에 할당했습니다.

   To start with, take a simple network with just insight and freedom. 
   Insight needs to:
   	- talk to freedom via RFC1201 (arc0) protocol, because I like it
	  more and it's faster.
	- use freedom as its Internet gateway.
 우선 통찰력과 자유를 가진 단순한 네트워크를 구축하십시오.
    Insight 은 다음을 필요로합니다.
    - RFC1201 (arc0) 프로토콜을 통해 자유와 대화한다. 왜냐하면 내가 더 좋아하고 속도가 빠르기 때문이다.
    - freedom를 인터넷 게이트웨이로 사용하십시오.

   That's pretty easy to do.  Set up  like this:
   	ifconfig arc0 insight
   	route add insight arc0
   	route add freedom arc0	/* I would use the subnet here (like I said
					to to in "single protocol" above),
   					but the rest of the subnet
   					unfortunately lies across the PPP
   					link on freedom, which confuses
   					things. */
   	route add default gw freedom
   	그 일은 꽤 쉽습니다. 다음과 같이 insight을 설정하십시오.
    ifconfig arc0 insight
    경로 추가 insight arc0
    route add freedom arc0 / * 여기서 서브넷을 사용 하겠지만 (위의 "단일 프로토콜"에서 말한 것처럼), 나머지 서브넷은 불행하게도 freedom에 관한 PPP 링크를 가로막고 있습니다. * / 
	route 기본 gw 자유 추가

   And freedom gets configured like so:
   	ifconfig arc0 freedom
   	route add freedom arc0
   	route add insight arc0
   	/* and default gateway is configured by pppd */
   	freedom는 다음과 같이 구성됩니다.
    ifconfig arc0 freedom
    경로 freedom 추가 arc0
    경로 추가 insight arc0
    / *와 기본 게이트웨이는 pppd에 의해 설정됩니다 * /

   Great, now insight talks to freedom directly on arc0, and sends packets
   to the Internet through freedom.  If you didn't know how to do the above,
   you should probably stop reading this section now because it only gets
   worse.
   이제는 insight가 arc0에서 freedom 와 직접 대화하고 freedom를 통해 인터넷에 패킷을 보냅니다. 위의 방법을 모르는 경우에는 악화되기 때문에 지금이 섹션을 읽지 말아야합니다.

   Now, how do I add patience into the network?  It will be using LANMAN
   Client, which means I need the arc0e device.  It needs to be able to talk
   to both insight and freedom, and also use freedom as a gateway to the
   Internet.  (Recall that patience has a "private IP address" which won't
   work on the Internet; that's okay, I configured Linux IP masquerading on
   freedom for this subnet).
   자, 네트워크에 patience을 어떻게 추가합니까? LANMAN Client를 사용하게 될 것입니다. 즉, arc0e 디바이스가 필요합니다. insight과 freedom를 모두 이야기 할 수 있어야하며, freedom를 인터넷의 관문으로 삼아야합니다. (patience은 인터넷에서 작동하지 않는 "사설 IP 주소"를 가지고 있으며, 괜찮습니다. 리눅스 IP가이 서브넷의 자유를 가장했습니다.)

   So patience (necessarily; I don't have another IP number from my
   provider) has an IP address on a different subnet than freedom and
   insight, but needs to use freedom as an Internet gateway.  Worse, most
   DOS networking programs, including LANMAN, have braindead networking
   schemes that rely completely on the netmask and a 'default gateway' to
   determine how to route packets.  This means that to get to freedom or
   insight, patience WILL send through its default gateway, regardless of
   the fact that both freedom and insight (courtesy of the arc0e device)
   could understand a direct transmission.
   patience (필자는 제공 업체의 다른 IP 번호가 없음)은 freedom와 통찰력과는 다른 서브넷에 IP 주소를 가지고 있지만 인터넷 게이트웨이로 자유를 사용해야합니다. 더욱이 LANMAN을 포함한 대부분의 DOS 네트워킹 프로그램에는 넷 마스크에 완전히 의존하는 braindead 네트워킹 구성표와 패킷 라우팅 방법을 결정하는 '기본 게이트웨이'가 있습니다. 즉, freedom와 insight (arc0e 장치의 장점)이 직접 전송을 이해할 수 있다는 사실에 관계없이 freedom 또는 insight을 얻으려면 patience가 기본 게이트웨이를 통해 전달됩니다.

   I compensate by giving freedom an extra IP address - aliased 'gatekeeper'
   - that is on my private subnet, the same subnet that patience is on.  I
   then define gatekeeper to be the default gateway for patience.
   나는 여분의 IP 주소 인 alias 된 '게이트 키퍼 (gatekeeper)'를 개인 서브넷에두고 patience과 동일한 서브넷에 freedom를 부여함으로써 보상합니다. 그런 다음 gatekeeper를 patience를위한 기본 게이트웨이로 정의합니다.
   
   To configure freedom (in addition to the commands above):
   	ifconfig arc0e gatekeeper
   	route add gatekeeper arc0e
   	route add patience arc0e
   위의 명령 외에도 자유를 구성하려면 다음을 수행하십시오.
    ifconfig arc0e 게이트 키퍼
    경로 게이트 키퍼 추가 arc0e
    경로 인내심을 추가하십시오 arc0e

   This way, freedom will send all packets for patience through arc0e,
   giving its IP address as gatekeeper (on the private subnet).  When it
   talks to insight or the Internet, it will use its "freedom" Internet IP
   address.
   이렇게하면 freedom는 arc0e를 통해 patience 을위한 모든 패킷을 보내고 IP 주소를 개인 서브넷의 게이트 키퍼로 제공합니다. insight이나 인터넷에 말하면 "freedom"인터넷 IP 주소를 사용합니다.

   You will notice that we haven't configured the arc0e device on insight. 
   This would work, but is not really necessary, and would require me to
   assign insight another special IP number from my private subnet.  Since
   both insight and patience are using freedom as their default gateway, the
   two can already talk to each other.
   우리는 insight을 위해 arc0e 장치를 구성하지 않았다는 것을 알게 될 것입니다.
    이 작업은 가능하지만 실제로 필요하지는 않습니다. 개인 전용 서브넷의 다른 특수 IP 번호를 insight으로 할당해야합니다. insight과 patience 모두 기본 게이트웨이로 freedom를 사용하기 때문에 이 두 사람은 이미 서로 대화 할 수 있습니다.

   It's quite fortunate that I set things up like this the first time (cough
   cough) because it's really handy when I boot insight into DOS.  There, it
   runs the Novell ODI protocol stack, which only works with RFC1201 ARCnet. 
   In this mode it would be impossible for insight to communicate directly
   with patience, since the Novell stack is incompatible with Microsoft's
   Ethernet-Encap.  Without changing any settings on freedom or patience, I
   simply set freedom as the default gateway for insight (now in DOS,
   remember) and all the forwarding happens "automagically" between the two
   hosts that would normally not be able to communicate at all.
   도스에 대한 insight을 불러올 때 정말 편리하기 때문에 처음으로 이런 기침을하는 것은 기쁜 일입니다. 여기서 RFC1201 ARCnet에서만 작동하는 Novell ODI 프로토콜 스택을 실행합니다. 이 모드에서는 Novell 스택이 Microsoft의 Ethernet-Encap과 호환되지 않으므로 insight가 patience을 가지고 직접 통신하는 것은 불가능합니다. freedom 또는 patience에 대한 설정을 변경하지 않고 간단히 insight을위한 기본 게이트웨이 (현재는 DOS에서 기억)를 freedom로 설정하고 일반적으로 통신 할 수없는 두 호스트 간의 모든 전송이 자동 으로 이루어집니다.




   For those who like diagrams, I have created two "virtual subnets" on the
   same physical ARCnet wire.  You can picture it like this:
   다이어그램을 좋아하는 사람들은 동일한 물리적 ARCnet 와이어에 두 개의 "가상 서브넷"을 만들었습니다. 다음과 같이 그림을 그릴 수 있습니다.

                                                    
          [RFC1201 NETWORK]                   [ETHER-ENCAP NETWORK]
      (registered Internet subnet)           (RFC1597 private subnet)
  
                             (IP Masquerade)
          /---------------\         *            /---------------\
          |               |         *            |               |
          |               +-Freedom-*-Gatekeeper-+               |
          |               |    |    *            |               |
          \-------+-------/    |    *            \-------+-------/
                  |            |                         |
               Insight         |                      Patience
                           (Internet)



It works: what now?
-------------------

Send mail describing your setup, preferably including driver version, kernel
version, ARCnet card model, CPU type, number of systems on your network, and
list of software in use to me at the following address:
	apenwarr@worldvisions.ca
드라이버 버전, 커널 버전, ARCnet 카드 모델, CPU 유형, 네트워크 시스템 수 및 사용중인 소프트웨어 목록을 다음 주소로 보내주십시오.
apenwarr@worldvisions.ca

I do send (sometimes automated) replies to all messages I receive.  My email
can be weird (and also usually gets forwarded all over the place along the
way to me), so if you don't get a reply within a reasonable time, please
resend.
내가받는 모든 메시지에 회신 (때로는 자동화)합니다. 내 이메일이 이상 할 수 있습니다 (또한 보통 나에게 길을 따라 전달됩니다). 따라서 적절한 시간 내에 답장을받지 못하면 다시 보내주십시오.


It doesn't work: what now?
--------------------------

Do the same as above, but also include the output of the ifconfig and route
commands, as well as any pertinent log entries (ie. anything that starts
with "arcnet:" and has shown up since the last reboot) in your mail.
상기와 동일하게 실시 합니다만, ifconfig와 route 명령의 출력, 이메일의 로그 항목 (즉, "arcnet :"로 시작하고 마지막 부팅 이후로 표시된 것)도 포함합니다.

If you want to try fixing it yourself (I strongly recommend that you mail me
about the problem first, since it might already have been solved) you may
want to try some of the debug levels available.  For heavy testing on
D_DURING or more, it would be a REALLY good idea to kill your klogd daemon
first!  D_DURING displays 4-5 lines for each packet sent or received.  D_TX,
D_RX, and D_SKB actually DISPLAY each packet as it is sent or received,
which is obviously quite big.
스스로 해결하려고하는 경우 (이미 해결되었으므로 먼저 문제에 대해 메일을 보내시기 바랍니다) 사용 가능한 디버그 수준을 시도해보십시오. D_DURING 이상의 무거운 테스트를 위해, 먼저 klogd 데몬을 죽이는 것이 좋습니다! D_DURING은 보내거나받은 각 패킷에 대해 4-5 줄을 표시합니다. D_TX, D_RX 및 D_SKB는 실제로 각 패킷이 보내거나받을 때 표시합니다. 이는 분명히 상당히 큽니다.

Starting with v2.40 ALPHA, the autoprobe routines have changed
significantly.  In particular, they won't tell you why the card was not
found unless you turn on the D_INIT_REASONS debugging flag.
v2.40 ALPHA부터 자동 탐색 루틴이 크게 변경되었습니다. 특히 D_INIT_REASONS 디버깅 플래그를 설정하지 않으면 카드가 발견되지 않은 이유를 알려주지 않습니다.

Once the driver is running, you can run the arcdump shell script (available
from me or in the full ARCnet package, if you have it) as root to list the
contents of the arcnet buffers at any time.  To make any sense at all out of
this, you should grab the pertinent RFCs. (some are listed near the top of
arcnet.c).  arcdump assumes your card is at 0xD0000.  If it isn't, edit the
script.
드라이버가 실행되면 arcdump 셸 스크립트 (나 또는 전체 ARCnet 패키지에서 사용 가능)를 루트로 실행하여 언제든지 full ARCnet package 에 내용을 나열 할 수 있습니다. 이 모든 것을 이해하려면 관련 RFC를 확보해야합니다. (일부는 arcnet.c의 맨 위에 있습니다). arcdump는 귀하의 카드가 0xD0000이라고 가정합니다. 그렇지 않은 경우 스크립트를 편집하십시오.


Buffers 0 and 1 are used for receiving, and Buffers 2 and 3 are for sending. 
Ping-pong buffers are implemented both ways.
버퍼 0과 1은 수신에 사용되며, 버퍼 2와 3은 송신 용입니다.
Ping-pong buffers는 두 가지 방식으로 구현됩니다.

If your debug level includes D_DURING and you did NOT define SLOW_XMIT_COPY,
the buffers are cleared to a constant value of 0x42 every time the card is
reset (which should only happen when you do an ifconfig up, or when Linux
decides that the driver is broken).  During a transmit, unused parts of the
buffer will be cleared to 0x42 as well.  This is to make it easier to figure
out which bytes are being used by a packet.
디버그 레벨에 D_DURING이 포함되어 있고 SLOW_XMIT_COPY를 정의하지 않은 경우 카드가 재설정 될 때마다 버퍼가 0x42의 일정 값으로 지워집니다 (ifconfig를 실행하거나 Linux가 드라이버가 고장 났다고 결정할 때만 발생해야 함) ). 전송 중에 버퍼의 사용하지 않는 부분도 0x42로 클리어됩니다. 이는 패킷에서 어떤 바이트가 사용되는지 쉽게 파악할 수 있도록하기위한 것입니다.

You can change the debug level without recompiling the kernel by typing:
다음을 입력하여 커널을 다시 컴파일하지 않고 디버그 level을 변경할 수 있습니다.
	
	ifconfig arc0 down metric 1xxx
	/etc/rc.d/rc.inet1
where "xxx" is the debug level you want.  For example, "metric 1015" would put
you at debug level 15.  Debug level 7 is currently the default.
여기서 "xxx"는 원하는 디버그 레벨입니다. 예를 들어, "metric 1015"는 사용자를 디버그 레벨 15에 놓습니다. 디버그 레벨 7은 현재 기본값입니다.

Note that the debug level is (starting with v1.90 ALPHA) a binary
combination of different debug flags; so debug level 7 is really 1+2+4 or
D_NORMAL+D_EXTRA+D_INIT.  To include D_DURING, you would add 16 to this,
resulting in debug level 23.
디버그 레벨은 다른 디버그 플래그의 바이너리 조합 (v1.90 ALPHA로 시작)입니다. 따라서 디버그 레벨 7은 실제로 1 + 2 + 4 또는 D_NORMAL + D_EXTRA + D_INIT입니다. D_DURING을 포함 시키려면 16을 추가하면 디버그 레벨 23이됩니다.

If you don't understand that, you probably don't want to know anyway. 
E-mail me about your problem.
이해가되지 않으면 어쨌든 알고 싶지 않을 것입니다.
문제에 대해 이메일로 보내주십시오.

I want to send money: what now?
-------------------------------

Go take a nap or something.  You'll feel better in the morning.
낮잠이나 뭐 좀 가져가. 아침에 기분이 나아질거야.