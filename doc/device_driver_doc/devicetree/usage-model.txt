Linux and the Device Tree
리눅스와 디바이스 트리
-------------------------

The Linux usage model for device tree data
장치 트리 데이터에 대한 Linux 사용 모델

Author: Grant Likely <grant.likely@secretlab.ca>

This article describes how Linux uses the device tree.  An overview of
the device tree data format can be found on the device tree usage page
at devicetree.org[1].
이 파일는 리눅스가 디바이스 트리를 어떻게 사용하는지 설명한다. 장치 트리 데이터 
형식에 대한 개요는 devicetree.org [1]의 장치 트리 사용 페이지에서 확인할 수 있습니다.

[1] http://devicetree.org/Device_Tree_Usage

The "Open Firmware Device Tree", or simply Device Tree (DT), is a data
structure and language for describing hardware.  More specifically, it
is a description of hardware that is readable by an operating system
so that the operating system doesn't need to hard code details of the
machine.
"Open Firmware Device Tree"또는 단순히 Device Tree (DT)는 하드웨어를 
설명하기위한 데이터 구조 및 언어입니다. 보다 구체적으로, 이는 운영 체제가
 컴퓨터의 세부 사항을 하드 코딩 할 필요가 없도록 운영 체제에서 읽을 
 수있는 하드웨어에 대한 설명입니다.

Structurally, the DT is a tree, or acyclic graph with named nodes, and
nodes may have an arbitrary number of named properties encapsulating
arbitrary data.  A mechanism also exists to create arbitrary
links from one node to another outside of the natural tree structure.
구조적으로 DT는 명명 된 노드가있는 트리 또는 비순환 그래프이며 노드는 
임의의 데이터를 캡슐화하는 임의의 수의 명명 된 속성을 가질 수 있습니다.
 하나의 노드에서 자연 트리 구조 외부의 임의의 링크를 생성하는 메커니즘도 있습니다.

Conceptually, a common set of usage conventions, called 'bindings',
is defined for how data should appear in the tree to describe typical
hardware characteristics including data busses, interrupt lines, GPIO
connections, and peripheral devices.
개념적으로 '바인딩'이라고하는 일반적인 사용 규칙은 데이터 버스, 인터럽트 라인,
 GPIO 연결 및 주변 장치를 포함하여 일반적인 하드웨어 특성을 설명하기 위해 
 트리에 데이터를 표시하는 방법에 대해 정의됩니다.

As much as possible, hardware is described using existing bindings to
maximize use of existing support code, but since property and node
names are simply text strings, it is easy to extend existing bindings
or create new ones by defining new nodes and properties.  Be wary,
however, of creating a new binding without first doing some homework
about what already exists.  There are currently two different,
incompatible, bindings for i2c busses that came about because the new
binding was created without first investigating how i2c devices were
already being enumerated in existing systems.
가능하면 하드웨어는 기존 바인딩을 사용하여 기존 지원 코드의 사용을 극대화하지만 
속성 및 노드 이름은 텍스트 문자열이므로 기존 노드를 확장하거나 새로운 노드 및 속성을 정의하여 
새로운 바인딩을 쉽게 만들 수 있습니다. 그러나 이미 존재하는 것에 대해 조사를하지 않고 새로운
 바인딩을 만드는 것에 조심하십시오. 새로운 바인딩은 i2c 디바이스가 이미 기존 시스템에서 어떻게
  열거되었는지를 먼저 조사하지 않고 작성 되었기 때문에 현재 두 가지 다른 호환되지 않는 바인딩이 있습니다.

1. History
----------
The DT was originally created by Open Firmware as part of the
communication method for passing data from Open Firmware to a client
program (like to an operating system).  An operating system used the
Device Tree to discover the topology of the hardware at runtime, and
thereby support a majority of available hardware without hard coded
information (assuming drivers were available for all devices).
DT는 원래 Open Firmware에서 클라이언트 프로그램 (운영 체제와 같은)
으로 데이터를 전달하는 통신 방법의 일부로 Open Firmware에서 생성되었습니다. 
운영 체제는 장치 트리를 사용하여 런타임에 하드웨어의 토폴로지를 검색하고 하드 
코딩 된 정보없이 모든 사용 가능한 하드웨어를 지원합니다 (모든 장치에서 드라이버를 사용할 수 있다고 가정).

Since Open Firmware is commonly used on PowerPC and SPARC platforms,
the Linux support for those architectures has for a long time used the
Device Tree.
Open Firmware는 일반적으로 PowerPC 및 SPARC 플랫폼에서 사용되기 때문에 이러한
 아키텍처에 대한 Linux 지원에는 오랫동안 Device Tree가 사용되었습니다.

In 2005, when PowerPC Linux began a major cleanup and to merge 32-bit
and 64-bit support, the decision was made to require DT support on all
powerpc platforms, regardless of whether or not they used Open
Firmware.  To do this, a DT representation called the Flattened Device
Tree (FDT) was created which could be passed to the kernel as a binary
blob without requiring a real Open Firmware implementation.  U-Boot,
kexec, and other bootloaders were modified to support both passing a
Device Tree Binary (dtb) and to modify a dtb at boot time.  DT was
also added to the PowerPC boot wrapper (arch/powerpc/boot/*) so that
a dtb could be wrapped up with the kernel image to support booting
existing non-DT aware firmware.
PowerPC Linux가 주요 정리 작업을 시작하고 32 비트 및 64 비트 지원을 
병합하기 시작했을 때 Open Firmware 사용 여부에 관계없이 모든 powerpc 
플랫폼에서 DT 지원을 요구하는 결정이 내려집니다.. 이를 위해 
FDT (Flattened Device Tree)라는 DT 표현이 생성되어 실제 Open Firmware 구현
 없이도 이진 BLOB로 커널에 전달 될 수 있습니다. U-Boot, kexec 및 기타 부트 로더는
  Device Tree Binary (dtb)를 전달하고 부트시 dtb를 수정하도록 지원하도록 수정되었습니다. 
  DT는 또한 PowerPC 부트 랩퍼 (arch / powerpc / boot / *)에 추가되어 dtb가 커널 이미지로 
  랩핑되어 기존의 비 DT 인식 폄웨어 부팅을 지원합니다.

Some time later, FDT infrastructure was generalized to be usable by
all architectures.  At the time of this writing, 6 mainlined
architectures (arm, microblaze, mips, powerpc, sparc, and x86) and 1
out of mainline (nios) have some level of DT support.
잠시 후 FDT 인프라는 모든 아키텍처에서 사용할 수 있도록 일반화되었습니다.
 이 글을 쓰는 시점에서 6 개의 주요 아키텍처 (arm, microblaze, mips, powerpc,
  sparc, x86)와 mainline (nios) 중 1 개는 DT 지원 수준을 가지고 있습니다.

2. Data Model
2. 데이터 모델
-------------
If you haven't already read the Device Tree Usage[1] page,
then go read it now.  It's okay, I'll wait....
Device Tree Usage [1] 페이지를 아직 읽지 않았다면 지금 읽으십시오.
 괜찮아, 내가 기다릴께 ....

2.1 High Level View
2.1 하이 레벨 보기
-------------------
The most important thing to understand is that the DT is simply a data
structure that describes the hardware.  There is nothing magical about
it, and it doesn't magically make all hardware configuration problems
go away.  What it does do is provide a language for decoupling the
hardware configuration from the board and device driver support in the
Linux kernel (or any other operating system for that matter).  Using
it allows board and device support to become data driven; to make
setup decisions based on data passed into the kernel instead of on
per-machine hard coded selections.
이해해야 할 가장 중요한 점은 DT가 단순히 하드웨어를 설명하는 데이터 
구조라는 점입니다. 마법 같은 것은 없으며 모든 하드웨어 구성 문제가 
마술처럼 사라지는 것은 아닙니다. 리눅스 커널 (또는 다른 운영체제)에서 
보드의 하드웨어 구성과 장치 드라이버 지원을 분리하기위한 언어를 제공합니다.
이를 사용하면 보드 및 장치 지원이 데이터 기반이 될 수 있습니다. 
기계 별 하드 코딩 된 선택 사항 대신 커널에 전달 된 데이터를 기반으로 설정을 결정합니다.

Ideally, data driven platform setup should result in less code
duplication and make it easier to support a wide range of hardware
with a single kernel image.
이상적으로는 데이터 기반 플랫폼 설정으로 인해 코드 중복이 줄어들고 
단일 커널 이미지로 다양한 하드웨어를보다 쉽게 지원할 수 있습니다.

Linux uses DT data for three major purposes:
1) platform identification,
2) runtime configuration, and
3) device population.
Linux는 DT 데이터를 세 가지 주요 용도로 사용합니다.
1) 플랫폼 식별,
2) 런타임 구성 및
3) 장치 인구.

2.2 Platform Identification
2.2 플랫폼 식별
---------------------------

First and foremost, the kernel will use data in the DT to identify the
specific machine.  In a perfect world, the specific platform shouldn't
matter to the kernel because all platform details would be described
perfectly by the device tree in a consistent and reliable manner.
Hardware is not perfect though, and so the kernel must identify the
machine during early boot so that it has the opportunity to run
machine-specific fixups.
우선, 커널은 DT의 데이터를 사용하여 특정 시스템을 식별합니다. 
완벽한 플랫폼에서는 모든 플랫폼 세부 정보가 일관되고 안정적인 
방식으로 장치 트리에 완벽하게 설명되므로 특정 플랫폼이 커널과 관련이
없습니다. 하드웨어가 완벽하지는 않으므로 커널은 초기 부팅 중에 컴퓨터를
식별하여 컴퓨터 관련 픽스 업을 실행할 수있는 기회를 제공해야합니다.

In the majority of cases, the machine identity is irrelevant, and the
kernel will instead select setup code based on the machine's core
CPU or SoC.  On ARM for example, setup_arch() in
arch/arm/kernel/setup.c will call setup_machine_fdt() in
arch/arm/kernel/devtree.c which searches through the machine_desc
table and selects the machine_desc which best matches the device tree
data.  It determines the best match by looking at the 'compatible'
property in the root device tree node, and comparing it with the
dt_compat list in struct machine_desc (which is defined in
arch/arm/include/asm/mach/arch.h if you're curious).
대개의 경우, 컴퓨터 ID는 관련이 없으며 커널은 대신 컴퓨터의 코어 
CPU 또는 SoC를 기반으로 설치 코드를 선택합니다. ARM의 경우 예를 들어
 arch / arm / kernel / setup.c의 setup_arch ()는 machine_desc 테이블을 검색하고 
 장치 트리 데이터와 가장 일치하는 machine_desc를 선택하는 arch / arm / kernel / devtree.c의 
 setup_machine_fdt ()를 호출합니다. . 루트 디바이스 트리 노드의 'compatible'속성을보고 
 struct machine_desc (arch / arm / include / asm / mach / arch.h에 정의되어있는 경우)의 
 dt_compat 목록과 비교하여 가장 일치하는 항목을 결정합니다.

The 'compatible' property contains a sorted list of strings starting
with the exact name of the machine, followed by an optional list of
boards it is compatible with sorted from most compatible to least.  For
example, the root compatible properties for the TI BeagleBoard and its
successor, the BeagleBoard xM board might look like, respectively:
'compatible'속성은 컴퓨터의 정확한 이름으로 시작하는 문자열의 정렬 된 목록을
 포함하며 호환성이있는 보드 목록 (선택 사항)이 가장 호환이 가능한 순서대로 정렬됩니다.
  예를 들어, TI BeagleBoard 및 그 후계자 인 BeagleBoard xM 보드의 루트 호환 속성은 각각 
  다음과 같을 수 있습니다.

	compatible = "ti,omap3-beagleboard", "ti,omap3450", "ti,omap3";
	compatible = "ti,omap3-beagleboard-xm", "ti,omap3450", "ti,omap3";

Where "ti,omap3-beagleboard-xm" specifies the exact model, it also
claims that it compatible with the OMAP 3450 SoC, and the omap3 family
of SoCs in general.  You'll notice that the list is sorted from most
specific (exact board) to least specific (SoC family).
"ti, omap3-beagleboard-xm"은 정확한 모델을 지정하는 곳으로 OMAP 3450 SoC
 및 omap3 SoC 제품군과 호환 될 수 있다고 주장합니다. 
 목록은 구체적인 보드 부터 가장 최소한의 SoC 패밀리 로 정렬됨을 알 수 있습니다.


Astute readers might point out that the Beagle xM could also claim
compatibility with the original Beagle board.  However, one should be
cautioned about doing so at the board level since there is typically a
high level of change from one board to another, even within the same
product line, and it is hard to nail down exactly what is meant when one
board claims to be compatible with another.  For the top level, it is
better to err on the side of caution and not claim one board is
compatible with another.  The notable exception would be when one
board is a carrier for another, such as a CPU module attached to a
carrier board.
독창적 인 독자는 Beagle xM이 원래 Beagle 보드와 호환성을 주장 할 수 있음을
 지적한다. 그러나 보드에서 다른 보드로, 일반적으로 동일한 제품 라인 내 에서조차 
 높은 수준의 변화가 있기 때문에 보드 레벨에서 그렇게해야한다는 것에 주의해야 하며,
 보드가 다른 보드와 호환되지 않을 때의 의미를 정확하게 알아내는 것은 어렵습니다 . 
 최상위 레벨에서는 주의의 의미로 오류를 나타내는 것이 좋으며 한 보드가 다른 보드와 호환된다는 뜻이 아닙니다. 
 주목할만한 예외는 하나의 보드가 캐리어 보드에 연결된 CPU 모듈과 같이 다른 보드의 캐리어 인 경우입니다.

One more note on compatible values.  Any string used in a compatible
property must be documented as to what it indicates.  Add
documentation for compatible strings in Documentation/devicetree/bindings.
호환 가능한 값에 대해 한 번 더 유의하십시오. 호환 가능한 속성에 사용 된 문자열은 
해당 속성에 대한 설명이 있어야합니다. Documentation / devicetree / bindings에 호환 
문자열에 대한 설명서를 추가하십시오.

Again on ARM, for each machine_desc, the kernel looks to see if
any of the dt_compat list entries appear in the compatible property.
If one does, then that machine_desc is a candidate for driving the
machine.  After searching the entire table of machine_descs,
setup_machine_fdt() returns the 'most compatible' machine_desc based
on which entry in the compatible property each machine_desc matches
against.  If no matching machine_desc is found, then it returns NULL.
다시 ARM에서 각 machine_desc에 대해 커널은 dt_compat 목록 항목이 호환 
가능한 속성에 표시되는지 확인합니다. 만약 그렇다면, 그 machine_desc는 
기계를 운전할 후보자입니다. machine_descs의 전체 테이블을 검색 
한 후 setup_machine_fdt ()는 각 machine_desc와 일치하는 호환 가능한
속성의 항목을 기반으로 '가장 호환되는'machine_desc를 반환합니다.
일치하는 machine_desc가 없으면 NULL을 반환합니다.

The reasoning behind this scheme is the observation that in the majority
of cases, a single machine_desc can support a large number of boards
if they all use the same SoC, or same family of SoCs.  However,
invariably there will be some exceptions where a specific board will
require special setup code that is not useful in the generic case.
Special cases could be handled by explicitly checking for the
troublesome board(s) in generic setup code, but doing so very quickly
becomes ugly and/or unmaintainable if it is more than just a couple of
cases.
그 이유는 대부분의 동일한 SoC 또는 동일한 SoC 제품군을 
사용하면 단일 machine_desc가 다수의 보드를 지원할 수 있다는 관측입니다.
그러나 특정 보드가 일반적인 경우에 유용하지 않는 특수 설정 코드를 필요로
하는 경우에는 예외가있을 것입니다.특수한 경우는 일반적인 설정 코드에서 
문제가있는 보드를 명시 적으로 확인하여 처리 할 수 있지만 매우 신속하게
 처리하는 것은 단지 두 가지 이상의 경우에 못 생기거나 유지 관리가 불가능 해집니다.(이게 뭔말일까;;;)
결론 : 디바이스 트리 도입하기저전에는 코드가 드러워서 도입하게된 이유를 설명


Instead, the compatible list allows a generic machine_desc to provide
support for a wide common set of boards by specifying "less
compatible" values in the dt_compat list.  In the example above,
generic board support can claim compatibility with "ti,omap3" or
"ti,omap3450".  If a bug was discovered on the original beagleboard
that required special workaround code during early boot, then a new
machine_desc could be added which implements the workarounds and only
matches on "ti,omap3-beagleboard".
대신 호환 가능한 목록을 사용하면 일반 machine_desc가 dt_compat 목록에
"호환성이 낮은"값을 지정하여 광범위한 보드 세트를 지원할 수 있습니다.
위의 예에서 일반 보드 지원은 "ti, omap3"또는 "ti, omap3450"과
호환성을 주장 할 수 있습니다. 초기 부팅시 특수한 해결 코드가 필요한 
원래 비글 보드에서 버그가 발견 된 경우 해결 방법을 구현하고 
"ti, omap3-beagleboard"에서만 일치하는 새 machine_desc를 추가 할 수 있습니다.

PowerPC uses a slightly different scheme where it calls the .probe()
hook from each machine_desc, and the first one returning TRUE is used.
However, this approach does not take into account the priority of the
compatible list, and probably should be avoided for new architecture
support.
PowerPC는 각각의 machine_desc에서 .probe () 후크를 호출하여 첫 ​​번째가 TRUE를 반환합니다.
그러나 이 방법은 호환 목록의 우선 순위를 고려하지 않으므로 새로운 아키텍처 지원을 위해 피해야합니다.

2.3 Runtime configuration
-------------------------
In most cases, a DT will be the sole method of communicating data from
firmware to the kernel, so also gets used to pass in runtime and
configuration data like the kernel parameters string and the location
of an initrd image.
대부분 DT는 펌웨어에서 커널로 데이터를 전달하는 유일한 방법이므로 
커널 매개 변수 문자열 및 initrd 이미지의 위치와 같은 런타임 및 구성 데이터를 
전달하는 데에도 사용됩니다.

Most of this data is contained in the /chosen node, and when booting
Linux it will look something like this:
이 데이터의 대부분은 / 선택된 노드에 포함되어 있으며, 
리눅스를 부팅 할 때 다음과 같이 보일 것입니다 :

	chosen {
		bootargs = "console=ttyS0,115200 loglevel=8";
		initrd-start = <0xc8000000>;
		initrd-end = <0xc8200000>;
	};

The bootargs property contains the kernel arguments, and the initrd-*
properties define the address and size of an initrd blob.  Note that
initrd-end is the first address after the initrd image, so this doesn't
match the usual semantic of struct resource.  The chosen node may also
optionally contain an arbitrary number of additional properties for
platform-specific configuration data.
bootargs 등록 정보는 커널 인수를 포함하고 initrd- * 등록 정보는 initrd blob의
주소와 크기를 정의합니다. initrd-end는 initrd 이미지 다음의 첫 번째 주소이므로 
struct 리소스의 일반적인 의미와 일치하지 않습니다. 선택된 노드는 플랫폼 특정
구성 데이터에 대한 임의의 수의 추가 등록 정보를 선택적으로 포함 할 수도 있습니다.

During early boot, the architecture setup code calls of_scan_flat_dt()
several times with different helper callbacks to parse device tree
data before paging is setup.  The of_scan_flat_dt() code scans through
the device tree and uses the helpers to extract information required
during early boot.  Typically the early_init_dt_scan_chosen() helper
is used to parse the chosen node including kernel parameters,
early_init_dt_scan_root() to initialize the DT address space model,
and early_init_dt_scan_memory() to determine the size and
location of usable RAM.
초기 부팅 중에 아키텍처 설정 코드는 of_scan_flat_dt ()를 여러 번 
호출하고 다른 헬퍼 콜백을 호출하여 페이징이 설정되기 전에 장치 트리
데이터를 구문 분석합니다. of_scan_flat_dt () 코드는 장치 트리를
검색하여 초기 부팅 중에 필요한 정보를 추출하는 데 사용합니다. 
일반적으로 early_init_dt_scan_chosen () 도우미는 커널 매개 변수, 
early_init_dt_scan_root (), DT 주소 공간 모델 초기화 및 early_init_dt_scan_memory () 등의
선택된 노드를 구문 분석하여 사용 가능한 RAM의 크기와 위치를 결정하는 데 사용됩니다.

On ARM, the function setup_machine_fdt() is responsible for early
scanning of the device tree after selecting the correct machine_desc
that supports the board.
ARM에서 setup_machine_fdt () 함수는 보드를 지원하는 올바른 machine_desc를
선택한 후 장치 트리의 초기 스캔을 담당합니다. 

2.4 Device population
---------------------
After the board has been identified, and after the early configuration data
has been parsed, then kernel initialization can proceed in the normal
way.  At some point in this process, unflatten_device_tree() is called
to convert the data into a more efficient runtime representation.
This is also when machine-specific setup hooks will get called, like
the machine_desc .init_early(), .init_irq() and .init_machine() hooks
on ARM.  The remainder of this section uses examples from the ARM
implementation, but all architectures will do pretty much the same
thing when using a DT.
보드가 식별되고 초기 설정 데이터를 분석 한 후, 커널의 초기화는 일반적인 방식으로 진행됩니다.
이 과정의 어느 시점에서 데이터를 보다 효율적으로 런타임 표현으로 변환하기 위해 unflatten_device_tree ()가 
호출됩니다. ARM의 machine_desc .init_early (), .init_irq () 및 .init_machine () 후크와 같이 컴퓨터 
별 설치 후크가 호출 될 때도 마찬가지입니다. 이 섹션의 나머지 부분에서는 ARM 구현의 예를 
사용하고 있습니다 만, 모든 아키텍처는 DT를 사용하는 경우와 거의 동일한 작업을 수행합니다.

As can be guessed by the names, .init_early() is used for any machine-
specific setup that needs to be executed early in the boot process,
and .init_irq() is used to set up interrupt handling.  Using a DT
doesn't materially change the behaviour of either of these functions.
If a DT is provided, then both .init_early() and .init_irq() are able
to call any of the DT query functions (of_* in include/linux/of*.h) to
get additional data about the platform.
이름으로 짐작할 수 있듯이 .init_early ()는 부팅 프로세스 초기에 실행해야하는 
컴퓨터 관련 설정에 사용되며 .init_irq ()는 인터럽트 처리를 설정하는 데 사용됩니다. 
DT를 사용하더라도 기능 중 하나의 동작이 실질적으로 변경되지는 않습니다. 
DT가 제공되면 .init_early () 및 .init_irq ()는 플랫폼에 대한 추가 데이터를 얻기
위해 DT 쿼리 함수 (* .h의 include / linux / of_ *)를 호출 할 수 있습니다.

The most interesting hook in the DT context is .init_machine() which
is primarily responsible for populating the Linux device model with
data about the platform.  Historically this has been implemented on
embedded platforms by defining a set of static clock structures,
platform_devices, and other data in the board support .c file, and
registering it en-masse in .init_machine().  When DT is used, then
instead of hard coding static devices for each platform, the list of
devices can be obtained by parsing the DT, and allocating device
structures dynamically.
DT 컨텍스트에서 가장 흥미로운 점은 .init_machine ()입니다. 주로 리눅스 
장치 모델에 플랫폼에 대한 데이터를 채우는 역할을합니다. 역사적으로 이는 
임베디드 플랫폼에서 보드 클럭 구조, platform_devices 및 기타 데이터를 보드
지원 .c 파일에 정의하고 .init_machine ()에 en-masse를 등록하여 구현되었습니다. 
DT를 사용하면 각 플랫폼에 대한 정적 장치를 하드 코딩하는 대신 DT를 구문 분석하고 
장치 구조를 동적으로 할당하여 장치 목록을 얻을 수 있습니다.

The simplest case is when .init_machine() is only responsible for
registering a block of platform_devices.  A platform_device is a concept
used by Linux for memory or I/O mapped devices which cannot be detected
by hardware, and for 'composite' or 'virtual' devices (more on those
later).  While there is no 'platform device' terminology for the DT,
platform devices roughly correspond to device nodes at the root of the
tree and children of simple memory mapped bus nodes.
가장 간단한 경우는 .init_machine ()이 platform_devices 블록을 등록하는 
경우에만 해당됩니다. platform_device는 메모리 또는 I / O 매핑 된 디바이스 용으로 
Linux에서 사용되는 개념으로 하드웨어 나 '복합'디바이스 또는 '가상'디바이스에서 감지 
할 수 없습니다. DT에 대한 '플랫폼 장치'용어는 없지만 플랫폼 장치는 대략 트리의 
루트에있는 장치 노드와 간단한 메모리 매핑 버스 노드의 하위 노드에 해당합니다.

About now is a good time to lay out an example.  Here is part of the
device tree for the NVIDIA Tegra board.
지금은 좋은 예를 들려주는 시간입니다. 다음은 NVIDIA Tegra 보드 용 장치 트리의 일부입니다.

/{
	compatible = "nvidia,harmony", "nvidia,tegra20";
	#address-cells = <1>;
	#size-cells = <1>;
	interrupt-parent = <&intc>;

	chosen { };
	aliases { };

	memory {
		device_type = "memory";
		reg = <0x00000000 0x40000000>;
	};

	soc {
		compatible = "nvidia,tegra20-soc", "simple-bus";
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		intc: interrupt-controller@50041000 {
			compatible = "nvidia,tegra20-gic";
			interrupt-controller;
			#interrupt-cells = <1>;
			reg = <0x50041000 0x1000>, < 0x50040100 0x0100 >;
		};

		serial@70006300 {
			compatible = "nvidia,tegra20-uart";
			reg = <0x70006300 0x100>;
			interrupts = <122>;
		};

		i2s1: i2s@70002800 {
			compatible = "nvidia,tegra20-i2s";
			reg = <0x70002800 0x100>;
			interrupts = <77>;
			codec = <&wm8903>;
		};

		i2c@7000c000 {
			compatible = "nvidia,tegra20-i2c";
			#address-cells = <1>;
			#size-cells = <0>;
			reg = <0x7000c000 0x100>;
			interrupts = <70>;

			wm8903: codec@1a {
				compatible = "wlf,wm8903";
				reg = <0x1a>;
				interrupts = <347>;
			};
		};
	};

	sound {
		compatible = "nvidia,harmony-sound";
		i2s-controller = <&i2s1>;
		i2s-codec = <&wm8903>;
	};
};

At .init_machine() time, Tegra board support code will need to look at
this DT and decide which nodes to create platform_devices for.
However, looking at the tree, it is not immediately obvious what kind
of device each node represents, or even if a node represents a device
at all.  The /chosen, /aliases, and /memory nodes are informational
nodes that don't describe devices (although arguably memory could be
considered a device).  The children of the /soc node are memory mapped
devices, but the codec@1a is an i2c device, and the sound node
represents not a device, but rather how other devices are connected
together to create the audio subsystem.  I know what each device is
because I'm familiar with the board design, but how does the kernel
know what to do with each node?
.init_machine () 시간에, Tegra 보드 지원 코드는이 DT를보고 platform_devices를 작성할 노드를 결정해야합니다. 
그러나 트리를 보면 각 노드가 어떤 종류의 장치를 나타내는 지 또는 노드가 장치를 전혀 나타내는 지 여부는 쉽게 확인할 수 없습니다.
/ selected, / aliases 및 / memory 노드는 escribe devices를 설명하지 않는 정보 노드입니다 (물론 메모리는 장치로 간주 될 수 있지만). 

The trick is that the kernel starts at the root of the tree and looks
for nodes that have a 'compatible' property.  First, it is generally
assumed that any node with a 'compatible' property represents a device
of some kind, and second, it can be assumed that any node at the root
of the tree is either directly attached to the processor bus, or is a
miscellaneous system device that cannot be described any other way.
For each of these nodes, Linux allocates and registers a
platform_device, which in turn may get bound to a platform_driver.
트릭은 커널이 트리의 루트에서 시작하여 'compatible'속성을 가진 노드를 찾는다는 것입니다.
첫째로, '호환'속성을 갖는 임의의 노드가 어떤 종류의 장치를 나타내는 것으로 가정하고, 
둘째, 트리의 루트에있는 임의의 노드가 프로세서 버스에 직접 부착되거나 또는 다른 한편으로는
기술되지 않은 기타 시스템 시스템이라고 가정 할 수있다. 
이들 각 노드에 대해 Linux는 platform_device를 할당하고 등록하며, platform_device는 platform_driver에 바인딩 될 수 있습니다.

Why is using a platform_device for these nodes a safe assumption?
Well, for the way that Linux models devices, just about all bus_types
assume that its devices are children of a bus controller.  For
example, each i2c_client is a child of an i2c_master.  Each spi_device
is a child of an SPI bus.  Similarly for USB, PCI, MDIO, etc.  The
same hierarchy is also found in the DT, where I2C device nodes only
ever appear as children of an I2C bus node.  Ditto for SPI, MDIO, USB,
etc.  The only devices which do not require a specific type of parent
device are platform_devices (and amba_devices, but more on that
later), which will happily live at the base of the Linux /sys/devices
tree.  Therefore, if a DT node is at the root of the tree, then it
really probably is best registered as a platform_device.
왜 이러한 노드에 대해 platform_device를 사용하는 것이 안전한 가정입니까?
글쎄, 리눅스가 디바이스를 모델링하는 방식으로 모든 bus_type은 디바이스가 
버스 컨트롤러의 자식이라고 가정한다. 예를 들어, 각 i2c_client는 i2c_master의 
하위입니다. 각 spi_device는 SPI 버스의 하위 노드입니다. 마찬가지로 USB, PCI, MDIO 
등도 마찬가지입니다. I2C 디바이스 노드가 I2C 버스 노드의 하위 노드로만 나타나는 
DT에서도 동일한 계층 구조가 발견됩니다. SPI, MDIO, USB 등의 Ditto 특정 유형의 상위 장치를
필요로하지 않는 유일한 장치는 platform_devices (및 amba_devices이지만 나중에는 더 자세히
설명합니다)이며 Linux / sys / devicestree의 기반에 행복하게 살 것입니다 . 그러므로, 
DT 노드가 트리의 루트에 있다면, 아마도 실제로 platform_device로 등록하는 것이 가장 좋습니다.

Linux board support code calls of_platform_populate(NULL, NULL, NULL, NULL)
to kick off discovery of devices at the root of the tree.  The
parameters are all NULL because when starting from the root of the
tree, there is no need to provide a starting node (the first NULL), a
parent struct device (the last NULL), and we're not using a match
table (yet).  For a board that only needs to register devices,
.init_machine() can be completely empty except for the
of_platform_populate() call.
리눅스 보드는 트리의 루트에서 디바이스 발견을 시작하기 위해 of_platform_populate (NULL, NULL, NULL, NULL) 코드 호출을 지원합니다. 
트리의 루트에서 시작할 때 시작 노드 (첫 번째 NULL), 부모 struct 장치 (마지막 NULL) 및 일치 테이블을 사용하지 않아도되므로 매개 변수가 (아직?)모두 NULL입니다. 
 장치 등록 만 필요한 보드의 경우 .init_machine ()은 of_platform_populate () 호출을 제외하고 완전히 비어있을 수 있습니다.

In the Tegra example, this accounts for the /soc and /sound nodes, but
what about the children of the SoC node?  Shouldn't they be registered
as platform devices too?  For Linux DT support, the generic behaviour
is for child devices to be registered by the parent's device driver at
driver .probe() time.  So, an i2c bus device driver will register a
i2c_client for each child node, an SPI bus driver will register
its spi_device children, and similarly for other bus_types.
According to that model, a driver could be written that binds to the
SoC node and simply registers platform_devices for each of its
children.  The board support code would allocate and register an SoC
device, a (theoretical) SoC device driver could bind to the SoC device,
and register platform_devices for /soc/interrupt-controller, /soc/serial,
/soc/i2s, and /soc/i2c in its .probe() hook.  Easy, right?
Tegra 예제에서 이것은 / soc 및 / sound 노드를 설명하지만 SoC 노드의 하위 노드는 무엇입니까? 
그들은 플랫폼 장치로도 등록되어서는 안됩니까? Linux DT 지원의 경우 일반적인 동작은 부모 장치 
드라이버가 .probe () 드라이버 시간에 자식 장치를 등록하는 것입니다. 따라서 i2c 버스 장치 드라이버는 
각 자식 노드에 대해 i2c_client를 등록하고 SPI 버스 드라이버는 spi_device 자식을 등록하며 다른 bus_type에도 
마찬가지로 등록합니다. 이 모델에 따르면, SoC 노드에 바인딩하고 각 자식에 대해 platform_devices를 등록하는 
드라이버를 작성할 수 있습니다. 보드 지원 코드는 SoC 장치를 할당하고 등록하며 (이론적 으로) SoC 장치 드라이버는 
SoC 장치에 바인딩 할 수 있으며 / soc / interrupt-controller, / soc / serial, / soc / i2s 에 platform_devices를 
등록 할 수 있습니다. / soc/ i2c는 .probe () 후크에 있습니다. 참 쉽죠?

Actually, it turns out that registering children of some
platform_devices as more platform_devices is a common pattern, and the
device tree support code reflects that and makes the above example
simpler.  The second argument to of_platform_populate() is an
of_device_id table, and any node that matches an entry in that table
will also get its child nodes registered.  In the Tegra case, the code
can look something like this:
실제로, 일부 platform_devices의 자식을 더 많은 platform_devices로 등록하는 것이 
일반적인 패턴이며, 장치 트리 지원 코드는 이를 반영하고 위의 예를 더 단순하게 만듭니다.
of_platform_populate ()의 두 번째 인수는 of_device_id 테이블이며 해당 테이블의 항목과 
일치하는 모든 노드는 해당 하위 노드도 등록됩니다. Tegra의 경우 코드는 다음과 같이 보일 수 있습니다.

static void __init harmony_init_machine(void)
{
	/* ... */
	of_platform_populate(NULL, of_default_bus_match_table, NULL, NULL);
}

"simple-bus" is defined in the ePAPR 1.0 specification as a property
meaning a simple memory mapped bus, so the of_platform_populate() code
could be written to just assume simple-bus compatible nodes will
always be traversed.  However, we pass it in as an argument so that
board support code can always override the default behaviour.

[Need to add discussion of adding i2c/spi/etc child devices]
"simple-bus"는 ePAPR 1.0 사양에서 간단한 메모리 매핑 버스를 의미하는 속성으로
정의되므로 for_platform_populate () 코드는 단순 버스 호환 노드가 항상 통과하는 것으로
가정하여 작성 될 수 있습니다. 그러나 보드 지원 코드가 항상 기본 동작을 무시할 수 있도록 인수로 전달합니다.
[i2c / spi / etc 하위 장치 추가에 대한 토론 추가 필요]

Appendix A: AMBA devices
------------------------

ARM Primecells are a certain kind of device attached to the ARM AMBA
bus which include some support for hardware detection and power
management.  In Linux, struct amba_device and the amba_bus_type is
used to represent Primecell devices.  However, the fiddly bit is that
not all devices on an AMBA bus are Primecells, and for Linux it is
typical for both amba_device and platform_device instances to be
siblings of the same bus segment.
ARM Primecell은 하드웨어 감지 및 전원 관리에 대한 지원을 포함하는 ARM AMBA 버스에 
연결된 특정 종류의 장치입니다. Linux에서 구조체 amba_device 및 amba_bus_type은 
Primecell 장치를 나타내는 데 사용됩니다. 그러나 AMBA 버스의 모든 장치가 Primecell 인
 것은 아니며 Linux의 경우 amba_device 및 platform_device 인스턴스 모두가 동일한 버스 
 세그먼트의 형제가되는 것이 일반적입니다.

When using the DT, this creates problems for of_platform_populate()
because it must decide whether to register each node as either a
platform_device or an amba_device.  This unfortunately complicates the
device creation model a little bit, but the solution turns out not to
be too invasive.  If a node is compatible with "arm,amba-primecell", then
of_platform_populate() will register it as an amba_device instead of a
platform_device.
DT를 사용하면 각 노드를 platform_device 또는 amba_device 중 하나로 등록할지
여부를 결정해야하기 때문에 of_platform_populate ()에 문제가 발생합니다. 
하지만 안타깝게도 장치 생성 모델이 조금 복잡해졌지만 솔루션이 너무 복잡하지는 않습니다.
노드가 "arm, amba-primecell"과 호환되면 of_platform_populate ()는이를 platform_device 대신 amba_device로 등록합니다.