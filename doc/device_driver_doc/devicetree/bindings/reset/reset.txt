= Reset Signal Device Tree Bindings =

This binding is intended to represent the hardware reset signals present
internally in most IC (SoC, FPGA, ...) designs. Reset signals for whole
standalone chips are most likely better represented as GPIOs, although there
are likely to be exceptions to this rule.

Hardware blocks typically receive a reset signal. This signal is generated by
a reset provider (e.g. power management or clock module) and received by a
reset consumer (the module being reset, or a module managing when a sub-
ordinate module is reset). This binding exists to represent the provider and
consumer, and provide a way to couple the two together.

A reset signal is represented by the phandle of the provider, plus a reset
specifier - a list of DT cells that represents the reset signal within the
provider. The length (number of cells) and semantics of the reset specifier
are dictated by the binding of the reset provider, although common schemes
are described below.

A word on where to place reset signal consumers in device tree: It is possible
in hardware for a reset signal to affect multiple logically separate HW blocks
at once. In this case, it would be unwise to represent this reset signal in
the DT node of each affected HW block, since if activated, an unrelated block
may be reset. Instead, reset signals should be represented in the DT node
where it makes most sense to control it; this may be a bus node if all
children of the bus are affected by the reset signal, or an individual HW
block node for dedicated reset signals. The intent of this binding is to give
appropriate software access to the reset signals in order to manage the HW,
rather than to slavishly enumerate the reset signal that affects each HW
block.

= Reset Signal Device Tree Bindings =

이 바인딩은 대부분의 IC (SoC, FPGA, ...) 설계에 내부적으로 존재하는 하드웨어 리셋 신호를 나타 내기위한 것이다. whole standalone chips에 대한 리셋 신호는이 규칙에 대한 예외가있을지라도 GPIO로 표시 될 가능성이 높습니다.

하드웨어 블록은 일반적으로 리셋 신호를 수신합니다. 이 신호는 리셋 공급자 (예 : e.g 전원 관리 또는 클럭 모듈)에 의해 생성되고 리셋 소비자 (리셋되는 모듈 또는 하위 모듈이 리셋 될 때 관리되는 모듈)에 의해 수신됩니다. 이 바인딩은 공급자와 소비자를 나타내며 둘을 결합하는 방법을 제공합니다.

리셋 신호는 공급자의 phandle 과 리셋 지정자- 공급자 내의 리셋 신호를 나타내는 DT 셀 목록 로 표현됩니다. 리셋 지정자의 길이 (셀의 수)와 의미는 리셋 공급자의 바인딩에 의해 결정되지만 일반적인 schemes는 아래에 설명되어 있습니다

장치 트리에서 리셋 신호 소비자를 배치 할 위치에 대한 단어 : 하드웨어에서 리셋 신호가 multiple logically 로 분리 된 HW 블록에 동시에 적용될 수 있습니다. 이 경우 영향받은 각 HW 블록의 DT 노드에서 재설정 신호를 나타내는 것이 현명하지 않을 것입니다. 그이유는 활성화 된 경우 무관 한 블록이 재설정 될 수 있기 때문입니다. 대신 리셋 신호는 제어하기에 가장 적합한 DT 노드에 표시되어야합니다. 이것은 버스의 모든 children이 리셋 신호에 의해 영향을받는다면 버스 노드 일 수도 있고, 전용 리셋 신호들을위한 개별 HW 블록 노드 일 수도있다. 이 바인딩의 목적은 각 HW 블록에 영향을 미치는 리셋 신호를 slavishly 으로 열거하기보다는 HW를 관리하기 위해 리셋 신호에 적절한 소프트웨어 액세스를 제공하는 것입니다.


= Reset providers =

Required properties:
#reset-cells:	Number of cells in a reset specifier; Typically 0 for nodes
		with a single reset output and 1 for nodes with multiple
		reset outputs.

= 공급자 재설정 =

필수 속성 :
# reset-cells : 재설정 지정자의 셀 수. 단일 리셋 출력이있는 노드의 경우 일반적으로 0이고 여러 리셋 출력이있는 노드의 경우 1입니다.



For example:

	rst: reset-controller {
		#reset-cells = <1>;
	};

= Reset consumers =

Required properties:
resets:		List of phandle and reset specifier pairs, one pair
		for each reset signal that affects the device, or that the
		device manages. Note: if the reset provider specifies '0' for
		#reset-cells, then only the phandle portion of the pair will
		appear.

Optional properties:
reset-names:	List of reset signal name strings sorted in the same order as
		the resets property. Consumers drivers will use reset-names to
		match reset signal names with reset specifiers.

필수 속성 :
리셋 : List of phandle 및 리셋 지정자 쌍 , 장치에 영향을주는 각 리셋 신호에 대한 한 쌍 또는 장치가 관리하는 쌍. 
참고 : 재설정 공급자가 # reset-cells에 '0'을 지정하면 쌍의 phandle 부분 만 나타납니다.

선택적 속성 :
reset-names : List of reset signal name strings 은 reset 속성과 같은 순서로 정렬됩니다. 
소비자 드라이버는 reset-names을 사용하여 재설정 신호 이름을 재설정 지정자와 비교합니다.





For example:

	device {
		resets = <&rst 20>;
		reset-names = "reset";
	};

This represents a device with a single reset signal named "reset".

	bus {
		resets = <&rst 10> <&rst 11> <&rst 12> <&rst 11>;
		reset-names = "i2s1", "i2s2", "dma", "mixer";
	};

This represents a bus that controls the reset signal of each of four sub-
ordinate devices. Consider for example a bus that fails to operate unless no
child device has reset asserted.
이것은 4 개의 각 수직 소자의 리셋 신호를 제어하는 버스를 나타냅니다. 예를 들어 자식 장치가 리셋되었다고 선언하지 않으면 작동하지 않는 버스를 고려하십시오.