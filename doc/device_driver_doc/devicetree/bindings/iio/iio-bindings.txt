This binding is derived from clock bindings, and based on suggestions
from Lars-Peter Clausen [1].

Sources of IIO channels can be represented by any node in the device
tree. Those nodes are designated as IIO providers. IIO consumer
nodes use a phandle and IIO specifier pair to connect IIO provider
outputs to IIO inputs. Similar to the gpio specifiers, an IIO
specifier is an array of one or more cells identifying the IIO
output on a device. The length of an IIO specifier is defined by the
value of a #io-channel-cells property in the IIO provider node.

[1] http://marc.info/?l=linux-iio&m=135902119507483&w=2

==IIO providers==

Required properties:
#io-channel-cells: Number of cells in an IIO specifier; Typically 0 for nodes
		   with a single IIO output and 1 for nodes with multiple
		   IIO outputs.

Example for a simple configuration with no trigger:

	adc: voltage-sensor@35 {
		compatible = "maxim,max1139";
		reg = <0x35>;
		#io-channel-cells = <1>;
	};

Example for a configuration with trigger:

	adc@35 {
		compatible = "some-vendor,some-adc";
		reg = <0x35>;

		adc1: iio-device@0 {
			#io-channel-cells = <1>;
			/* other properties */
		};
		adc2: iio-device@1 {
			#io-channel-cells = <1>;
			/* other properties */
		};
	};

==IIO consumers==

Required properties:
io-channels:	List of phandle and IIO specifier pairs, one pair
		for each IIO input to the device. Note: if the
		IIO provider specifies '0' for #io-channel-cells,
		then only the phandle portion of the pair will appear.

Optional properties:
io-channel-names:
		List of IIO input name strings sorted in the same
		order as the io-channels property. Consumers drivers
		will use io-channel-names to match IIO input names
		with IIO specifiers.
io-channel-ranges:
		Empty property indicating that child nodes can inherit named
		IIO channels from this node. Useful for bus nodes to provide
		and IIO channel to their children.

For example:

	device {
		io-channels = <&adc 1>, <&ref 0>;
		io-channel-names = "vcc", "vdd";
	};

This represents a device with two IIO inputs, named "vcc" and "vdd".
The vcc channel is connected to output 1 of the &adc device, and the
vdd channel is connected to output 0 of the &ref device.

==Example==

	adc: max1139@35 {
		compatible = "maxim,max1139";
		reg = <0x35>;
		#io-channel-cells = <1>;
	};

	...

	iio_hwmon {
		compatible = "iio-hwmon";
		io-channels = <&adc 0>, <&adc 1>, <&adc 2>,
			<&adc 3>, <&adc 4>, <&adc 5>,
			<&adc 6>, <&adc 7>, <&adc 8>,
			<&adc 9>;
	};

	some_consumer {
		compatible = "some-consumer";
		io-channels = <&adc 10>, <&adc 11>;
		io-channel-names = "adc1", "adc2";
	};


/*


이 바인딩은 클럭 바인딩에서 파생되며 Lars-Peter Clausen [1]의 제안을 기반으로합니다.

IIO 채널의 소스는 장치 트리의 모든 노드로 나타낼 수 있습니다. 이러한 노드는 IIO 제공자로 지정됩니다. IIO 소비자 노드는 phandle과 IIO 지정자 쌍을 사용하여 IIO 제공자 출력을 IIO 입력에 연결합니다. gpio 지정자와 마찬가지로 IIO 지정자는 장치에서 IIO 출력을 식별하는 하나 이상의 셀 배열입니다. IIO 지정자의 길이는 IIO 공급자 노드의 # io-channel-cells 속성 값에 의해 정의됩니다.

[1] http://marc.info/?l=linux-iio&m=135902119507483&w=2

== IIO 제공자 ==

필수 속성 :
# io-channel-cells : IIO 지정자의 셀 수. 일반적으로 노드의 경우 0
단일 IIO 출력과 다중 IIO 출력을 갖는 노드에 대해 1이다.

트리거가없는 간단한 구성의 예 :

	adc: voltage-sensor@35 {
		compatible = "maxim,max1139";
		reg = <0x35>;
		#io-channel-cells = <1>;
	};

트리거가있는 구성의 예 :


	adc@35 {
		compatible = "some-vendor,some-adc";
		reg = <0x35>;

		adc1: iio-device@0 {
			#io-channel-cells = <1>;
			/* other properties */
		};
		adc2: iio-device@1 {
			#io-channel-cells = <1>;
			/* other properties */
		};
	};


== IIO 소비자 ==

필수 속성 :
io-channels : 장치에 대한 각 IIO 입력에 대해 한 쌍씩있는 phandle 및 IIO 지정자 쌍 목록입니다. 참고 : IIO 제공자가 # io- 채널 셀에 '0'을 지정하면,
쌍의 phandle 부분 만 나타납니다.

선택적 속성 :
io-channel-names :
io-channels 속성과 같은 순서로 정렬 된 IIO 입력 이름 문자열 목록입니다. 
소비자 드라이버는 IIO 입력 이름과 IIO 지정자를 일치시키기 위해 io-channel-names를 사용합니다.

io-channel-ranges :
아이 노드가이 노드로부터 지정된 IIO 채널을 상속 할 수있는 것을 나타내는 empty property입니다. 
버스 노드가 자녀에게 IIO 채널을 제공하는 데 유용합니다.

For example:

	device {
		io-channels = <&adc 1>, <&ref 0>;
		io-channel-names = "vcc", "vdd";
	};


이것은 "vcc"및 "vdd"라는 두 개의 IIO 입력을 갖는 장치를 나타냅니다.
vcc 채널은 & adc 장치의 출력 1에 연결되고 vdd 채널은 & ref 장치의 출력 0에 연결됩니다.


==Example==

	adc: max1139@35 {
		compatible = "maxim,max1139";
		reg = <0x35>;
		#io-channel-cells = <1>;
	};

	...

	iio_hwmon {
		compatible = "iio-hwmon";
		io-channels = <&adc 0>, <&adc 1>, <&adc 2>,
			<&adc 3>, <&adc 4>, <&adc 5>,
			<&adc 6>, <&adc 7>, <&adc 8>,
			<&adc 9>;
	};

	some_consumer {
		compatible = "some-consumer";
		io-channels = <&adc 10>, <&adc 11>;
		io-channel-names = "adc1", "adc2";
	};


*/


