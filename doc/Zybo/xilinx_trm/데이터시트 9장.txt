DMA Controller



9.1 Introduction


DMA 컨트롤러 (DMAC)는 CPU_2x 클록 속도로 작동하는 64 비트 AXI 마스터 인터페이스를 사용하여

시스템 메모리와 PL 주변 장치간에 DMA 데이터 전송을 수행합니다. 전송은

DMA 명령 실행 엔진에 의해 제어된다. DMA 엔진은 작은 명령어 세트에서 실행됩니다.

DMA 전송을 지정하는 융통성있는 방법을 제공합니다. 이 방법은 더 큰 유연성을 제공합니다.

DMA 컨트롤러 메서드의 기능보다

DMA 엔진을위한 프로그램 코드는 소프트웨어에 의해 시스템 메모리의 영역에 기록된다.

AXI 마스터 인터페이스를 사용하여 컨트롤러가 액세스합니다. DMA 엔진 명령 세트는

시스템을 제어하기위한 DMA 전송 및 관리 명령에 대한 지침

컨트롤러는 최대 8 개의 DMA 채널로 구성 될 수 있습니다. 각 채널은

스레드는 DMA 엔진의 프로세서에서 실행됩니다. DMA 스레드가로드 또는 저장소를 실행할 때

인스트럭션에서 DMA 엔진은 메모리 요청을 관련 읽기 또는 쓰기 대기열로 푸시합니다. 그만큼

DMA 컨트롤러는 이러한 대기열을 사용하여 AXI 읽기 / 쓰기 트랜잭션을 버퍼링합니다. 컨트롤러에는

다중 채널 FIFO (MFIFO)는 DMA 전송 중에 데이터를 저장합니다. 실행중인 프로그램 코드

DMA 엔진 프로세서는 MFIFO가 가변 심도 병렬 FIFO 집합을 포함하는 것으로 간주합니다.

DMA 읽기 및 쓰기 트랜잭션. 프로그램 코드는 MFIFO를 관리하여 총 깊이

모든 DMA FIFO의 1,024 바이트 MFIFO를 초과하지 않는다.

DMAC는 프로세서 개입없이 많은 양의 데이터를 이동할 수 있습니다. 소스 및

대상 메모리는 시스템의 어느 위치 에나있을 수 있습니다 (PS 또는 PL). DMAC의 메모리 맵

DDR, OCM, 선형 어드레싱 Quad-SPI 읽기 메모리, SMC 메모리 및 PL 주변 장치 또는

M_GP_AXI 인터페이스에 연결된 메모리.

PS 메모리를 사용하는 전송을위한 흐름 제어 방법은 AXI 상호 연결을 사용합니다. PL로 액세스

주변 장치는 AXI 흐름 제어 또는 DMAC의 PL 주변 장치 요청 인터페이스를 사용할 수 있습니다. 없습니다.

PS I / O 주변 장치 (IOP)로 향하는 주변 장치 요청 인터페이스 PL 주변 AXI의 경우

트랜잭션에서 CPU에서 실행되는 소프트웨어는 인터럽트를 사용하여 프로그래밍 된 IO 방법으로 사용되거나 상태 폴링.

제어기에는 두 세트의 제어 및 상태 레지스터가 있습니다. 한 세트는 보안 모드에서 액세스 할 수 있으며

다른 하나는 비보안 모드입니다. 소프트웨어는 컨트롤러의 32 비트 APB 슬레이브를 통해이 레지스터에 액세스합니다.

인터페이스. 전체 컨트롤러는 보안 모드 또는 비보안 모드에서 작동합니다. 섞이지 않는다.

채널 기반 모드. 보안 구성 변경은 slcr 레지스터에 의해 제어되며 제어기 재설정이 적용됩니다.


9.1.1 Features



DMA 컨트롤러는 다음을 제공합니다.

- DMA 전송을위한 유연한 명령어 세트가있는 DMA 엔진 프로세서 :

	 *유연한 분산 수집 메모리 전송

	 *출발지 및 목적지에 대한 주소 지정에 대한 완전한 제어

	 *AXI 트랜잭션 속성 정의

	 *바이트 스트림 관리

- 8 개의 캐시 라인과 각 캐시 라인은 4 워드 폭

- 8 개의 동시 DMA 채널 스레드

	 *다중 스레드를 병렬로 실행할 수 있습니다.

	 *최대 8 개의 읽기 및 최대 8 개의 쓰기 AXI 트랜잭션에 대한 발행 명령

- PS 인터럽트 컨트롤러와 PL에 대한 8 개의 인터럽트

- DMA 엔진 프로그램 코드 내의 8 개 이벤트

- 전송 중에 컨트롤러가 쓰거나 읽는 데이터를 버퍼링하는 128 (64 비트) 워드 MFIFO

- 보안

	 안전한 레지스터 액세스를위한 전용 APB 슬레이브 인터페이스

	 전체 컨트롤러가 보안 또는 비보안으로 구성됩니다.

-  메모리 - 메모리 DMA 전송

- PL 로직과의 흐름 제어를 관리하기위한 4 개의 PL 주변 장치 요청 인터페이스

	 각 인터페이스는 최대 4 개의 활성 요청을 허용합니다



9.1.2 System Viewpoint


System Functions

다음 시스템 기능은 9.6 절 시스템 기능에서 설명합니다.

- 시계

- 구성 재설정 및 재설정


DMA Controller Functions and Programming


그림 9-2는 DMA 컨트롤러의 블록 다이어그램을 보여줍니다. 각 블록에 대한 간략한 설명

다이어그램을 따른다. 각 기능 단위는 다음 세 가지 주요 섹션에서 자세히 설명합니다.

- 9.2 절 기능 설명의 전반적인 설명

- SDK 소프트웨어 프로그래밍 방법은 9.3 DMA 제어 장치용 프로그래밍 안내서 섹션에 있습니다.

- DMA 엔진 프로그래밍 방법은 9.4 DMA 엔진 프로그래밍 안내서 섹션에 있습니다.

-이 방법에 대한 프로그래밍 제한은 9.5 절 프로그래밍 제한 사항에 있습니다.


9.1.3 Block Diagram


그림 9-2는 DMA 컨트롤러의 블록 다이어그램을 보여줍니다.

<참고> : ARM PrimeCell DMA 컨트롤러 (PL330, r1p1) 기술 참조 설명서 참조 :
 
자세한 내용은 DMA 전송 및 AXI 마스터의 AXI 특성


DMA Instruction Execution Engine


DMAC에는 DMA 전송을 제어하는 프로그램 코드를 처리 할 수있는 명령 처리 블록이 있습니다.

DMAC는 각 스레드에 대해 별도의 상태 시스템을 유지 관리합니다.

- 채널 조정

	* 활성 DMA 채널을 서비스하기위한 라운드 로빈 방식

	* 다음 DMA 채널을 서비스하기 전에 DMA 관리자를 서비스하십시오

	* 중재 프로세스 변경은 지원되지 않습니다.

- 채널 우선 순위 지정

	* 동일한 우선 순위를 가진 모든 활성 DMA 채널에 응답합니다

	* 다른 DMA 채널을 통한 DMA 채널의 우선 순위 변경은 지원되지 않습니다.


Instruction Cache


컨트롤러는 명령을 캐시에 임시로 저장합니다. 스레드가 주소에서 명령을 요청하면 캐시는 조회를 수행합니다.

캐시 히트가 발생하면 캐시는 즉시 컨트롤러가 AXI 인터페이스를 사용하여 시스템 메모리에서 캐시 라인을 채우는 동안 스레드는 정지됩니다.

명령이 4 바이트보다 크거나 캐시 라인의 끝에 걸쳐 있으면 명령을 페치하기 위해 다중 캐시 액세스를 수행합니다


<참고> : 캐시 라인 채우기가 진행 중일 때 컨트롤러는 다른 스레드가 캐시에 액세스 할 수있게하고,

다른 캐시 미스가 발생하면 파이프 라인은 첫 번째 줄 채우기가 완료 될 때까지 중단됩니다.

<참고> : 채우기 작업에 대한 명령어 캐시 대기 시간은 DMA 엔진 명령어가 쓰여지는 시스템 메모리의 읽기 대기 시간에 따라 달라집니다.

DMAC의 성능은 64 비트 AXI 마스터 인터페이스 (CPU_2x 클럭)의 대역폭에 크게 좌우됩니다.



Read/Write Instruction Queues


채널 스레드가 로드 또는 저장 명령어를 실행할 때 컨트롤러는 관련 읽기 큐 또는 쓰기 큐에 명령을 추가합니다.

컨트롤러는 AXI 상호 연결에서 트랜잭션을 실행하기 전에 이러한 대기열을 명령어 저장 버퍼로 사용합니다.


Multi-channel Data FIFO


DMAC는 다중 채널 선입 선출 (MFIFO) 데이터 버퍼를 사용하여 DMA 전송 중에 읽거나 쓰는 데이터를 저장합니다.

자세한 내용은 9.2.4 멀티 채널 데이터 FIFO (MFIFO)를 참조하십시오.



AXI Master Interface for Instruction Fetch and DMA Transfers


프로그램 코드는 컨트롤러가 64 비트 AXI 마스터 인터페이스를 사용하여 액세스하는 시스템 메모리 영역에 저장됩니다.

또한 AXI 마스터 인터페이스는 DMA가 소스 AXI 슬레이브에서 대상 AXI 슬레이브로 데이터를 전송할 수있게합니다.


APB Slave Interface for Register Accesses


컨트롤러는 소프트웨어가 32 비트 APB 슬레이브 인터페이스를 통해 컨트롤 및 상태 레지스터를 읽고 쓰는 데 사용하는 두 개의 주소 범위에 응답합니다.

- 비보안 레지스터 액세스

- 보안 레지스터 액세스


Interrupt Interface


인터럽트 인터페이스는 인터럽트 컨트롤러에 대한 이벤트의 효율적인 통신을 가능하게합니다.


PL Peripheral DMA Request Interface


PL 주변 장치 요청 인터페이스는 PL에 상주하는 DMA 가능 주변 장치의 연결을 지원합니다.

각각의 PL 주변기기 요청 인터페이스는 서로 비동기 적이며 DMA 자체와 비동기 적이다.

PL과의 요청 / 확인 응답 신호는 섹션 9.2.6 PL 주변 장치 AXI 트랜잭션에 설명되어 있습니다.


Reset Initialization Interface


이 인터페이스는 소프트웨어가 리셋에서 빠져 나올 때 DMAC의 작동 상태를 초기화 할 수있게합니다.

자세한 내용은 9.6.3 컨트롤러 구성 재설정을 참조하십시오.


9.1.4 Notices


ARM IP Core


DMAC는 ARM이 개발, 테스트 및 라이센스 한 AMBA (Advanced Microcontroller Bus Architecture) PrimeCell 주변 장치입니다.

DMA 컨트롤러 용 ARM 참조 문서 목록은 부록 A, 추가 자료.

- 기술 참조 설명서 : ARM PrimeCell DMA 컨트롤러 (PL330) 기술 참조 설명서.

- 예제 애플리케이션 노트 : ARM 애플리케이션 노트 239 : 

	CoreLink DMA 컨트롤러 DMA-330 용 예제 프로그램 및 9.4 DMA 엔진 용 프로그래밍 안내서를 참조하십시오.


Secure/Non-Secure Modes


DMAC에는 ARM의 TrustZone 하드웨어와 공존 할 수있는 기능이 포함되어있어 보안 시스템의 성능을 가속화합니다.

하드웨어는 안전한 환경을 보장 할 필요가 없습니다.

이 장에는 보안 및 비보안 모드에 대한 많은 참조가 포함되어 있습니다.

그것은 완전하지 않을 수도 있습니다.

ARM TrustZone과 함께 DMA PL330 컨트롤러 사용과 관련된 추가 정보는 UG1019, Zynq-7000 All Programmable SoC에서 

ARM TrustZone 아키텍처 프로그래밍을 참조하십시오.


Other DMA Controllers


PS에는 IOP에 국지적 인 다른 DMA 제어기가 시스템에 있습니다. 여기에는 다음이 포함됩니다.

- GigE 컨트롤러는 16 장, 기가비트 이더넷 컨트롤러를 참조하십시오.

- SDIO 컨트롤러는 13 장 SD / SDIO 컨트롤러를 참조하십시오.

- USB 컨트롤러, 15 장, USB 호스트, 장치 및 OTG 컨트롤러를 참조하십시오.

- DevC 인터페이스, 6.4 장 장치 부팅 및 PL 구성을 참조하십시오.


9.2 Functional Description


모든 DMAC 작동 조건에 공통


- AXI 상호 연결에서 9.2.1 DMA 전송

- 9.2.2 AXI 트랜잭션 고려 사항

- 9.2.3 DMA 관리자

- 9.2.4 다중 채널 데이터 FIFO (MFIFO)


메모리 - 메모리 전송은 DMAC에 의해 관리됩니다.


- 9.2.5 메모리 - 메모리 전송


PL 주변 장치 요청 인터페이스가 사용될 때


- 9.2.6 PL 주변 장치 AXI 트랜잭션

- 길이 관리 옵션 : 9.2.8 PL 주변 장치 - PL 주변 장치로 관리되는 길이

- 길이 관리 옵션 : 9.2.9 PL 주변 장치 - DMAC에서 관리하는 길이


고급 DMAC 작동 기능

- 9.2.10 이벤트 및 인터럽트

- 9.2.11 중단

- 9.2.12 보안


IP 코어 구성

- ARM PrimeCell DMA 컨트롤러 (PL330)를 기반으로 9.2.13 IP 구성 옵션


9.2.1 DMA Transfers on the AXI Interconnect


모든 DMA 트랜잭션은 AXI 인터페이스를 사용하여 PL의 온칩 메모리, DDR 메모리 및 슬레이브 주변 장치간에 데이터를 이동합니다.

PL의 슬레이브 주변 장치는 일반적으로 DMAC 주변 장치 요청 인터페이스에 연결되어 데이터 흐름을 제어합니다.

DMAC는 PS에서 액세스 가능한 IOP를 생각할 수 있지만 일반적으로 이러한 경로는 흐름 제어 신호를 제공하지 않으므로 유용하지 않습니다.

DMAC에서 일반적으로 사용하는 데이터 경로는 그림 9-3에 나와 있습니다. 주변 요청 인터페이스 (흐름 제어에 사용됨)는 그림에 표시되지 않습니다.

각 AXI 경로는 읽기 또는 쓰기 일 수 있습니다. 많은 조합이 있습니다.

두 가지 일반적인 DMA 트랜잭션 예는 다음과 같습니다.

- 메모리 대 메모리 (온 - 칩 메모리 - DDR 메모리)

- PL 주변 장치와의 메모리 (DDR 메모리에서 PL 주변 장치)


9.2.2 AXI Transaction Considerations


- AXI 데이터 전송 크기

	* AXI 데이터 버스의 최대 64 비트 폭까지 데이터 액세스를 수행합니다.

	* 사용자가 src_burst_size 또는 dst_burst_size 필드를 64 비트보다 arger하도록 프로그래밍하면 정확한 중단 신호를 보냅니다.

	* 최대 버스트 길이는 16 데이터 비트입니다

- AXI 버스트가 4KB 경계를 넘어 버림
	
	* AXI 사양은 AXI 버스트가 4KB 주소 경계를 통과하는 것을 허용하지 않습니다

	* 컨트롤러가 버스트 시작 주소, 크기 및 길이의 조합으로 프로그래밍되어 단일 버스트가 4KB 주소 경계를 넘게되면 

	  컨트롤러는 지정된 길이와 결합 된 길이의 버스트 쌍을 대신 생성합니다.

	  이 작업은 DMAC 채널 스레드 프로그램에 투명하므로 예를 들어 DMAC가 적절한 AXI 읽기 버스트 쌍을 생성하여 단일 DMALD 명령에 응답합니다.


- AXI 버스트 유형

	* 데이터 액세스를 위해 고정 주소 또는 증가 주소 버스트 유형 만 생성하도록 프로그래밍 할 수 있습니다. 래핑 어드레스 버스트는 데이터 액세스 또는 명령 페치를 위해 생성되지 않습니다.

- AXI 쓰기 주소

	* 최대 8 개의 쓰기 주소를 최대 8 개까지 발행 할 수 있습니다 (쓰기 가능)

	* DMAC는 쓰기 트랜잭션을 수행하는 데 필요한 모든 데이터 바이트를 읽을 때까지 쓰기 주소를 발행하지 않습니다.

- AXI 쓰기 데이터 인터리빙

	* 인터리브 된 쓰기 데이터를 생성하지 않습니다. 하나의 쓰기 트랜잭션에 대한 모든 쓰기 데이터 비트는 다음 쓰기 트랜잭션을위한 쓰기 데이터 비트보다 먼저 출력됩니다.

- AXI 특성

	* 잠긴 액세스 또는 독점 액세스를 지원하지 않습니다.


9.2.3 DMA Manager


이 절에서는 사용 가능한 두 개의 APB 인터페이스 중 하나를 사용하여 DMA 관리자에 지시를 내리는 방법에 대해 설명합니다.

DMAC가 실시간으로 작동 중일 때 사용자는 다음과 같은 제한된 부분 집합 만 발행 할 수 있습니다.

DMAGO : 사용자가 지정한 DMA 채널을 사용하여 DMA 전송을 시작합니다.

DMASEV : 사용자가 지정한 이벤트 번호를 사용하여 이벤트 발생 또는 인터럽트를 신호합니다.

DMAKILL : 스레드 종료

적적절한 APB 인터페이스는 SLCR이 보안 상태에 따라 사용되어야한다.

TZ_DMA_NS 레지스터는 DMA 관리자를 초기화합니다. 예를 들어 DMA 관리자가 보안 상태에있는 경우 보안 APB 인터페이스를 사용하는 명령을 사용해야하거나 DMAC가 해당 명령을 무시합니다.

비보안 APB 인터페이스는 DMA 관리자가 비보안 상태에있을 때 DMA 채널을 시작하거나 다시 시작하는 데 사용할 수있는 권장 포트이지만 

보안 APB 인터페이스는 비보안 모드에서 사용할 수 있습니다. (자세한 내용은 섹션 9.2.12 보안을 참조하십시오.)

ARM TrustZone과 함께 DMA PL330 컨트롤러 사용과 관련된 추가 정보는 UG1019, Zynq-7000 All Programmable SoC에서 ARM TrustZone 아키텍처 프로그래밍을 참조하십시오.

디버그 명령어 레지스터 또는 DBGCMD 레지스터를 사용하여 명령어를 실행하기 전에 DBGSTATUS 레지스터를 읽어야 디버그가 유휴 상태인지 확인해야합니다. 

그렇지 않으면 DMA 관리자가 해당 명령어를 무시합니다. 부록 B, 레지스터 세부 사항의 디버그 명령 레지스터 및 디버그 상태 레지스터를 참조하십시오.

DMA 관리자가 APB 슬레이브 인터페이스로부터 명령을 받으면, 명령을 처리 할 수 있기까지 여러 클럭 사이클이 걸릴 수 있습니다. 예를 들어, 파이프 라인이 다른 명령을 처리하는 중입니다.

DMAGO를 발행하기 전에 시스템 메모리는 DMAGO가 지정하는 주소에서 시작하여 DMA 채널 스레드가 실행될 수있는 적합한 프로그램을 포함해야합니다.



Example: Start DMA Channel Thread


예 : DMA 채널 스레드 시작 다음 예는 디버그 명령어 레지스터를 사용하여 DMA 채널 스레드를 시작하는 데 필요한 단계를 보여줍니다.

1. DMA 채널을위한 프로그램을 생성하십시오.

2. 프로그램을 시스템 메모리 영역에 저장하십시오.

   DMAC의 APB 인터페이스 중 하나를 사용하여 다음과 같이 DMAGO 명령어를 프로그래밍하십시오.

3. dmac.DBGSTATUS 레지스터를 폴링하여 디버그가 유휴 상태인지 확인하십시오. 즉, dbgstatus 비트가 0입니다.

   부록 B, 레지스터 세부 사항에서 디버그 상태 레지스터를 참조하십시오.

4. dmac.DBGINST0 레지스터에 다음을 입력하십시오.

	a. DMAGO에 대한 명령어 바이트 0 인코딩입니다.

	b. DMAGO에 대한 명령어 바이트 1 인코딩입니다.

	c. 스레드 비트를 0으로 디버그합니다. 그러면 DMA 관리자가 선택됩니다. 부록 B, 레지스터 세부 사항의 디버그 명령어 -0 레지스터를 참조하십시오.

5. dmac.DBGINST1 레지스터에 DMAGO 명령 바이트 [5 : 2] 데이터를 쓰고 부록 B, 레지스터 세부 정보의 디버그 명령어 -1 레지스터를 참조하십시오. 

   이 4 바이트는 2 단계에서 시스템 메모리에 기록 된 프로그램의 첫 번째 명령어 주소로 설정해야합니다.

   디버그 명령어 레지스터에 포함 된 명령어를 실행하도록 DMAC에 지시합니다.

6. dmac.DBGCMD 레지스터에 0을 씁니다. DMAC는 DMA 채널 스레드를 시작하고 dbgstatus 비트를 1로 설정합니다. 
 
   부록 B, 레지스터 세부 정보의 디버그 명령 레지스터를 참조하십시오. DMAC는 명령의 실행을 완료 한 후 dbgstatus 비트를 0으로 지 웁니다.


9.2.4 Multi-channel Data FIFO (MFIFO) 


MFIFO는 현재 활동중인 모든 채널에 의해 선착순으로 사용되는 공유 리소스입니다. 

프로그램에 대해서는 채널 당 하나씩 가변 깊이 병렬 FIFO 세트로 표시되며 모든 FIFO의 전체 깊이가 MFIFO의 크기를 초과 할 수 없다는 제한이 있습니다.

DMAC 최대 MFIFO 깊이는 128 (64 비트) 워드입니다.

컨트롤러는 소스에서 대상으로 데이터를 재정렬 할 수 있습니다.

예를 들어, DMAC는 주소 0x103에서 워드를 읽고 주소 0x205에 쓸 때 데이터를 2 바이트 레인으로 시프트합니다.

MFIFO에서 데이터의 저장 및 패킹은 목적지 주소 및 전송 특성에 의해 결정됩니다.

프로그램이 대상으로 메모리 전송 증분을 수행하도록 지정하면 DMAC는 데이터를 MFIFO에 압축하여 MFIFO 항목의 사용을 최소화합니다.

예를 들어 DMAC는 64 비트 AXI 데이터 버스가 있고 프로그램이 소스 주소 0x100과 대상 주소 0x200을 사용할 때 두 개의 32 비트 워드를 MFIFO의 단일 항목으로 묶습니다.

특정 상황에서 소스에서로드 된 데이터를 저장하는 데 필요한 항목 수는 소스 데이터 양을 MFIFO 너비로 나눈 단순한 계산이 아닙니다.

필요한 항목 수 계산은 다음 중 하나가 발생하면 간단하지 않습니다.

- 소스 주소가 AXI 버스 너비에 정렬되지 않았습니다.

- 대상 주소가 AXI 버스 너비에 맞춰져 있지 않습니다.

- 메모리 전송은 고정 된 대상, 즉 비 증분 주소입니다.

DMALD 및 DMAST 명령어는 각각 AXI 버스 트랜잭션이 수행되도록 지정합니다.

AXI 버스 트랜잭션에 의해 전송되는 데이터의 양은 CCRn 레지스터에 프로그래밍 된 값과 트랜잭션 주소에 따라 달라집니다.

정렬되지 않은 전송에 대한 정보는 AMBA AXI 프로토콜 스펙을 참조하십시오.

MFIFO 활용에 대한 고려 사항은 9.3 DMA 컨트롤러 프로그래밍 가이드를 참조하십시오.


9.2.5 Memory-to-Memory Transfers


컨트롤러에는 PS 시스템의 메모리에 액세스하는 AXI 마스터 인터페이스가 포함되어 있습니다 :

- OCM

- DDR

동일한 AXI 중앙 인터커넥트를 통해 컨트롤러는 잠재적으로 대부분의 주변 장치 서브 시스템에 액세스 할 수 있습니다.

주변 장치가 FIFO가 없거나 흐름 제어가 필요없는 메모리 매핑 영역 (또는 메모리 포트 위치)으로 간주 될 수있는 경우 DMAC를 사용하여 읽고 쓰기가 가능합니다.

일반적인 예는 다음과 같습니다.

- 선형 어드레싱 모드의 QSPI

- NOR 플래시

- NAND 플래시

DMA 컨트롤러의 메모리 맵은 4 장, 시스템 주소에서 볼 수 있습니다.

AXI 인터페이스에 대한 자세한 내용은을 참조하십시오. 메모리 대 메모리 전송의 예는 다음과 같습니다.

9.4.2 메모리 - 메모리 전송에서 제공된다.


9.2.6 PL Peripheral AXI Transactions


대부분의 PL 주변 장치는 FIFO를 통해 데이터를 전송할 수 있습니다. 이러한 FIFO는 오버 플로우 및 언더 플로우 상황을 피하기 위해 관리되어야합니다.

이러한 이유로 4 가지 특정 주변 장치 요청 인터페이스는 DMAC를 PL의 DMA 가능 주변 장치에 연결하는 데 사용할 수 있습니다. 이러한 각 인터페이스는 모든 DMA 채널에 할당 될 수 있습니다.

DMAC는 각 PL 주변 장치 인터페이스에 대해 최대 네 개의 활성 요청을 허용하도록 구성됩니다. 활성 요청은 DMAC가 요청 된 AXI 데이터 트랜잭션을 시작하지 않은 곳입니다. 

DMAC는 각 PL 주변 장치 인터페이스에 대한 요청 FIFO를 가지고 PL 주변 장치에서 요청을 캡처하는 데 사용됩니다. 

요청 FIFO가 가득 차면 DMAC는 해당 DMA {3 : 0} _DRREADY Low를 설정하여 DMAC가 PL 주변 장치에서 전송 된 요청을 수락 할 수 없음을 알립니다.


<참고> : PS의 I / O 주변 장치 (IOP)에 대한 주변 장치 요청 인터페이스는 없습니다.

타겟 프로세서 주변 장치에서 FIFO의 언더 플로우 또는 오버 플로우를 피하려면 프로세서 개입이 필요합니다. 이 섹션에서는 PL 주변 장치와의 AXI 트랜잭션에 대해 설명합니다.

DMAC와 PL 주변 장치간에 흐르는 데이터의 양을 처리하는 두 가지 다른 방법이 있습니다.

PL Peripheral length management: PL 주변 장치는 DMA 사이클에 포함 된 데이터의 양을 제어합니다.

DMAC length management: DMAC는 DMA 사이클에서 데이터의 양을 제어합니다.


Programming Examples

9.4.3 PL 주변 장치 DMA 전송 길이 관리 섹션을 참조하십시오.


9.2.7 PL Peripheral Request Interface


그림 9-4는 PL 주변 장치 요청 인터페이스가 접두사를 사용하는 PL 주변 장치 요청 버스와 DMAC 확인 버스로 구성된다는 것을 보여줍니다.

DR 	PL 주변 요구 버스

DA 	DMAC 확인 버스

두 버스 모두 AXI 프로토콜이 설명하는 유효 준비 (ready-handshake)를 사용합니다. 핸드 셰이크 프로세스에 대한 자세한 내용은 AMBA AXI 프로토콜 v1.0 사양을 참조하십시오.

PL 주변 장치는 DMA {3 : 0} _DRTYPE [1 : 0] 레지스터를 사용하여 다음을 수행합니다.

- 단일 AXI 트랜잭션 요청

- AXI burst 트랜잭션 요청

- 플러시 요청을 확인합니다.

DMAC는 DMA {3 : 0} _DATYPE [1 : 0] 레지스터를 사용하여 다음을 수행합니다.

- 요청 된 단일 AXI 트랜잭션을 완료하면 신호

- 요청 된 AXI burst 트랜잭션을 완료 할 때 신호

- 플러시 요청 발행

PL 주변 장치는 DMA {3 : 0} _DRLAST를 사용하여 다음을 수행합니다.

- AXI 트랜잭션의 마지막 데이터 사이클이 시작될 때 DMAC에 신호


