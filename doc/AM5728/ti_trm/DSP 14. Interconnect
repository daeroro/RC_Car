
<14.1> 상호연결 개요

<14.1.1> 단어정리

* Initiatior: 칩(프로세서, DMA..) 상호연결에서 읽거나 쓰는 요청을 하는 모듈
* Target: 요청에 응답하는 모듈, 인터럽트나 DMA 요청은 가능한다.

* Agent: agent를 이용해 모듈 간 상호연결을 한다.
	target agent(TA), initiator agent(IA)

* Interconnect: 여러 개의 이니시에이터 모듈과 여러 개의 타겟 모듈 사이의 연결

* Register target(RT): 상호연결 내부의 구성 레지스터에 접근하기 위해 사용

* Firewall: 권한이 없는 접근을 막는다. (모듈에서 오거나 모듈로 가는)

* ConnID: 이름표를 붙이는 것, Firewall과 에러로깅 과정에 쓰임(구분하기 위해서)

* Firewall comparison mechanism: firewall에서 비교과정을 통해 조건에 맞는다면 접근을 허락한다.

* MCmd qualifier, MReqInfo qualifier: firewall 비교과정에 사용되는 정보들을 저장

-------------------------------------------------------------------------------------------------------------------

<14.1.2> 구조 개요

* L1은 CPU안에 있다. 내부 Level1 캐시 메모리와 데이터 교환을 한다.
* L2는 IPU, MPU 안에 있다. (IPU: 인스트럭션 프로세서 유닛, MPU: 마이크로 프로세서 유닛)
* 1개의 L3, 5개의 L4는 칩 레벨에서 상호연결, 모듈과 서브시스템 사이에서 커뮤니케이션을 하게 한다.


* L3는 시스템 온 칩/외부 메모리에서 데이터 교환, 최대 너비는 128bit

* L4는 세가지 부분으로 되어 있다.
-> L4_CFG: firewall의 주요 인터페이스
-> L4_PER: 시스템의 직접적인 메모리 접급이 필요한 주요 주변장치들을 포함, 3개가 있는데 각각 3개의 포트를 가진다.
-> L4_WKUP: WKUP 파워 도메인에 붙어있는 주변장치를 포함

* 각 모듈의 특성에 따라 서브 시스템에 연결되는 과정이 달라진다.
* 접근 기준에 따라 접근을 골라내는 firewall이 일부 TA에 있다. (소프트웨어로 제어)
* L3, L4의 초기설정은 접근을 막는 것을 최소화하고 있다.

-------------------------------------------------------------------------------------------------------------------

<14.2> L3_MAIN 상호연결

<14.2.1> L3_MAIN 상호연결 개요

NIUs: 마스터 NIUs - IAs / 슬레이브 NIUs - TAs


<14.2.2> L3_MAIN 상호연결 구성

데이터시트 참고


<14.2.3> L3_MAIN 상호연결 기능적인 묘사

L3_MAIN 상호연결 네트워크는 각 마스터 NIU와 슬레이브 NIU를 구분하는 ConnID를 가진다.
ConnID을 사용하는 목적
* 슬레이브 NIU의 에러 로깅
* 에러 로깅이 된 슬레이브 NIU에 전력을 끊는다.
* 8개의 FLAGMUX가 인터럽트를 표시하기 위해
* 구성하고 모니터하는데 필요한 STATCOLL: STATCOLL은 유져가 정의한 윈도우 안에서 트레픽 통계를 계산하고
디버깅 인터페이스를 통해 주기적으로 유져에게 보고한다.
* 대역폭 레귤레이터가 구성될 수 있게
 

<14.2.3.2> 모듈 분배

<14.2.3.2.1> L3_MAIN 상호연결 Agents

모든 이니시에이터나 타겟 코어는 NIU를 통해 L3_MAIN에 연결된다. NIU에 다양한 레지스터가 있다.
마스터 NIU와 슬레이브 NIU에 무엇이 있는지는 표14-7, 14-8 참고


<14.2.3.2.2> L3_MAIN 연결 메트릭스

L3 상호연결은 L3_CLK1_1, L3_MAIN_CLK1_2, L3_MAIN_CLK2로 이루어져 있다.

<14.2.3.2.2.1> 각 클락 도메인이 가지고 있는 요소

표 14-9참고

그림 14-3은 각 이니시에이터와 타겟 사이에 연결이 있으면 C가 표시되어 있는 그림이다.
(이니시에이터와 타겟 사이에 L3_MAIN이 있다.)

-----------------------------------------------------------------------------------------------------------------------

<14.2.3.2.3> 마스터 NIU identification

ConnID는 상호 전송을 위해 마스터 NIU의 정체를 밝히는 데 사용한다.
ConnID를 쓰는 목적 (마스터 NIU)
* 보고 과정을 위해 마스터 소스의 정체를 밝힘
* 루트 발생에대한 응답
* Firewall 에러 로깅
* L3_MAIN 상호연결 에러 로깅

표 14-10은 각 마스터 NIU에대한 ConnID가 나와있다.

8비트 ConnID: 다른 곳에서 온 신호들을 구분하기 위해 (에러 디코딩에서)
4비트 ConnID: firewall에서 사용, 슬레이브 NIU에 접급가능한지를 구분한다.

-----------------------------------------------------------------------------------------------------------------------

<14.2.3.3> 대역폭 레귤레이터

대역폭 레귤레이터는 마스터 NIU의 링크 대역폭이 너무 크지 않게 해주고, 슬레이브 NIU가 너무 느린 속도로 패킷을 전송하지 않도록 한다.
지정해 준 값보다 작으면 프레셔 비트를 1로 활성화해서 대역폭을 늘리게 한다.

카운터에서는 예상되는 대역폭(? 실제 대역푝?)의 값을 가져온다.

대역폭 레귤레이터가 연결에 할당된 대역폭이 비효율적이면 커넥션의 입력을 늘려준다.

카운터에서 가져온 대역폭의 값과 워터마트와 비교해서 워터마크보다 높으면 낮은 앞력으로 결과가 확실한거고 낮으면 높은 압력으로 지연시간 최소화


<14.2.3.4> 대역폭 리미터

모든 모듈이 다 있는 건 아니다. GPU, EDMA_TPTC, VPE, MMU1에 있다. 
RD요청이 한꺼번에 들어와 RD응답이 많아지는 것을 피하기 위해 RD요청을 한꺼번에 하지 못하게 한다.

-----------------------------------------------------------------------------------------------------------------------

<14.2.3.5> Flag Muxing

플래그 먹스 생성기는 슬레이브 NIU와 Firewall으로부터 나온 에러, 인터럽트 정보를 모은다.

* L3_FLAGMUX_CLK1MERGE_COREREG, L3_FLAGMUX_STDHOSTHDR_VERSIONREG: 붙어있는 코어와 특성을 밝히기 위해 사용
* L3_FLAGMUX_CLK1MERGE_MASK0: 에러 소스가 어디인지 표시
* L3_FLAGMUX_CLK1MERGE_REGERR0: 에러 소스가 활성화 됐는지 체크
* L3_FLAGMUX_CLK1MERGE_MASK1: 디버그 에러 소스가 어디인지 표시
* L3_FLAGMUX_CLK1MERGE_REGERR1: 디버그 에러 소스가 활성화 됐는지 체크


<14.2.3.5.1> Flag Mux 타임아웃

고정된 횟수의 사이클 후 반응이 없으면 에러 타임아웃 플래그가 생성, flag가 3이 된다.

-----------------------------------------------------------------------------------------------------------------------

<14.2.3.6> 정적인 컬렉터 그룹

정적인 컬렉터는 마스터 NIU로서 같은 마스터 주소를 공유하는 그룹
정적인 컬렉터의 주요 특징
* 거슬리지 않는 모니터 (자유롭게 모니터 가능)
* 프로그래밍 할 수 있는 필터와 카운터
* 프로그래밍을 한 타임 인터벌 결과 모음

이벤트 디텍터는 각각 포트의 요청과 응답을 위해서 사용
여러 이벤트를 구분할 때 이벤트 디렉터 사용

퍼포먼스 모니터링은 동작 모니터링을 위해 사용
Evnet muxes는 어떤 포트를 모니터할건지에 대한 정보가 있다.

필터는 읽거나 쓰거나 에러, 주소를 받아들일지 거절할지를 정한다.

10개의 정적인 컬렉터는 트래픽을 모니터하는데 사용

-----------------------------------------------------------------------------------------------------------------------

<14.2.3.7> L3_MAIN 보호와 Firewall

<14.2.3.7.1> L3_MAIN Firewall Reset

하드웨어로 달려 있거나 컨트롤 모듈 레지스터로부터 나온다.
나온 값은 리셋할 때와 한 후 firewall의 동작을 정의한다.

firewall 레지스터는 CORE AON 파워 도메인 안에 위치하고 no retention 상태가 되어야 한다.
오직 차가운 리셋으로 리셋된다.


<14.2.3.7.2> 파워 매니지먼트

L3_MAIN interconnect는 모든 요구사항을 다 완료해준 후 PRCM으로부터 요청이 오지 않으면 잠자는 상태가 된다.
이 기능은 하드웨어로 제어한다.

내부 클락 오토게이트를 실행해서 전력은 줄인다.

부분적인 리텐션 상태를 지원한다.


<14.2.3.7.3> L3_MAIN Firewall 기능성

슬레이브 NIU로 접근은 오직 마스터 NIU가 권한을 준다.

MCMD: 읽기인지 쓰기인지 구분
ConnID: 마스터 NIU가 허가했는지 여부 확인
MReqInfo: 접근 타입에대한 정보를 전달


표 14-45 MReqInfo 값

MReqType, MReqDebug, MReqSupervisor 각각의 값이 있다.

3가지 MReqInfo 값의 조합이 맞을 때 오진 보호된 슬레이브 NIU에 접근할 수 있다.

---------------------------------------------------------------------------------------------------------------------

<14.2.3.7.3.1> 보호 영역

각 슬레이브 NIU 주소 공간에는 보호되는 구역이 있다.

두 개의 접근 메모리를 위한 같은 지역을 사용하거나 몇개의 메모리들이 병렬식 메커니즘을 지원하는 동안 
firewall은 멀티포트가 된다.


슬레이브 NIU firewall에는 두가지 타입의 영역이 있다.

Default region: 모든 슬레이브 NIU가 사용가능하다. 
		전체의 슬레이브 NIU 주소 범위를 커버한다.
		region으로 구성된 다른 firewall은 default region이 리셋되거나 덮어써야 한다.
		항상 낮은 우선순위를 가지고 있기 때문이다.

Normal region: normal region의 수는 슬레이브 NIU에 다양하다. 그들은 개성적인 능력을 가지고 있다.

각 region이 가지고 있는 특성

시작 주소
끝 주소
특별한 접근 권한
우선순위 (0이 제일 낮고 10이 제일 높음)

region1이 우선순위 레벨 1을, region2가 우선순위 레벨2를 가지고 있다.

이런 우선순위 레벨은 firewall의 유연성과 유용함을 증가시킨다.


region으로 커버되어지는 주소 범위는 region의 시작과 끝을 저장하는 레지스터로 정의된다.

슬레이브 NIU 주소의 크기는 보호된 슬레이브 NIU 사이즈에 의해 결정된다.

멀티포트 firewall은 하나 또는 여러개의 포트를 활성화 시킨다.
하지만 병렬식 연결이 보호되어 있는 메모리 공간의 일부 포트에서 필요하지 않는 경우
선택된 포트의 region 확인을 적용하거나 적용하지 않는 것이 가능하다.


<14.2.3.7.3.3> 각 region의 보호 메커니즘

각 region에대한 접근 허가는 L3_MAIN Firewall 레지스터를 통해 정의되고 구성된다.


<14.2.3.7.3.4> L3_MAIN Firewall 에러 로깅

보호 위반 에러가 감지되면 다음의 신호가 발생한다.

* in-band error가 접근과 관련된 마스터 NIU로 발생한다.
* out-band error는 컨트롤 모듈로 보내진다.
* 인터럽트는 Cortex-A15 INTC에서 발생된다.

in-band error가 다시 보내질 때 상호교류가 명령 가져오기 인지 데이터 접근인지에 따라
외부로 명령을 다시 가져가거나 데이터 보내는 것을 중단한다.


<14.2.3.8.2> 슬레이브 NIU 에러 로깅

<표준 에러>

* firewall error: firewall에 의해 접근요청이 거절
* Address hole: 요청하는 주소를 찾을 수 없을 때
		접근 요청 때마다 살핀다.
* Unsupported commands: 마스터 NIU가 실행되지 않는 명령어를 보냈을 때
			슬레이브 NIU가 못 받아들이거나 다른 명령어로 전환이 안될 때

<커스텀 에러>

* Report custom errors: 슬레이브의 답이 SResp (= ERR)일 때
