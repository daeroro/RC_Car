{\rtf1\ansi\ansicpg949\deff0\deflang1033\deflangfe1042{\fonttbl{\f0\fnil\fcharset129 \'b8\'bc\'c0\'ba \'b0\'ed\'b5\'f1;}}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang18\f0\fs20 A TMS320C66xTM CorePac DSP core that encompasses :DSP Subsystems Overview\par
DSP Subsystems \'b0\'b3\'bf\'e4\par
\par
The device includes two identical instances (DSP1 and DSP2) of a digital signal processor (DSP)\par
subsystem, based on the TI's standard TMS320C66xTM DSP CorePac core.\par
\'c0\'cc \'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba\'b4\'c2 TI\'c0\'c7 \'c7\'a5\'c1\'d8 TMS320C66xTM DSP CorePac \'c4\'da\'be\'ee\'b8\'a6 \'b1\'e2\'b9\'dd\'c0\'b8\'b7\'ce \'b5\'f0\'c1\'f6\'c5\'d0 \'bd\'c5\'c8\'a3 \'c7\'c1\'b7\'ce\'bc\'bc\'bc\'ad (DSP) \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'b5\'ce \'b0\'b3\'c0\'c7 \'b5\'bf\'c0\'cf\'c7\'d1 \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba (DSP1 \'b9\'d7 DSP2)\'b0\'a1 \'c6\'f7\'c7\'d4\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The TMS320C66x DSP core enhances the TMS320C674xTM core, which merges the C674xTM floating\par
point and the C64x+TM fixed-point instruction set architectures.\par
TMS320C66x DSP \'c4\'da\'be\'ee\'b4\'c2 C674xTM \'ba\'ce\'b5\'bf \'bc\'d2\'bc\'f6\'c1\'a1 \'b9\'d7 C64x + TM \'b0\'ed\'c1\'a4 \'bc\'d2\'bc\'f6\'c1\'a1 \'b8\'ed\'b7\'c9\'be\'ee \'bc\'bc\'c6\'ae \'be\'c6\'c5\'b0\'c5\'d8\'c3\'b3\'b8\'a6 \'ba\'b4\'c7\'d5 \'c7\'d1 TMS320C674xTM \'c4\'da\'be\'ee\'b8\'a6 \'b0\'ad\'c8\'ad\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The C66x DSP is object-code compatible with the C64x+/C674x DSPs.\par
\par
C66x DSP\'b4\'c2 C64x + / C674x DSP\'bf\'cd \'b0\'b0\'c0\'cc \'bf\'c0\'ba\'ea\'c1\'a7\'c6\'ae \'c4\'da\'b5\'e5 \'b0\'a1 \'c8\'a3\'c8\'af\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
\'bf\'c0\'ba\'ea\'c1\'a7\'c6\'ae \'c4\'da\'b5\'e5: \'c4\'c4\'c6\'c4\'c0\'cf\'b7\'af\'b3\'aa \'be\'ee\'bc\'c0\'ba\'ed\'b7\'af\'bf\'a1 \'c0\'c7\'c7\'d8 \'b8\'b8\'b5\'e9\'be\'ee\'c1\'f8 \'c4\'da\'b5\'e5\par
\par
For more information on the TMS320C66x core CPU, see the TMS320C66x DSP CPU and Instruction Set\par
Reference Guide, (SPRUGH7).\par
TMS320C66x \'c4\'da\'be\'ee CPU\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba TMS320C66x DSPCPU\'b9\'d7 \'c1\'f6\'c4\'a7 \'c2\'fc\'c1\'b6( SPRUGH7)\'c2\'fc\'c1\'b6 \'b0\'a1\'c0\'cc\'b5\'e5\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
Each of the two DSP subsystems integrated in the device includes the following components:\par
 \'b1\'e2\'b1\'e2\'bf\'a1 \'c5\'eb\'c7\'d5\'b5\'c8 \'b5\'ce\'b0\'b3\'c0\'c7 DSP subsystems \'c0\'ba \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'c0\'ba \'b1\'b8\'bc\'ba \'bf\'e4\'bc\'d2\'b8\'a6 \'c6\'f7\'c7\'d4\'c7\'d1\'b4\'d9.\par
\par
A TMS320C66xTM CorePac DSP core that encompasses :\par
\'c7\'d9\'bd\'c9 \'bf\'e4\'bc\'d2\'b8\'a6 \'c6\'f7\'c7\'d4\'c7\'cf\'b4\'c2 TMS320C66xTM core-Core :\par
\par
- L1 program-dedicated (L1P) cacheable memory\par
L1 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'c0\'fc\'bf\'eb (L1P) \'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9\'c7\'d1 \'b8\'de\'b8\'f0\'b8\'ae\par
\par
- L1 data-dedicated (L1D) cacheable memor\par
L1 \'b5\'a5\'c0\'cc\'c5\'cd \'c0\'fc\'bf\'eb (L1D) \'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9\'c7\'d1 \'b8\'de\'b8\'f0\'b8\'ae\par
\par
-L2 (program and data) cacheable memory\par
L2 (\'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'b9\'d7 \'b5\'a5\'c0\'cc\'c5\'cd) \'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9 \'b8\'de\'b8\'f0\'b8\'ae\par
\par
- Extended Memory Controller (XMC)\par
\'c8\'ae\'c0\'e5 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (XMC)\par
\par
-External Memory Controller (EMC)\par
\'bf\'dc\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (EMC)\par
\par
-DSP CorePac located interrupt controller (INTC)\par
DSP CorePac\'c0\'cc \'c0\'a7\'c4\'a1\'c7\'d1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (INTC)\par
\par
-DSP CorePac located power-down controller (PDC)\par
DSP CorePac\'bf\'a1 \'c0\'a7\'c4\'a1\'c7\'d1 PDC (power-down controller)\par
\par
Dedicated enhanced data memory access engine -\par
\'c8\'ae\'c0\'e5 \'b5\'a5\'c0\'cc\'c5\'cd \'c0\'fc\'bf\'eb \'b8\'de\'b8\'f0\'b8\'ae \'be\'d7\'bc\'bc\'bd\'ba \'bf\'a3\'c1\'f8\par
\par
EDMA, to transfer data from/to memories and peripherals external to the DSP subsystems and to local DSP memory (most commonly L2 SRAM).\par
EDMA\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'bf\'dc\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae \'bf\'cd \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1 \'b9\'d7 \'b7\'ce\'c4\'c3 DSP \'b8\'de\'b8\'f0\'b8\'ae (\'b0\'a1\'c0\'e5 \'c0\'cf\'b9\'dd\'c0\'fb\'c0\'b8\'b7\'ce L2 SRAM) \'bb\'e7\'c0\'cc\'bf\'a1\'bc\'ad \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'c0\'fc\'bc\'db\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The external DMA requests are passed through DSP system level (SYS) wakeup logic, and\par
\'bf\'dc\'ba\'ce DMA \'bf\'e4\'b1\'b8\'b4\'c2 DSP \'bd\'c3\'bd\'ba\'c5\'db \'b7\'b9\'ba\'a7 (SYS) \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'b7\'ce\'c1\'f7\'c0\'bb \'c5\'eb\'b0\'fa\'c7\'cf\'b0\'ed\par
\par
 collectedfrom the DSP1 / DSP2 dedicated outputs of the device DMA Events Crossbar for each of the two\par
subsystems.\par
\'b0\'a2\'b0\'a2 \'b4\'d9\'b8\'a5 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'bf\'a1\'b4\'eb\'c7\'d8 \'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba dma Events Crossbar \'c0\'c7 dsp1/dsp2 \'c3\'e2\'b7\'c2\'bf\'a1 \'bc\'f6\'c1\'fd\'b5\'c8\'b4\'d9.\par
\par
A level 2 (L2) interconnect network (DSP NoC) to allow connectivity between different modules of the subsystem or the remainder of the device via the device L3_MAIN interconnect.\par
l2 \'bb\'f3\'c8\'a3\'bf\'ac\'b0\'e1 \'b3\'d7\'c6\'ae\'bf\'f6\'c5\'a9\'b4\'c2 \'bc\'ad\'ba\'ea\'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'b4\'d9\'b8\'a5 \'b8\'f0\'b5\'e2 \'b6\'c7\'b4\'c2 \'c0\'e5\'c4\'a1 L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1\'c0\'bb \'c5\'eb\'c7\'d1 \'bf\'a9\'b7\'af \'c0\'e5\'c4\'a1 \'bf\'ac\'b0\'e1\'b8\'a6 \'c7\'e3\'b6\'f4\'c7\'d1\'b4\'d9.\par
\par
Two memory management units (on EDMA L2 interconnect and DSP MDMA paths) for accessing the\par
device L3_MAIN interconnect address space\par
\'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 \'c1\'d6\'bc\'d2 \'b0\'f8\'b0\'a3\'c0\'bb \'be\'d7\'bc\'bc\'bd\'ba\'c7\'cf\'b1\'e2\'c0\'a7\'c7\'d1 2 \'b0\'b3\'c0\'c7 \'b8\'de\'b8\'f0\'b8\'ae \'b0\'fc\'b8\'ae \'c0\'e5\'c4\'a1 (EDMA L2 \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 \'b9\'d7 DSP MDMA \'b0\'e6\'b7\'ce\'bf\'a1 \'c0\'d6\'c0\'bd)\par
\par
Dedicated system control logic (DSP_SYSTEM) responsible for power management, clock generation,\par
and connection to the device power, reset, and clock management (PRCM) module\par
\'c0\'fc\'bf\'f8 \'b0\'fc\'b8\'ae, \'c5\'ac\'b7\'cf \'b9\'df\'bb\'fd \'c0\'e5\'c4\'a1 \'c0\'fc\'bf\'f8 \'b8\'ae\'bc\'c2 \'b9\'d7 \'c5\'ac\'b7\'b0 \'b0\'fc\'b8\'ae (PRCM) \'b8\'f0\'b5\'e2\'bf\'a1 \'b4\'eb\'c7\'d1 \'bf\'ac\'b0\'e1\'c0\'bb \'b4\'e3\'b4\'e7\'c7\'cf\'b4\'c2 \'c0\'fc\'bf\'eb \'bd\'c3\'bd\'ba\'c5\'db \'c1\'a6\'be\'ee \'b7\'ce\'c1\'f7 (DSP_SYSTEM)\par
\par
5.1.1 DSP Subsystems Key Features\par
he TMS320C66x Instruction Set Architecture (ISA) is the latest for the C6000 family.\par
TMS320C66x \'b8\'ed\'b7\'c9 \'bc\'bc\'c6\'ae \'be\'c6\'c5\'b0\'c5\'d8\'c3\'b3 (ISA)\'b4\'c2 C6000 \'c1\'a6\'c7\'b0\'b1\'ba\'c0\'c7 \'c3\'d6\'bd\'c5 \'b9\'f6\'c0\'fc\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
As with its predecessors (C64x, C64x+ and C674x), the C66x is an advanced VLIW architecture with 8 functional\par
units (two multiplier units and six arithmetic logic units) that operate in parallel.\par
\'b1\'e2\'c1\'b8\'c0\'c7 C64x, C64x + C674x\'bf\'cd \'b8\'b6\'c2\'f9\'b0\'a1\'c1\'f6\'b7\'ce, C66x\'b4\'c2 \'ba\'b4\'b7\'c4\'b7\'ce \'b5\'bf\'c0\'db\'c7\'cf\'b4\'c2 8 \'b0\'b3\'c0\'c7 \'b1\'e2\'b4\'c9(2 \'b0\'b3\'c0\'c7 \'b0\'f6\'bc\'c0 \'c0\'af\'b4\'d6\'b0\'fa 6 \'b0\'b3\'c0\'c7 \'bb\'ea\'bc\'fa \'b3\'ed\'b8\'ae \'c0\'e5\'c4\'a1)\'b8\'a6 \'b0\'ae\'c3\'e1\par
\'b0\'ed\'b1\'de VLIW \'be\'c6\'c5\'b0\'c5\'d8\'c3\'b3\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
The C66x CPU has a total of 64 general-purpose 32-bit registers.\par
C66x CPU\'bf\'a1\'b4\'c2 \'c3\'d1 64 \'b0\'b3\'c0\'c7 \'b9\'fc\'bf\'eb 32 \'ba\'f1\'c6\'ae \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b0\'a1 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
Some features of the DSP C6000 family devices are :\par
DSP C6000 \'c1\'a6\'c7\'b0\'b1\'ba\'c0\'c7 \'c0\'cf\'ba\'ce \'b1\'e2\'b4\'c9\'c0\'ba \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
Advanced VLIW CPU with eight functional units (two multipliers and six ALUs) which:\par
8 \'b0\'b3\'c0\'c7 \'b1\'e2\'b4\'c9 \'b4\'dc\'c0\'a7 (2 \'b0\'b3\'c0\'c7 \'b0\'f6\'bc\'c0\'b1\'e2\'bf\'cd 6 \'b0\'b3\'c0\'c7 ALU)\'b8\'a6 \'b0\'ae\'c3\'e1 \'b0\'ed\'b1\'de VLIW CPU :\par
\par
\endash  Executes up to eight instructions per cycle for up to ten times the performance of typical DSPs\par
\'c0\'cf\'b9\'dd\'c0\'fb\'c0\'ce DSP\'c0\'c7 \'bc\'ba\'b4\'c9\'c0\'c7 \'c3\'d6\'b4\'eb 10 \'b9\'e8\'c0\'c7 \'bb\'e7\'c0\'cc\'c5\'ac\'bf\'a1\'bc\'ad \'c3\'d6\'b4\'eb 8 \'b8\'ed\'b7\'c9\'c0\'bb \'bd\'c7\'c7\'e0\par
\par
\endash  Allows designers to develop highly effective RISC-like code for fast development time\par
\'bc\'b3\'b0\'e8\'c0\'da(\'bb\'e7\'bf\'eb\'c0\'da)\'b4\'c2 \'b0\'b3\'b9\'df \'bd\'c3\'b0\'a3\'c0\'bb \'b4\'dc\'c3\'e0\'c7\'cf\'b4\'c2 \'b5\'a5 \'b8\'c5\'bf\'ec \'c8\'bf\'b0\'fa\'c0\'fb\'c0\'ce RISC \'b0\'e8\'bf\'ad \'c4\'da\'b5\'e5\'b8\'a6 \'b0\'b3\'b9\'df\'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9\par
\par
\bullet  Instruction packing\par
\'c1\'f6\'c4\'a7 \'c6\'d1\par
\par
\endash  Gives code size equivalence for eight instructions executed serially or in parallel\par
\'c1\'f7\'b7\'c4 \'b6\'c7\'b4\'c2 \'ba\'b4\'b7\'c4\'b7\'ce \'bd\'c7\'c7\'e0\'b5\'c7\'b4\'c2 8 \'b0\'b3\'c0\'c7 \'b8\'ed\'b7\'c9\'be\'ee\'bf\'a1 \'b4\'eb\'c7\'d8 \'c4\'da\'b5\'e5 \'c5\'a9\'b1\'e2\'b8\'a6 \'b5\'bf\'c0\'cf\'c7\'cf\'b0\'d4 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\endash  Reduces code size, program fetches, and power consumption\par
\'c4\'da\'b5\'e5 \'c5\'a9\'b1\'e2, \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'c0\'ce\'c3\'e2 \'bc\'d2\'ba\'f1 \'c0\'fc\'b7\'c2\'c0\'bb \'c0\'fd\'b0\'a8\par
\par
\bullet  Conditional execution of most instructions\par
\'b4\'eb\'ba\'ce\'ba\'d0\'c0\'c7 \'b8\'ed\'b7\'c9\'be\'ee\'c0\'c7 \'c1\'b6\'b0\'c7\'ba\'ce \'bd\'c7\'c7\'e0\par
\endash  Reduces costly branching\par
\'ba\'f1\'bf\'eb\'c0\'cc \'b8\'b9\'c0\'cc \'b5\'e5\'b4\'c2 \'ba\'d0\'b1\'e2\'b8\'a6 \'c1\'d9\'c0\'d4\'b4\'cf\'b4\'d9.\par
\endash  Increases parallelism for higher sustained performance\par
\'c1\'f6\'bc\'d3\'c0\'fb\'c0\'ce \'bc\'ba\'b4\'c9 \'c7\'e2\'bb\'f3\'c0\'bb \'c0\'a7\'c7\'d8 \'ba\'b4\'b7\'c4 \'c3\'b3\'b8\'ae \'b1\'e2\'b4\'c9 \'c7\'e2\'bb\'f3\par
\par
\bullet  Efficient code execution on independent functional units\par
\'b5\'b6\'b8\'b3 \'bd\'c7\'c7\'e0\'c7\'fc \'b1\'e2\'b1\'e2\'bf\'a1\'bc\'ad\'c0\'c7 \'c8\'bf\'c0\'b2\'c0\'fb\'c0\'ce \'c4\'da\'b5\'e5 \'bd\'c7\'c7\'e0\par
\endash  Industry's most efficient C compiler on DSP benchmark suite\par
\'be\'f7\'b0\'e8 \'bf\'a1\'bc\'ad \'c3\'d6\'b0\'ed\'c0\'c7 \'c8\'bf\'c0\'b2\'bc\'ba\'c0\'bb \'c0\'da\'b6\'fb\'c7\'cf\'b4\'c2 DSP\'ba\'a5\'c4\'a1 \'b8\'b6\'c5\'a9 \'c1\'a6\'c7\'b0\'b1\'ba\par
\endash  Industry's first assembly optimizer for fast development and improved parallelization\par
- \'bd\'c5\'bc\'d3\'c7\'d1 \'b0\'b3\'b9\'df \'b9\'d7 \'b0\'b3\'bc\'b1 \'b5\'c8 \'ba\'b4\'b7\'c4\'c8\'ad\'b8\'a6\'c0\'a7\'c7\'d1 \'be\'f7\'b0\'e8 \'c3\'d6\'c3\'ca\'c0\'c7 \'be\'ee\'bc\'c0\'ba\'ed\'b8\'ae \'c3\'d6\'c0\'fb\'c8\'ad\par
\par
\bullet 8-/16-/32-bit/64-bit data support, providing efficient memory support for a variety of applications\par
8/16/32 \'ba\'f1\'c6\'ae / 64 \'ba\'f1\'c6\'ae \'b5\'a5\'c0\'cc\'c5\'cd \'c1\'f6\'bf\'f8\'c0\'b8\'b7\'ce \'b4\'d9\'be\'e7\'c7\'d1 \'be\'d6\'c7\'c3\'b8\'ae\'c4\'c9\'c0\'cc\'bc\'c7\'bf\'a1 \'c8\'bf\'c0\'b2\'c0\'fb\'c0\'ce \'b8\'de\'b8\'f0\'b8\'ae \'c1\'f6\'bf\'f8 \'c1\'a6\'b0\'f8\par
\par
\bullet 40-bit arithmetic options which add extra precision for vocoders and other computationally intensive\par
applications\par
\'ba\'b8\'c4\'da\'b4\'f5 \'b9\'d7 \'b1\'e2\'c5\'b8 \'bf\'ac\'bb\'ea \'c1\'fd\'be\'e0\'c0\'fb(\'b0\'ad\'c7\'d1) \'c0\'ce \'be\'d6\'c7\'c3\'b8\'ae\'c4\'c9\'c0\'cc\'bc\'c7\'c0\'bb\'c0\'a7\'c7\'d8 \'c1\'a4\'b9\'d0\'b5\'b5\'b8\'a6 \'b3\'f4\'bf\'a9\'c1\'d6\'b4\'c2 40 \'ba\'f1\'c6\'ae \'bf\'ac\'bb\'ea \'bf\'c9\'bc\'c7\par
\par
\bullet  Saturation and normalization to provide support for key arithmetic operations\par
\'c1\'d6\'bf\'e4 \'bb\'ea\'bc\'fa \'bf\'ac\'bb\'ea\'c0\'bb \'c1\'f6\'bf\'f8\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d1 \'c6\'f7\'c8\'ad \'b9\'d7 \'c1\'a4\'b1\'d4\'c8\'ad\par
\par
\bullet  Field manipulation and instruction extract, set, clear, and bit counting support common operation found\par
in control and data manipulation applications.\par
\'c7\'ca\'b5\'e5 \'c1\'b6\'c0\'db\'b0\'fa \'b8\'ed\'b7\'c9 \'c3\'df\'c3\'e2, \'bc\'bc\'c6\'ae, \u8203?\u8203?\'c5\'ac\'b8\'ae\'be\'ee \'b9\'d7 \'ba\'f1\'c6\'ae \'c4\'ab\'bf\'ee\'c6\'ae\'b4\'c2 \'c1\'a6\'be\'ee \'b9\'d7 \'b5\'a5\'c0\'cc\'c5\'cd \'c1\'b6\'c0\'db \'c0\'c0\'bf\'eb \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5\'bf\'a1\'bc\'ad \'ba\'bc \'bc\'f6\'c0\'d6\'b4\'c2 \'c0\'cf\'b9\'dd\'c0\'fb\'c0\'ce \'c0\'db\'be\'f7\'c0\'bb \'c1\'f6\'bf\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The C66x CPU has the following additional features :\par
C66x CPU\'bf\'a1\'b4\'c2 \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'c0\'ba \'c3\'df\'b0\'a1 \'b1\'e2\'b4\'c9\'c0\'cc \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\bullet  Each multiplier can perform two 16 \'a1\'bf 16-bit or four 8 \'a1\'bf 8 bit multiplies every clock cycle.\par
\'b0\'a2 \'b0\'f6\'bc\'c0\'b1\'e2\'b4\'c2 \'b8\'c5 \'c5\'ac\'b7\'b0\'c1\'d6\'b1\'e2\'b8\'b6\'b4\'d9 \'b5\'ce \'b0\'b3\'c0\'c7 16 \'a1\'bf 16 \'ba\'f1\'c6\'ae \'b6\'c7\'b4\'c2 \'b3\'d7 \'b0\'b3\'c0\'c7 8 \'a1\'bf 8 \'ba\'f1\'c6\'ae \'b0\'f6\'bc\'c0\'c0\'bb \'bc\'f6\'c7\'e0 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  Quad 8-bit and dual 16-bit instruction set extensions with data flow support\par
\'b5\'a5\'c0\'cc\'c5\'cd \'c8\'e5\'b8\'a7\'c0\'bb \'c1\'f6\'bf\'f8\'c7\'cf\'b4\'c2 \'c4\'f5\'b5\'e5 8 \'ba\'f1\'c6\'ae \'b9\'d7 \'b5\'e0\'be\'f3 16 \'ba\'f1\'c6\'ae \'b8\'ed\'b7\'c9\'be\'ee \'bc\'bc\'c6\'ae \'c8\'ae\'c0\'e5\par
\par
\bullet  Support for non-aligned 32-bit (word) and 64-bit (double word) memory accesses\par
\'ba\'f1 \'c1\'a4\'b7\'c4 32 \'ba\'f1\'c6\'ae (\'bf\'f6\'b5\'e5) \'b9\'d7 64 \'ba\'f1\'c6\'ae (\'b4\'f5\'ba\'ed \'bf\'f6\'b5\'e5) \'b8\'de\'b8\'f0\'b8\'ae \'be\'d7\'bc\'bc\'bd\'ba \'c1\'f6\'bf\'f8\par
\par
\bullet  Special communication-specific instructions have been added to address common operations in error-\par
correcting codes.\par
\'bf\'c0\'b7\'f9 \'c1\'a4\'c1\'a4 \'c4\'da\'b5\'e5\'c0\'c7 \'c0\'db\'be\'f7\'bf\'a1 \'c8\'bf\'c0\'b2\'c0\'bb \'c0\'a7\'c7\'d1 \'c6\'af\'ba\'b0\'c7\'d1 \'c5\'eb\'bd\'c5 \'b0\'fc\'b7\'c3 \'b8\'ed\'b7\'c9\'be\'ee\'b0\'a1 \'c3\'df\'b0\'a1\'b5\'c7\'be\'fa\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  Bit count and rotate hardware extends support for bit-level algorithms.\par
\'ba\'f1\'c6\'ae \'bc\'f6 \'b9\'d7 \'c8\'b8\'c0\'fc \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee\'b4\'c2 \'ba\'f1\'c6\'ae \'bc\'f6\'c1\'d8 \'be\'cb\'b0\'ed\'b8\'ae\'c1\'f2\'bf\'a1 \'b4\'eb\'c7\'d1 \'c1\'f6\'bf\'f8\'c0\'bb \'c8\'ae\'c0\'e5\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  Compact instructions: Common instructions (AND, ADD, LD, MPY) have 16-bit versions to reduce\par
code size.\par
\'c4\'c4\'c6\'d1\'c6\'ae \'b8\'ed\'b7\'c9 : \'b0\'f8\'c5\'eb \'b8\'ed\'b7\'c9 (AND, ADD, LD, MPY)\'c0\'ba \'c4\'da\'b5\'e5 \'c5\'a9\'b1\'e2\'b8\'a6 \'c1\'d9\'c0\'cc\'b1\'e2 \'c0\'a7\'c7\'d8 16 \'ba\'f1\'c6\'ae \'b9\'f6\'c0\'fc\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  Protected mode operation: A two-level system of privileged program execution to support higher-\par
capability operating systems and system features such as memory protection.\par
\'ba\'b8\'c8\'a3 \'b8\'f0\'b5\'e5 \'c0\'db\'b5\'bf : \'b3\'f4\'c0\'ba \'bc\'f6\'c1\'d8\'c0\'c7 \'b1\'e2\'b4\'c9\'c0\'bb \'b0\'ae\'c3\'e1 \'bf\'ee\'bf\'b5 \'c3\'bc\'c1\'a6 \'b9\'d7 \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3\'bf\'cd \'b0\'b0\'c0\'ba \'bd\'c3\'bd\'ba\'c5\'db \'b1\'e2\'b4\'c9\'c0\'bb \'c1\'f6\'bf\'f8\'c7\'cf\'b4\'c2 \'b1\'c7\'c7\'d1\'c0\'d6\'b4\'c2 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'bd\'c7\'c7\'e0\'c0\'c7 2 \'b4\'dc\'b0\'e8 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
\bullet  Exceptions support for error detection and program redirection to provide robust code execution\par
\'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'b9\'d7 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'b8\'ae\'b5\'f0\'b7\'ba\'bc\'c7(\'b9\'e6\'c7\'e2\'c0\'fc\'c8\'af)\'c0\'bb \'c1\'f6\'bf\'f8\'c7\'cf\'bf\'a9 \'b0\'c7\'b0\'ad\'c7\'d1(\'b1\'f2\'b2\'fb\'c7\'d1) \'c4\'da\'b5\'e5 \'bd\'c7\'c7\'e0\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  Hardware support for modulo loop operation to reduce code size and allow interrupts during fully-\par
pipelined code\par
\'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee \'c1\'f6\'bf\'f8\'c0\'bb \'c0\'a7\'c7\'d8 \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee \'c1\'f6\'bf\'f8-\'c4\'da\'b5\'e5 \'c5\'a9\'b1\'e2\'b8\'a6 \'c1\'d9\'c0\'cc\'b0\'ed \'c4\'da\'b5\'e5 \'b5\'b5\'c1\'df\'bf\'a1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'c7\'e3\'bf\'eb\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  Each multiplier can perform 32 \'a1\'bf 32 bit multiplies\par
\'b0\'a2 \'b0\'f6\'bc\'c0\'b1\'e2\'b4\'c2 32 \'a1\'bf 32 \'ba\'f1\'c6\'ae \'b0\'f6\'bc\'c0\'c0\'bb \'bc\'f6\'c7\'e0 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9\par
\par
\bullet  Additional instructions to support complex multiplies allowing up to eight 16-bit multiply/add/subtracts\par
per clock cycle\par
\'c5\'ac\'b7\'b0 \'bb\'e7\'c0\'cc\'c5\'ac \'b4\'e7 \'c3\'d6\'b4\'eb 8 \'b0\'b3\'c0\'c7 16 \'ba\'f1\'c6\'ae \'b0\'f6\'c7\'cf\'b1\'e2 / \'b4\'f5\'c7\'cf\'b1\'e2 / \'bb\'a9\'b1\'e2\'b8\'a6 \u8203?\u8203?\'c7\'e3\'bf\'eb\'c7\'cf\'b4\'c2 \'ba\'b9\'bc\'d2 \'b0\'f6\'bc\'c0\'c0\'bb \'c1\'f6\'bf\'f8\'c7\'cf\'b4\'c2 \'c3\'df\'b0\'a1 \'c1\'f6\'c4\'a7\par
\'c7\'d8\'bc\'ae : \'c7\'d1\'bb\'e7\'c0\'cc\'c5\'ac\'b4\'e7 \'c3\'d6\'b4\'eb 8\'b0\'b3\'c0\'c7 16\'ba\'f1\'c6\'ae\'b0\'a1 \'c0\'d6\'b4\'c2\'b5\'a5 \'b1\'d7\'b0\'cd\'b5\'e9\'b3\'a2\'b8\'ae \'b0\'f6\'c7\'cf\'b1\'e2 \'b4\'f5\'c7\'cf\'b1\'e2 \'95\'fb\'b1\'e2 \'b8\'a6 \'c7\'e3\'bf\'eb\'c7\'cf\'b4\'c2 \'ba\'b9\'bc\'d2 \'b0\'f6\'bc\'c0\'c0\'bb \'c1\'f6\'bf\'f8\'c7\'d1\'b4\'d9.\par
\par
The TMS320C66x has the following key improvements to the ISA :\par
TMS320C66x\'b4\'c2 ISA\'bf\'a1 \'b4\'eb\'c7\'d8 \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'c0\'ba \'c1\'d6\'bf\'e4 \'b0\'b3\'bc\'b1\'c1\'a1\'c0\'bb \'b0\'a1\'c1\'f6\'b0\'ed \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9 :\par
\par
\bullet  4x Multiply Accumulate improvement for both fixed and floating point\par
\'b0\'ed\'c1\'a4 \'bc\'d2\'bc\'f6\'c1\'a1 \'b9\'d7 \'ba\'ce\'b5\'bf \'bc\'d2\'bc\'f6\'c1\'a1 \'b8\'f0\'b5\'ce\'bf\'a1 \'b4\'eb\'c7\'d8 4 \'b9\'e8 \'b0\'f6\'c7\'cf\'b1\'e2 \'b4\'a9\'c0\'fb \'c7\'e2\'bb\'f3\par
\'b4\'d9\'b8\'a5 \'c7\'d8\'bc\'ae: \'b0\'ed\'c1\'a4 \'bc\'d2\'bc\'f6\'c1\'a1 \'b9\'d7 \'ba\'ce\'b5\'bf \'bc\'d2\'bc\'f6\'c1\'a1 \'b4\'eb\'c7\'d8 4 \'b9\'e8 (\'b4\'a9\'c0\'fb)\'b0\'f6\'c7\'cf\'b1\'e2 \'b1\'e2\'b4\'c9\'c8\'f7 \'c7\'e2\'bb\'f3\par
\par
\bullet  Enhancement of the vector processing capability for fixed and floating point\par
\'b0\'ed\'c1\'a4 \'bc\'d2\'bc\'f6\'c1\'a1 \'b9\'d7 \'ba\'ce\'b5\'bf \'bc\'d2\'bc\'f6\'c1\'a1 \'ba\'a4\'c5\'cd \'c3\'b3\'b8\'ae \'b1\'e2\'b4\'c9 \'b0\'ad\'c8\'ad\par
\par
\bullet  Addition of domain-specific instructions for complex arithmetic and matrix operations\par
\bullet  \'ba\'b9\'c0\'e2\'c7\'d1 \'bb\'ea\'bc\'fa \'bf\'ac\'bb\'ea\'b0\'fa \'c7\'e0\'b7\'c4 \'bf\'ac\'bb\'ea\'c0\'bb\'c0\'a7\'c7\'d1 \'b5\'b5\'b8\'de\'c0\'ce \'c6\'af\'c1\'a4 \'b8\'ed\'b7\'c9 \'c3\'df\'b0\'a1\par
\par
On the C66x ISA, the vector processing capability is improved by extending the width of the SIMD instructions.\par
C66x ISA\'bf\'a1\'bc\'ad SIMD \'b8\'ed\'b7\'c9\'be\'ee\'c0\'c7 \'b3\'ca\'ba\'f1\'b8\'a6 \'c8\'ae\'c0\'e5\'c7\'cf\'b8\'e9 \'ba\'a4\'c5\'cd \'c3\'b3\'b8\'ae \'b1\'e2\'b4\'c9\'c0\'cc \'c7\'e2\'bb\'f3\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The C674x DSP supports 2-way SIMD operations for 16-bit data and 4-way SIMD operations for 8-bit data.\par
C674x DSP\'b4\'c2 16 \'ba\'f1\'c6\'ae \'b5\'a5\'c0\'cc\'c5\'cd\'bf\'eb \'be\'e7\'b9\'e6\'c7\'e2 SIMD \'bf\'ac\'bb\'ea\'b0\'fa 8 \'ba\'f1\'c6\'ae \'b5\'a5\'c0\'cc\'c5\'cd\'bf\'eb 4-way SIMD \'bf\'ac\'bb\'ea\'c0\'bb \'c1\'f6\'bf\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
C66x enhances this capabilities with the addition of SIMD instructions for 32-bit data allowing operation on 128-bit vectors.\par
C66x\'b4\'c2 SIMD \'b8\'ed\'b7\'c9\'be\'ee\'b8\'a6 32 \'ba\'f1\'c6\'ae \'b5\'a5\'c0\'cc\'c5\'cd\'bf\'a1 \'c3\'df\'b0\'a1\'c7\'cf\'bf\'a9\'c0\'cc \'b1\'e2\'b4\'c9\'c0\'bb \'b0\'ad\'c8\'ad\'c7\'cf\'b0\'ed 128 \'ba\'f1\'c6\'ae \'ba\'a4\'c5\'cd\'bf\'a1\'bc\'ad\'c0\'c7 \'bf\'ac\'bb\'ea\'c0\'bb \'b0\'a1\'b4\'c9\'c7\'cf\'b0\'d4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
For example the QMPY32 instruction is able to perform the element to element multiplication between two vectors of four 32-bit data each.\par
\'bf\'b9\'b8\'a6 \'b5\'e9\'be\'ee, QMPY32 \'b8\'ed\'b7\'c9\'c0\'ba 4 \'b0\'b3\'c0\'c7 32 \'ba\'f1\'c6\'ae \'b5\'a5\'c0\'cc\'c5\'cd\'b7\'ce \'c0\'cc\'b7\'e7\'be\'ee\'c1\'f8 \'b5\'ce \'ba\'a4\'c5\'cd \'bb\'e7\'c0\'cc\'c0\'c7 \'bf\'e4\'bc\'d2\'bf\'cd \'bf\'e4\'bc\'d2\'c0\'c7 \'b0\'f6\'bc\'c0\'c0\'bb \'b0\'a2\'b0\'a2 \'bd\'c7\'c7\'e0\'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
C66x ISA includes a set of specific instructions to handle complex arithmetic and matrix operations.\par
C66x ISA\'b4\'c2 \'ba\'b9\'c0\'e2\'c7\'d1 \'bc\'f6\'c7\'d0 \'bf\'ac\'bb\'ea\'b0\'fa \'c7\'e0\'b7\'c4 \'bf\'ac\'bb\'ea\'c0\'bb \'c3\'b3\'b8\'ae\'c7\'cf\'b1\'e2\'c0\'a7\'c7\'d1 \'c6\'af\'c1\'a4 \'b8\'ed\'b7\'c9 \'bc\'bc\'c6\'ae\'b0\'a1 \'c6\'f7\'c7\'d4\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
---------------------------------\par
\bullet  TMS320C66x DSP CorePac memory components :\par
\bullet  TMS320C66x DSP CorePac \'b8\'de\'b8\'f0\'b8\'ae \'b1\'b8\'bc\'ba \'bf\'e4\'bc\'d2 :\par
\par
- A 32-KiB L1 program memory (L1P) configurable as cache and / or SRAM:\par
\'c4\'b3\'bd\'c3 \'b6\'c7\'b4\'c2 SRAM\'c0\'b8\'b7\'ce \'b1\'b8\'bc\'ba \'b0\'a1\'b4\'c9\'c7\'d1 32 KiB L1 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'b8\'de\'b8\'f0\'b8\'ae (L1P)\par
\par
\bullet  When configured as a cache, the L1P is a 1-way set-associative cache with a 32-byte cache line\par
\bullet  \'c4\'b3\'bd\'c3\'b7\'ce \'b1\'b8\'bc\'ba\'b5\'c7\'be\'ee\'c0\'d6\'b4\'c2 \'b0\'e6\'bf\'ec, L1P\'b4\'c2 32 \'b9\'d9\'c0\'cc\'c6\'ae\'c0\'c7 \'c4\'b3\'bd\'c3 \'b6\'f3\'c0\'ce\'c0\'bb \'b0\'a1\'c1\'f8 1 \'bf\'fe\'c0\'cc \'bc\'bc\'c6\'ae \'bf\'ac\'bb\'ea \'b0\'e1\'c7\'d5 \'c4\'b3\'bd\'c3\'c0\'d4\'b4\'cf\'b4\'d9\par
\par
\bullet  The DSP CorePac L1P memory controller provides bandwidth management, memory protection, and power-down functions\par
DSP CorePac L1P \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b4\'c2 \'b4\'eb\'bf\'aa\'c6\'f8 \'b0\'fc\'b8\'ae, \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'b9\'d7 \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'b1\'e2\'b4\'c9\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9\par
\par
\bullet  The L1P is capable of cache block and global coherence operations\par
L1P\'b4\'c2 \'c4\'b3\'bd\'c3 \'ba\'ed\'b7\'cf \'b9\'d7 \'b1\'db\'b7\'ce\'b9\'fa \'c0\'cf\'b0\'fc\'bc\'ba \'c1\'b6\'c0\'db\'c0\'cc \'b0\'a1\'b4\'c9\'c7\'cf\'b4\'d9\par
\par
\bullet  The L1P controller has an Error Detection (ED) mechanism, including necessary SRAM\par
L1P \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'bf\'a1\'b4\'c2 \'c7\'ca\'bf\'e4\'c7\'d1 SRAM\'c0\'bb \'c6\'f7\'c7\'d4\'c7\'cf\'bf\'a9 \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 (ED) \'b8\'de\'c4\'bf\'b4\'cf\'c1\'f2\'c0\'cc \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  The L1P memory can be fully configured as a cache or SRAM\par
L1P \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2 \'c4\'b3\'bd\'c3 \'b6\'c7\'b4\'c2 SRAM\'c0\'b8\'b7\'ce \'bf\'cf\'c0\'fc\'c8\'f7 \'b1\'b8\'bc\'ba \'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  Page size for L1P memory is 2KB\par
L1P \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7 \'c6\'e4\'c0\'cc\'c1\'f6 \'c5\'a9\'b1\'e2\'b4\'c2 2KB\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
\endash  A 32-KiB L1 data memory (L1D) configurable as cache and / or SRAM:\par
- \'c4\'b3\'bd\'c3 \'b9\'d7 / \'b6\'c7\'b4\'c2 SRAM\'c0\'b8\'b7\'ce \'b1\'b8\'bc\'ba \'b0\'a1\'b4\'c9\'c7\'d1 32K \'b9\'d9\'c0\'cc\'c6\'ae L1 \'b5\'a5\'c0\'cc\'c5\'cd \'b8\'de\'b8\'f0\'b8\'ae (L1D)\par
\par
\bullet  When configured as a cache, the L1D is a 2-way set-associative cache with a 64-byte cache line\par
\'c4\'b3\'bd\'c3\'b7\'ce \'b1\'b8\'bc\'ba\'b5\'c7\'be\'ee\'c0\'d6\'b4\'c2 \'b0\'e6\'bf\'ec L1D\'b4\'c2 64 \'b9\'d9\'c0\'cc\'c6\'ae\'c0\'c7 \'c4\'b3\'bd\'c3 \'b6\'f3\'c0\'ce\'c0\'bb \'b0\'a1\'c1\'f8 2 \'bf\'fe\'c0\'cc \'bc\'bc\'c6\'ae \'bf\'ac\'bb\'ea \'b0\'e1\'c7\'d5 \'c4\'b3\'bd\'c3\'c0\'d4\'b4\'cf\'b4\'d9\par
\par
\bullet The DSP CorePac L1D memory controller provides bandwidth management, memoryprotection, and power-down functions\par
DSP CorePac L1D \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b4\'c2 \'b4\'eb\'bf\'aa\'c6\'f8 \'b0\'fc\'b8\'ae, \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'b9\'d7 \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'b1\'e2\'b4\'c9\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9\par
\par
\bullet  The L1D memory can be fully configured as a cache or SRAM\par
L1D \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2 \'c4\'b3\'bd\'c3 \'b6\'c7\'b4\'c2 SRAM\'b7\'ce \'bf\'cf\'c0\'fc\'c8\'f7 \'b1\'b8\'bc\'ba\'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  No support for error correction or detection\par
\'bf\'c0\'b7\'f9 \'bc\'f6\'c1\'a4 \'b6\'c7\'b4\'c2 \'b0\'a8\'c1\'f6 \'c1\'f6\'bf\'f8 \'be\'c8 \'c7\'d4\par
\par
\bullet  Page size for L1D memory is 2KB\par
L1D \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7 \'c6\'e4\'c0\'cc\'c1\'f6 \'c5\'a9\'b1\'e2\'b4\'c2 2KB\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
\endash  A 288-KiB (program and data) L2 memory, only part of which is cacheable:\par
288-KiB (\'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'b9\'d7 \'b5\'a5\'c0\'cc\'c5\'cd) L2 \'b8\'de\'b8\'f0\'b8\'ae\'bf\'a1\'bc\'ad\'b4\'c2 \'c0\'cf\'ba\'ce\'b8\'b8 \'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9\'c7\'d5\'b4\'cf\'b4\'d9.\par
\bullet  When configured as a cache, the L2 memory is a 4-way set associative cache with a 128-byte cache line\par
\'c4\'b3\'bd\'c3\'b7\'ce \'b1\'b8\'bc\'ba\'b5\'c7\'be\'ee\'c0\'d6\'b4\'c2 \'b0\'e6\'bf\'ec L2 \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2 128 \'b9\'d9\'c0\'cc\'c6\'ae\'c0\'c7 \'c4\'b3\'bd\'c3 \'b6\'f3\'c0\'ce\'c0\'bb \'b0\'a1\'c1\'f8 4 \'bf\'fe\'c0\'cc \'bc\'bc\'c6\'ae \'bf\'ac\'bb\'ea \'b0\'e1\'c7\'d5 \'c4\'b3\'bd\'c3\'c0\'d4\'b4\'cf\'b4\'d9\par
\par
\bullet  Only 256 KiB of L2 memory can be configured as cache or SRAM\par
256 KiB L2 \'b8\'de\'b8\'f0\'b8\'ae \'b8\'b8 \'c4\'b3\'bd\'c3 \'b6\'c7\'b4\'c2 SRAM\'c0\'b8\'b7\'ce \'b1\'b8\'bc\'ba \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  32 KiB of the L2 memory is always mapped as SRAM\par
L2 \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7 32 KiB\'b4\'c2 \'c7\'d7\'bb\'f3 SRAM\'c0\'b8\'b7\'ce \'b8\'c5\'c7\'ce\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
\bullet  The L2 memory controller has an Error Correction Code (ECC) and ED mechanism, including necessary SRAM\par
L2 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b4\'c2 ECC (\'bf\'c0\'b7\'f9\'bc\'f6\'c1\'a4\'c4\'da\'b5\'e5)\'bf\'cd ED \'b8\'de\'c4\'bf\'b4\'cf\'c1\'f2 \'c0\'cc \'c7\'ca\'bf\'e4\'c7\'d1 SRAM \'c0\'d6\'b4\'d9.\par
\par
\bullet  The L2 memory controller supports hardware prefetching and also provides bandwidth management, memory protection, and power-down functions.\par
\bullet  L2 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b4\'c2 \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee \'c7\'c1\'b8\'ae \'c6\'e4\'c4\'a1\'b8\'a6 \'c1\'f6\'bf\'f8\'c7\'cf\'b0\'ed \'b4\'eb\'bf\'aa\'c6\'f8 \'b0\'fc\'b8\'ae, \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'b9\'d7 \'c0\'fc\'bf\'f8 \'c2\'f7\'b4\'dc \'b1\'e2\'b4\'c9\'b5\'b5 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  Page size for L2 memory is 16KB\par
\bullet  L2 \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7 \'c6\'e4\'c0\'cc\'c1\'f6 \'c5\'a9\'b1\'e2\'b4\'c2 16KB\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
\bullet  The External Memory Controller (EMC) is a bridge from the C66x CorePac to the rest of the DSP subsystem and device. It has :\par
\'bf\'dc\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (EMC)\'b4\'c2 C66x CorePac\'bf\'a1\'bc\'ad \'b3\'aa\'b8\'d3\'c1\'f6 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b9\'d7 \'c0\'e5\'c4\'a1\'b1\'ee\'c1\'f6\'c0\'c7 \'b4\'d9\'b8\'ae\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
\endash  a 32-bit configuration port (CFG) providing access to local subsystem resources (like DSP_EDMA,DSP_SYSTEM, etc) or to L3_MAIN resources accessible via the CFG address range.\par
\'b7\'ce\'c4\'c3 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b8\'ae\'bc\'d2\'bd\'ba (\'bf\'b9 : DSP_EDMA, DSP_SYSTEM \'b5\'ee) \'b6\'c7\'b4\'c2 CFG \'c1\'d6\'bc\'d2 \'b9\'fc\'c0\'a7\'b8\'a6 \'c5\'eb\'c7\'d8 \'be\'d7\'bc\'bc\'bd\'ba \'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'c2 L3_MAIN \'b8\'ae\'bc\'d2\'bd\'ba\'bf\'a1 \'b4\'eb\'c7\'d1 \'be\'d7\'bc\'bc\'bd\'ba\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'cf\'b4\'c2 32 \'ba\'f1\'c6\'ae \'b1\'b8\'bc\'ba \'c6\'f7\'c6\'ae (CFG)\par
\par
\endash  a 128-bit slave-DMA port (SDMA) which provides accesses of system masters outside the DSP subsystem to resources inside the DSP subsystem or C66x DSP CorePac memories, i.e. when the DSP subsystem is the slave in a transaction.\par
DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce\'c0\'c7 \'bd\'c3\'bd\'ba\'c5\'db \'b8\'b6\'bd\'ba\'c5\'cd\'c0\'c7 \'be\'d7\'bc\'bc\'bd\'ba\'b8\'a6 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b6\'c7\'b4\'c2 C66x DSP \'c4\'da\'be\'ee \'c6\'d1 \'b8\'de\'b8\'f0\'b8\'ae \'b3\'bb\'ba\'ce\'c0\'c7 \'b8\'ae\'bc\'d2\'bd\'ba, \'c1\'ef DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'cc \'c6\'ae\'b7\'a3\'c0\'e8\'bc\'c7\'bf\'a1\'bc\'ad \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea \'c0\'ce \'b0\'e6\'bf\'ec\'bf\'a1 \'c1\'a6\'b0\'f8\'c7\'cf\'b4\'c2 128 \'ba\'f1\'c6\'ae \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea -DMA \'c6\'f7\'c6\'ae (SDMA).\par
\par
\bullet  The Extended Memory Controller (XMC) processes requests from the L2 Cache Controller (which are\par
a result of CPU instruction fetches, load/store commands, cache operations) to device resources via\par
the C66x DSP CorePac 128-bit master DMA (MDMA) port :\par
\'c8\'ae\'c0\'e5 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (XMC)\'b4\'c2 C66x DSP CorePac 128 \'ba\'f1\'c6\'ae Main DMA (MDMA) \'c6\'f7\'c6\'ae\'b8\'a6 \'c5\'eb\'c7\'d8 L2 \'c4\'b3\'bd\'ac \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (CPU \'b8\'ed\'b7\'c9\'be\'ee \'c0\'ce\'c3\'e2\'b7\'ce\'b5\'e5 / \'c0\'fa\'c0\'e5 \'b8\'ed\'b7\'c9\'be\'ee \'c4\'b3\'bd\'c3 \'c0\'db\'be\'f7\'c0\'c7 \'b0\'e1\'b0\'fa \'bf\'b5\'bf\'aa)\'bf\'a1\'bc\'ad \'c0\'e5\'c4\'a1 \'b8\'ae\'bc\'d2\'bd\'ba\'bf\'a1 \'b4\'eb\'c7\'d1 \'bf\'e4\'c3\'bb\'c0\'bb \'c3\'b3\'b8\'ae \'c7\'d5\'b4\'cf\'b4\'d9.\par
\endash  Memory protection for addresses outside C66x DSP CorePac generated over device L3_MAIN on the MDMA port\par
MDMA \'c6\'f7\'c6\'ae\'bf\'a1 \'c0\'e5\'c4\'a1 L3_MAIN\'c0\'bb \'c5\'eb\'c7\'d8 \'bb\'fd\'bc\'ba \'b5\'c8 C66x DSP CorePac \'bf\'dc\'ba\'ce \'c1\'d6\'bc\'d2\'bf\'a1 \'b4\'eb\'c7\'d1 \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3\par
\endash  Prefetch, multi-in-flight requests\par
\par
\'c7\'c1\'b8\'ae \'c6\'e4\'c4\'a1 \'bf\'a9\'b7\'af \'ba\'f1\'c7\'e0 \'bf\'e4\'b1\'b8\par
\par
\bullet  A DSP local Interrupt Controller (INTC) in the DSP C66x CorePac, interfaces the system events to the DSP C66x core CPU interrupt and exceptions inputs. Each DSP subsystem C66x CorePac interrupt controller supports up to 128 system events of which 64 interrupts are external to DSP subsystems, collected from the DSP1 /DSP2 dedicated outputs of the device Interrupt Crossbar.\par
DSP C66x CorePac\'c0\'c7 DSP \'b7\'ce\'c4\'c3 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (INTC)\'b4\'c2 \'bd\'c3\'bd\'ba\'c5\'db \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 DSP C66x \'c4\'da\'be\'ee CPU \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'b9\'d7 \'bf\'b9\'bf\'dc \'c0\'d4\'b7\'c2\'bf\'a1 \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'c7\'d5\'b4\'cf\'b4\'d9.\par
\'b0\'a2 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db C66x CorePac \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b4\'c2 \'c3\'d6\'b4\'eb 128 \'b0\'b3\'c0\'c7 \'bd\'c3\'bd\'ba\'c5\'db \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c1\'f6\'bf\'f8\'c7\'cf\'b0\'ed 64 \'b0\'b3\'c0\'c7 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c0\'e5\'c4\'a1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c5\'a9\'b7\'ce\'bd\'ba\'b9\'d9 DSP1 / DSP2 \'c0\'fc\'bf\'eb \'c3\'e2\'b7\'c2\'bf\'a1\'bc\'ad \u8203?\u8203?\'bc\'f6\'c1\'fd \'b5\'c8 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'bf\'dc\'ba\'ce\'bf\'a1 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  Local Enhanced Direct Memory Access (EDMA) controller feaures:\par
\par
\'b7\'ce\'c4\'c3 \'c7\'e2\'bb\'f3\'b5\'c8 \'b4\'d9\'c0\'cc\'b7\'ba\'c6\'ae \'b8\'de\'b8\'f0\'b8\'ae \'be\'d7\'bc\'bc\'bd\'ba (EDMA) \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'c0\'c7 \'c6\'af\'c2\'a1 :\par
\par
\'b7\'ce\'c4\'c3 \'c8\'ae\'c0\'e5 \'c1\'f7\'c1\'a2 \'b8\'de\'b8\'f0\'b8\'ae \'be\'d7\'bc\'bc\'bd\'ba\par
\par
\endash  Channel controller (CC) : 64-channel, 128 PaRAM, 2 Queues\par
\'c3\'a4\'b3\'ce \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (CC) : 64 \'c3\'a4\'b3\'ce, 128 PaRAM, 2 \'b4\'eb\'b1\'e2\'bf\'ad\par
\par
\endash  2 x Third-party Transfer Controllers (TPTC0 and TPTC1):\par
2 x Third-party\'c0\'fc\'bc\'db \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af(TPTC0 and TPTC1)\par
\par
\bullet  Each TC has a 128-bit read port and a 128-bit write port\par
\'b0\'a2 TC\'bf\'a1\'b4\'c2 128 \'ba\'f1\'c6\'ae \'c0\'d0\'b1\'e2 \'c6\'f7\'c6\'ae\'bf\'cd 128 \'ba\'f1\'c6\'ae \'be\'b2\'b1\'e2 \'c6\'f7\'c6\'ae\'b0\'a1 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9\par
\par
\bullet  2KiB FIFOs on each TPTC\par
\'b0\'a2 TPTC\'bf\'a1 2KiB FIFO\par
\par
\endash  1-dimensional/2-dimensional (1D/2D) addressing\par
1 \'c2\'f7\'bf\'f8 / 2 \'c2\'f7\'bf\'f8 (1D / 2D) \'be\'ee\'b5\'e5\'b7\'b9\'bd\'cc\par
\par
\endash  Chaining capability\par
\'bf\'ac\'bc\'e2 \'b1\'e2\'b4\'c9\par
\par
\bullet  DSP subsystems integrated MMUs:\par
DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'c5\'eb\'c7\'d5 MMU :\par
\par
\endash  Two MMUs are integrated:\par
\'b5\'ce MMU\'b0\'a1 \'c5\'eb\'c7\'d5\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  The MMU0 is located between DSP MDMA master port and the device L3_MAIN interconnect\par
and can be optionally bypassed\par
MMU0\'b4\'c2 DSP MDMA \'b8\'b6\'bd\'ba\'c5\'cd \'c6\'f7\'c6\'ae \'bf\'cd L3_MAIN interconnect\'bb\'e7\'c0\'cc \'bf\'a1 \'c0\'a7\'c4\'a1\'c7\'cf\'b0\'ed \'c0\'d6\'c0\'b8\'b8\'e7,\'bc\'b1\'c5\'c3\'c0\'fb\'c0\'b8\'b7\'ce \'bf\'ec\'c8\'b8\'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  The MMU1 is located between the EDMA master port and the device L3_MAIN interconnect\par
MMU1\'c0\'ba EDMA \'b8\'b6\'bd\'ba\'c5\'cd \'c6\'f7\'c6\'ae\'bf\'cd \'c0\'e5\'c4\'a1 L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 \'c0\'e5\'c4\'a1 \'bb\'e7\'c0\'cc\'bf\'a1 \'c0\'a7\'c4\'a1\'c7\'d5\'b4\'cf\'b4\'d9\par
\par
\bullet  A DSP local Power-Down Controller (PDC) is responsible to power-down various parts of the DSP\par
C66x CorePac, or the entire DSP C66x CorePac.\par
DSP \'b7\'ce\'c4\'c3 \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (PDC)\'b4\'c2 DSP C66x CorePac \'b6\'c7\'b4\'c2 DSP C66x CorePac \'c0\'fc\'c3\'bc\'c0\'c7 \'b4\'d9\'be\'e7\'c7\'d1 \'ba\'ce\'ba\'d0\'c0\'c7 \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee\'c0\'bb\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  The DSP subsystems System Control logic provides:\par
DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'bd\'c3\'bd\'ba\'c5\'db \'c1\'a6\'be\'ee \'b7\'ce\'c1\'f7\'c0\'ba \'b4\'d9\'c0\'bd\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\endash  Slave idle and master standby protocols with device PRCM for powerdown\par
Slave idle \'b9\'d7 \'b8\'b6\'bd\'ba\'c5\'cd \'b4\'eb\'b1\'e2 \'c7\'c1\'b7\'ce\'c5\'e4\'c4\'dd\'b8\'a6 \'c0\'fd\'c0\'fc\'c0\'e5\'c4\'a1 PRCM\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 \'c0\'fd\'c0\'fc\'c7\'d1\'b4\'d9.\par
\endash  OCP Disconnect handshake for init and target busses\par
OCP \'c3\'ca\'b1\'e2\'c8\'ad \'b9\'d7 \'b4\'eb\'bb\'f3 \'b9\'f6\'bd\'ba\'bf\'a1 \'b4\'eb\'c7\'d1 \'c7\'da\'b5\'e5 \'bc\'ce\'c0\'cc\'c5\'a9 \'bf\'ac\'b0\'e1 \'b2\'f7\'b1\'e2\par
\endash  Asynchronous reset\par
\'ba\'f1\'b5\'bf\'b1\'e2\'bd\'c4 \'c0\'e7\'bc\'b3\'c1\'a4\par
\endash  Power-down modes :\par
\'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'b8\'f0\'b5\'e5\par
\bullet  "Clockstop" mode featuring wake-up on interrupt event. The DMA event wake-up is managed in\par
software.\par
\'c5\'ac\'b7\'a2\'bd\'ba\'c5\'be \'b8\'f0\'b5\'e5\'b1\'e2\'b4\'c9 \'c0\'ba \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'b1\'fa\'bf\'ee\'b4\'d9. DMA \'c0\'cc\'ba\'a5\'c6\'ae \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'b1\'e2\'b4\'c9\'c0\'ba \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'bf\'a1 \'c0\'c7\'c7\'d8 \'b0\'fc\'b8\'ae\'b5\'cb\'b4\'cf\'b4\'d9.\par
\bullet  The device DSP subsystems are supplied by a PRCM DPLL, but each DSP1/2 has integrated its\par
own PLL module outside the C66x CorePac for clock gating and division.\par
\'c0\'e5\'c4\'a1 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'ba PRCM DPLL\'b7\'ce \'ba\'ce\'c5\'cd \'b0\'f8\'b1\'de\'b5\'c7\'c1\'f6\'b8\'b8, \'b0\'a2 DSP1 / 2\'b4\'c2 \'c5\'ac\'b7\'cf \'b0\'d4\'c0\'cc\'c6\'c3 \'b9\'d7 \'ba\'d0\'b9\'e8\'b8\'a6 \'c0\'a7\'c7\'d8 \'c0\'da\'c3\'bc PLL \'b8\'f0\'b5\'e2\'c0\'bb C66x \'c4\'da\'be\'ee \'c6\'d1 \'bf\'dc\'ba\'ce\'bf\'a1 \'c5\'eb\'c7\'d5\'c7\'df\'bd\'c0\'b4\'cf\'b4\'d9.\par
\bullet  Each of the two device DSP subsystems has following port instances to connect to remaining part of the device. See also Figure 5-1:\par
\'b0\'a2\'b0\'a2\'c0\'c7 DSP\'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'c0\'ba \'b1\'e2\'b1\'e2\'c0\'c7 \'b3\'aa\'b8\'d3\'c1\'f6 \'ba\'ce\'ba\'d0\'c0\'bb \'bf\'ac\'b0\'e1\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 \'b4\'d9\'c0\'bd \'c6\'f7\'c6\'ae\'b8\'a6 \'b5\'fb\'b8\'a5\'b4\'d9. \'b1\'d7\'b8\'b2 5-1\'c2\'fc\'c1\'b6:\par
\par
\endash  A 128-bit initiator (DSP MDMA master) port for MDMA/Cache requests\par
MDMA / \'c4\'b3\'bd\'c3 \'bf\'e4\'b1\'b8\'bf\'a1 \'b4\'eb\'c7\'d1 128 \'ba\'f1\'c6\'ae \'c3\'ca\'b1\'e2 (DSP MDMA \'b8\'b6\'bd\'ba\'c5\'cd) \'c6\'f7\'c6\'ae\par
\par
\endash  A 128-bit initiator (DSP EDMA master) port for EDMA requests\par
EDMA \'bf\'e4\'b1\'b8\'bf\'a1 \'b4\'eb\'c7\'d1 128 \'ba\'f1\'c6\'ae \'c3\'ca\'b1\'e2 (DSP EDMA \'b8\'b6\'bd\'ba\'c5\'cd) \'c6\'f7\'c6\'ae\par
\par
\endash  A 32-bit initiator (DSP CFG master) port for configuration requests\par
\'b1\'b8\'bc\'ba \'bf\'e4\'b1\'b8\'b8\'a6\'c0\'a7\'c7\'d1 32 \'ba\'f1\'c6\'ae \'c3\'ca\'b1\'e2 (DSP CFG \'b8\'b6\'bd\'ba\'c5\'cd) \'c6\'f7\'c6\'ae\par
\par
\endash  A 128-bit target (DSP slave) port for requests to DSP memories and various peripherals\par
DSP \'b8\'de\'b8\'f0\'b8\'ae \'b9\'d7 \'c1\'d6\'ba\'af\'b1\'e2\'b1\'e2\'bf\'a1 \'b4\'eb\'c7\'d1 \'bf\'e4\'c3\'bb\'bf\'a1 \'b4\'eb\'c7\'d1 128 \'ba\'f1\'c6\'ae \'c5\'b8\'b0\'d9 DSP (\'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea) \'c6\'f7\'c6\'ae\par
\par
\bullet  C66x DSP subsystems (DSPSS) safety aspects :\par
C66x DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db (DSPSS)\'c0\'c7 \'be\'c8\'c0\'fc :\par
\endash  Above mentioned memory ECC/ED mechanisms\par
\'bb\'f3\'b1\'e2 \'b8\'de\'b8\'f0\'b8\'ae ECC / ED \'b8\'de\'c4\'bf\'b4\'cf\'c1\'f2\par
\par
\endash  MMUs enable mapping of only the necessary application space to the processor\par
MMU\'c7\'d1\'c5\'d7\'b4\'c2 \'c7\'ca\'bf\'e4\'c7\'d1 \'c0\'c0\'bf\'eb \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'b0\'f8\'b0\'a3 \'c7\'c1\'b7\'ce\'bc\'bc\'bc\'ad\'bf\'a1\'b8\'b8 \'b8\'c5\'c7\'ce \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9\par
\endash  Memory Protection Units internal to the DSPSS ( in L1P,L1D and L2 memory controllers ) and\par
external to DSPSS (firewalls) to help define legal accesses and raise exceptions on illegalaccesses\par
\'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 DSPSS \'b3\'bb\'ba\'ce (L1P, L1D \'b9\'d7 L2 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af) \'b9\'d7 DSPSS (\'b9\'e6\'c8\'ad\'ba\'ae) \'bf\'dc\'ba\'ce\'bf\'a1\'bc\'ad \'c7\'d5\'b9\'fd\'c0\'fb \'c0\'ce \'be\'d7\'bc\'bc\'bd\'ba\'b8\'a6 \'c1\'a4\'c0\'c7\'c7\'cf\'b0\'ed \'ba\'d2\'b9\'fd\'c0\'fb \'c0\'ce \'be\'d7\'bc\'bc\'bd\'ba\'bf\'a1 \'b4\'eb\'c7\'d1 \'bf\'b9\'bf\'dc\'b8\'a6 \'b9\'df\'bb\'fd\'bd\'c3\'c5\'b0\'b4\'c2 \'c0\'e5\'c4\'a1\par
\endash  Exceptions: Memory errors, various DSP errors, MMU errors and some system errors are detected\par
and cause exceptions. The exceptions could be handled by the DSP or by a designated safety\par
processor at the chip level. Note that it may not be possible for the safety processor to completely handle some exceptions\par
\'bf\'b9\'bf\'dc:\'b8\'de\'b8\'f0\'b8\'ae \'bf\'c0\'b7\'f9, \'b4\'d9\'be\'e7\'c7\'d1 DSP\'bf\'c0\'b7\'f9 MMU \'bf\'c0\'b7\'f9\'b9\'d7 \'c0\'cf\'ba\'ce \'bd\'c3\'bd\'ba\'c5\'db \'bf\'c0\'b7\'f9\'b4\'c2 \'bf\'b9\'bf\'dc\'c7\'d1\'b4\'d9. \'bf\'b9\'bf\'dc\'b4\'c2 DSP \'b6\'c7\'b4\'c2 \'c4\'a8 \'b7\'b9\'ba\'a7\'bf\'a1 \'c1\'f6\'c1\'a4\'b5\'c8 \'be\'c8\'c0\'fc \'c7\'c1\'b7\'ce\'bc\'bc\'bc\'ad\'bf\'a1 \'c0\'c7\'c7\'d8 \'c3\'b3\'b8\'ae \'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9. \'be\'c8\'c0\'fc \'c7\'c1\'b7\'ce\'bc\'bc\'bc\'ad\'b0\'a1 \'c0\'cf\'ba\'ce \'bf\'b9\'bf\'dc\'b8\'a6 \'bf\'cf\'c0\'fc\'c8\'f7 \'c3\'b3\'b8\'ae\'c7\'cf\'c1\'f6 \'b8\'f8\'c7\'d2 \'bc\'f6 \'c0\'d6\'b4\'d9\'b4\'c2 \'c1\'a1\'bf\'a1 \'c0\'af\'c0\'c7\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
Unsupported features on the C66x DSP core for the device are:\par
 C66x DSP \'c4\'da\'be\'ee \'c0\'e5\'c4\'a1 \'bf\'a1\'bc\'ad \'c1\'f6\'bf\'f8\'b5\'c7\'c1\'f6 \'be\'ca\'b4\'c2 \'b1\'e2\'b4\'c9\par
\par
\bullet  The Extended Memory Controller MPAX (memory protection and address extension) 36-bit addressing\par
is NOT supported\par
\'c8\'ae\'c0\'e5 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af MPAX (\'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'b9\'d7 \'c1\'d6\'bc\'d2 \'c8\'ae\'c0\'e5) \'b4\'c2 36 \'ba\'f1\'c6\'ae \'be\'ee\'b5\'e5\'b7\'b9\'bd\'cc\'c0\'bb \'c1\'f6\'bf\'f8\'c7\'cf\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9\par
\par
Known DSP subsystem powermode restrictions for the device are :\par
\'c0\'e5\'c4\'a1\'bf\'a1 \'b4\'eb\'c7\'d1 \'be\'cb\'b7\'c1\'c1\'f8 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db powermode \'c1\'a6\'c7\'d1 \'bb\'e7\'c7\'d7\'c0\'ba \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  "Full logic / RAM retention" mode featuring wake-up on both interrupt or DMA event (logic in \ldblquote always\par
on\rdblquote  domain). Only OFF mode is supported by DSP subsystem, requiring full boot.\par
\'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'bf\'cd DMA \'c0\'cc\'ba\'a5\'c6\'ae ( "\'bf\'c3\'bf\'fe\'c0\'cc\'c1\'ee \'bf\'c2"\'b5\'b5\'b8\'de\'c0\'ce \'b7\'ce\'c1\'f7)\'bf\'a1\'bc\'ad \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'c0\'bb \'c6\'af\'c2\'a1\'c0\'b8\'b7\'ce \'c7\'cf\'b4\'c2 '\'c0\'fc\'c3\'bc \'b7\'ce\'c1\'f7 / RAM \'c0\'af\'c1\'f6 "\'b8\'f0\'b5\'e5.\par
OFF \'b8\'f0\'b5\'e5\'b8\'b8\'c0\'cc DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'bf\'a1\'bc\'ad \'c1\'f6\'bf\'f8\'b5\'c7\'b9\'c7\'b7\'ce \'c0\'fc\'c3\'bc \'ba\'ce\'c6\'c3\'c0\'cc \'c7\'ca\'bf\'e4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.2\par
DSP Subsystem Integration\par
DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'c5\'eb\'c7\'d5\par
\par
This section describes the integration of the module in the device, including information about clocks,\par
resets, and hardware requests.\par
\'c0\'cc \'bc\'bd\'bc\'c7\'bf\'a1\'bc\'ad\'b4\'c2 \'c5\'ac\'b7\'b0 \'c0\'e7\'bc\'b3\'c1\'a4 \'b9\'d7 \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee \'bf\'e4\'b1\'b8\'bf\'a1 \'b4\'eb\'c7\'d1 \'c1\'a4\'ba\'b8\'b8\'a6 \'c6\'f7\'c7\'d4\'c7\'cf\'b8\'e7 \'c0\'e5\'c4\'a1 \'b8\'f0\'b5\'e2\'c0\'c7 \'c5\'eb\'c7\'d5\'bf\'a1 \'b4\'eb\'c7\'d8 \'bc\'b3\'b8\'ed\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Figure 5-2 shows the integration of the DSP subsystem.\par
Figure 5-2  DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'c5\'eb\'c7\'d5\'c0\'bb \'ba\'b8\'bf\'a9\'c1\'dd\'b4\'cf\'b4\'d9.\par
\par
NOTE: For more information about the slave idle protocol and the wake-up request, see\par
Section 3.1.1.1.2, Module-Level Clock Management, in Chapter 3, Power, Reset, and Clock\par
Management.\par
\'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea \'be\'c6\'c0\'cc\'b5\'b9 \'c7\'c1\'b7\'ce\'c5\'e4\'c4\'dd \'b9\'d7 \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'bf\'e4\'c3\'bb\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 3 \'c0\'e5 "\'c0\'fc\'bf\'f8, \'b8\'ae\'bc\'c2, \'c5\'ac\'b7\'cf \'b0\'fc\'b8\'ae"\'c0\'c7 "3.1.1.1.2 \'b8\'f0\'b5\'e2 \'bc\'f6\'c1\'d8\'c0\'c7 \'c5\'ac\'b7\'b0 \'b0\'fc\'b8\'ae"\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
Table 5-1 through Table 5-3 summarize the integration of the module in the device.\par
\'c7\'a5 5-1\'bf\'a1\'bc\'ad \'c7\'a5 5-3\'c0\'ba \'c0\'e5\'c4\'a1\'bf\'a1\'bc\'ad \'b8\'f0\'b5\'e2\'c0\'c7 \'c5\'eb\'c7\'d5\'c0\'bb \'bf\'e4\'be\'e0\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
For information about PRCM reset sources and distribution, see Section 3.10.2,PD_DSP1 Description in Chapter 3, Power, Reset, and Clock Management. For DSP1 local reset details see also the Section 5.3.3.2.\par
PRCM \'c0\'e7\'bc\'b3\'c1\'a4 \'bc\'d2\'bd\'ba \'b9\'d7 \'b9\'e8\'c6\'f7\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 3 \'c0\'e5, \'c0\'fc\'bf\'f8, \'c0\'e7\'bc\'b3\'c1\'a4 \'b9\'d7 \'c5\'ac\'b7\'cf \'b0\'fc\'b8\'ae\'c0\'c7 3.10.2 \'c0\'fd, PD_DSP1 \'bc\'b3\'b8\'ed\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0. DSP1 \'b7\'ce\'c4\'c3 \'b8\'ae\'bc\'c2\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.3.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: For information about PRCM clock gating and management, see Section 3.10.2, PD_DSP1\par
Description and Section 3.10.3, PD_DSP2 Description in Chapter 3, Power, Reset, and Clock Management.\par
PRCM \'c5\'ac\'b7\'cf \'b0\'d4\'c0\'cc\'c6\'c3 \'b9\'d7 \'b0\'fc\'b8\'ae\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 3.10.2 \'c0\'fd, PD_DSP1 \'bc\'b3\'b8\'ed \'b9\'d7 3.10.3 \'c0\'fd, PD_DSP2 \'bc\'b3\'b8\'ed\'c0\'ba 3 \'c0\'e5, \'c0\'fc\'bf\'f8 \'c0\'e7\'bc\'b3\'c1\'a4 \'b9\'d7 \'c5\'ac\'b7\'b0 \'b0\'fc\'b8\'ae\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
The DSP1 / DSP2 generates a number of interrupt requests (IRQs) mapped via the device\par
IRQ_CROSBBAR to other device interrupt controllers (outside DSP subsystem). They are described in\par
Table 5-3.\par
DSP1 / DSP2\'b4\'c2 IRQ_CROSBBAR \'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba\'b8\'a6 \'c5\'eb\'c7\'d8 \'b4\'d9\'b8\'a5 \'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce)\'bf\'a1 \'b8\'c5\'c7\'ce \'b5\'c8 \'bf\'a9\'b7\'af \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bf\'e4\'c3\'bb (IRQ)\'c0\'bb \'bb\'fd\'bc\'ba\'c7\'d5\'b4\'cf\'b4\'d9. \'c7\'a5 5-3.\'bf\'a1 \'bc\'b3\'b8\'ed\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9\par
\par
P1725 DESCRIPTION\par
\par
DSP1 subsystem local MMU1 (DSP1_MMUCFG1) interrupt.\par
DSP1 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b7\'ce\'c4\'c3 MMU1 (DSP1_MMUCFG1) \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae.\par
This IRQ source signal is not mapped by default to any device INTC.\par
\'c0\'cc IRQ \'bc\'d2\'bd\'ba \'bd\'c5\'c8\'a3\'b4\'c2 \'b1\'e2\'ba\'bb\'c0\'fb\'c0\'b8\'b7\'ce \'b8\'f0\'b5\'e7 \'c0\'e5\'c4\'a1 INTC\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'c7\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
DSP1 subsystem aggregated ("OR-ed") error interrupt.\par
DSP1 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'c1\'fd\'b0\'e8 ( "OR-ed") \'bf\'c0\'b7\'f9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae.\par
This IRQ source signal is not mapped by default to any device INTC.\par
\'c0\'cc IRQ \'bc\'d2\'bd\'ba \'bd\'c5\'c8\'a3\'b4\'c2 \'b1\'e2\'ba\'bb\'c0\'fb\'c0\'b8\'b7\'ce \'b8\'f0\'b5\'e7 \'c0\'e5\'c4\'a1 INTC\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'c7\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
DSP1 subsystem EDMAchannel controller global interrupt.\par
DSP1 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db EDMA \'c3\'a4\'b3\'ce \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'b1\'db\'b7\'ce\'b9\'fa \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae.\par
This IRQ source signal is not mapped by default to any device INTC.\par
\'c0\'cc IRQ \'bc\'d2\'bd\'ba \'bd\'c5\'c8\'a3\'b4\'c2 \'b1\'e2\'ba\'bb\'c0\'fb\'c0\'b8\'b7\'ce \'b8\'f0\'b5\'e7 \'c0\'e5\'c4\'a1 INTC\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'c7\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
DSP2 subsystem local MMU0 (DSP2_MMU0CFG) interrupt.\par
DSP2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b7\'ce\'c4\'c3 MMU0 (DSP2_MMU0CFG) \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae.\par
This IRQ source signal is not mapped by default to any device INTC.\par
\'c0\'cc IRQ \'bc\'d2\'bd\'ba \'bd\'c5\'c8\'a3\'b4\'c2 \'b1\'e2\'ba\'bb\'c0\'fb\'c0\'b8\'b7\'ce \'b8\'f0\'b5\'e7 \'c0\'e5\'c4\'a1 INTC\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'c7\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
DSP2 subsystem EDMA channel controller REGION0 interrupt.\par
DSP2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db EDMA \'c3\'a4\'b3\'ce \'c1\'a6\'be\'ee\'b1\'e2 REGION0 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae.\par
This IRQ source signal is not mapped by default to any device INTC.\par
\'c0\'cc IRQ \'bc\'d2\'bd\'ba \'bd\'c5\'c8\'a3\'b4\'c2 \'b1\'e2\'ba\'bb\'c0\'fb\'c0\'b8\'b7\'ce \'b8\'f0\'b5\'e7 \'c0\'e5\'c4\'a1 INTC\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'c7\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
NOTE: The DSP1 / DSP2 does NOT generate any DMA requests towards other device DMA controllers outside DSP1 / DSP2 (EDMA, DMA_SYSTEM, etc.).\par
\'c2\'fc\'b0\'ed : DSP1 / DSP2\'b4\'c2 DSP1 / DSP2 (EDMA, DMA_SYSTEM \'b5\'ee) \'bf\'dc\'ba\'ce\'c0\'c7 \'b4\'d9\'b8\'a5 \'c0\'e5\'c4\'a1 DMA \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'bf\'a1 \'b4\'eb\'c7\'d8 DMA \'bf\'e4\'c3\'bb\'c0\'bb \'bb\'fd\'bc\'ba\'c7\'cf\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
NOTE: The \ldblquote Default Mapping\rdblquote  column in Table 5-3, DSP Hardware Requests shows the default mapping of module IRQ source signals. \'c7\'a5 5-3\'c0\'c7 "Default Mapping"\'bf\'ad, DSP Hardware Requests\'b4\'c2 \'b8\'f0\'b5\'e2 IRQ \'bc\'d2\'bd\'ba \'bd\'c5\'c8\'a3\'c0\'c7 \'b1\'e2\'ba\'bb \'b8\'c5\'c7\'ce\'c0\'bb \'ba\'b8\'bf\'a9\'c1\'dd\'b4\'cf\'b4\'d9.\par
These IRQ source signals can also be mapped to other lines of each device Interrupt controller through the IRQ_CROSSBAR module.\par
\'c0\'cc\'b7\'af\'c7\'d1 IRQ \'bc\'d2\'bd\'ba \'bd\'c5\'c8\'a3\'b4\'c2 IRQ_CROSSBAR \'b8\'f0\'b5\'e2\'c0\'bb \'c5\'eb\'c7\'d8 \'b0\'a2 \'c0\'e5\'c4\'a1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'c0\'c7 \'b4\'d9\'b8\'a5 \'b6\'f3\'c0\'ce\'bf\'a1\'b5\'b5 \'b8\'c5\'c7\'ce \'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
For more information about the IRQ_CROSSBAR module, see Section 18.4.6.4, IRQ_CROSSBAR Module Functional Description, in Chapter 18, Control Module.\par
IRQ CROSSBAR \'b8\'f0\'b5\'e2\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 18 \'c0\'e5, \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2\'c0\'c7 18.4.6.4 \'c0\'fd, IRQ CROSSBAR \'b8\'f0\'b5\'e2 \'b1\'e2\'b4\'c9 \'bc\'b3\'b8\'ed\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
For more information about the device interrupt controllers, see Chapter 17, Interrupt Controllers.\par
\'c0\'e5\'c4\'a1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 17 \'c0\'e5, \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: \bullet  For a description of the interrupt source controls at DSP subsystem level, see Section 5.3.4, DSP Interrupt Requests.\par
DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'b7\'b9\'ba\'a7\'bf\'a1\'bc\'ad \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bc\'d2\'bd\'ba \'c4\'c1\'c6\'ae\'b7\'d1\'bf\'a1 \'b4\'eb\'c7\'d1 \'bc\'b3\'b8\'ed\'c0\'ba \'bc\'bd\'bc\'c7 5.3.4, DSP \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bf\'e4\'c3\'bb\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
DSP1/DSP2 subsystem external interrupt sources: The default interrupt sources mapped by the device IRQ_CROSSBAR to the DSP1 / DSP2 interrupt controller lines are described in the Chapter 17, Interrupt Controllers.\par
DSP1 / DSP2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'bf\'dc\'ba\'ce \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bc\'d2\'bd\'ba : \'c0\'e5\'c4\'a1 IRQ_CROSSBAR \'c0\'c7\'c7\'d8 DSP1 / DSP2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'b6\'f3\'c0\'ce\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'c7\'b4\'c2 \'b1\'e2\'ba\'bb \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bc\'d2\'bd\'ba \'b3\'bb\'bf\'eb\'c0\'ba \'c1\'a6 17 \'c0\'e5 "\'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af"\'bf\'a1\'bc\'ad \'bc\'b3\'b8\'ed\'c7\'cf\'b0\'ed \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
lines are described in the Chapter 17, Interrupt Controllers. The programmable muxing of various external interrupt sources to the\par
DSP1_INTC.DSP1_IRQ_x and DSP2_INTC.DSP2_IRQ_x input lines (where x=32 to 95) is covered in the Section 18.4.6.4, IRQ_CROSSBAR Module Functional Description, of the Chapter 18, Control Module.\par
\'b6\'f3\'c0\'ce\'bf\'a1 \'b4\'eb\'c7\'d8\'bc\'ad\'b4\'c2 17 \'c0\'e5, \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'bf\'a1\'bc\'ad \'bc\'b3\'b8\'ed\'c7\'d5\'b4\'cf\'b4\'d9. \'b4\'d9\'be\'e7\'c7\'d1 \'bf\'dc\'ba\'ce \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bc\'d2\'bd\'ba\'b8\'a6 DSP1_INTC.DSP1_IRQ_x \'b9\'d7 SP2_INTC.DSP2_IRQ_x \'c0\'d4\'b7\'c2 \'c7\'e0 (x = 32\'bf\'a1\'bc\'ad 95\'b1\'ee\'c1\'f6)\'c0\'ba 18 \'c0\'e5, \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2\'c0\'c7 IRQ_CROSSBAR \'b8\'f0\'b5\'e2 \'b1\'e2\'b4\'c9 \'bc\'b3\'b8\'ed \'bc\'bd\'bc\'c7 18.4.6.4\'bf\'a1\'bc\'ad \'b4\'d9\'b7\'ec\'b4\'cf\'b4\'d9.\par
\par
DSP1/DSP2 subsystem internal interrupt sources: The mapping of DSP subsystem internal IRQ sources to DSP1_IRQ_x / DSP2_IRQ_x lines (where x=0 to 31 and x=96 to 127 for DSP subsystem internal event sources) is described in the Section 5.3.4, DSP Interrupt Requests.\par
DSP1 / DSP2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'ba\'ce \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bc\'d2\'bd\'ba : DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'ba\'ce IRQ \'bc\'d2\'bd\'ba\'bf\'cd DSP1_IRQ_x / DSP2_IRQ_x \'b6\'f3\'c0\'ce (DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'ba\'ce \'c0\'cc\'ba\'a5\'c6\'ae \'bc\'d2\'bd\'ba\'c0\'c7 \'b0\'e6\'bf\'ec x = 0 ~ 31 \'b9\'d7 x = 96 ~ 127)\'bf\'a1 \'b4\'eb\'c7\'d1 \'b8\'c5\'c7\'ce\'c0\'ba 5.3.4 \'c0\'fd, DSP \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bf\'e4\'c3\'bb.\par
\par
DSP1/DSP2 subsystem external DMA request sources: The Table 5-6 and Table 5-7 lists the default DSP1 and DSP2 external DMA request sources, respectively, routed via the device DMA_CROSSBAR to the DSP1_EDMA / DSP2_EDMA channel controller inputs (DMA_DSP1_DREQ_i / DMA_DSP2_DREQ_i).\par
DSP1 / DSP2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce DMA \'bf\'e4\'c3\'bb \'bc\'d2\'bd\'ba : \'c7\'a5 5-6 \'b9\'d7 \'c7\'a5 5-7\'c0\'ba \'b0\'a2\'b0\'a2 \'c0\'e5\'c4\'a1 DMA_CROSSBAR\'b8\'a6 \'c5\'eb\'c7\'d8 DSP1_EDMA / DSP2_EDMA \'c3\'a4\'b3\'ce \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'c0\'d4\'b7\'c2 (DMA_DSP1_DREQ_i / DMA_DSP2_DREQ_i)\'c0\'cc\'b0\'ed \'b6\'f3\'bf\'ec\'c6\'c3\'b5\'c7\'b4\'c2 \'b1\'e2\'ba\'bb DSP1 \'b9\'d7 DSP2 \'bf\'dc\'ba\'ce DMA \'bf\'e4\'c3\'bb \'bc\'d2\'bd\'ba\'b8\'a6 \'b3\'aa\'bf\'ad\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.3 DSP Subsystems Functional Description\par
5.3 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b1\'e2\'b4\'c9 \'bc\'b3\'b8\'ed\par
5.3.1 DSP Subsystems Block Diagram\par
5.3.1 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'ba\'ed\'b7\'cf \'b4\'d9\'c0\'cc\'be\'ee\'b1\'d7\'b7\'a5\par
Each of the device two DSP subsystems - DSP1 and DSP2 is composed of a DSP C66x CorePac coupled with several other submodules that enable its integration in the device architecture.\par
\'b5\'ce\'b0\'b3\'c0\'c7 DSP\'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'b0\'a2\'b0\'a2\'bf\'a1 \'b4\'eb\'c7\'d8 DSP1 \'b0\'fa DSP2\'b4\'c2 \'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba \'be\'c6\'c5\'b0\'c5\'d8\'c3\'b3\'bf\'a1 \'c5\'eb\'c7\'d5\'b5\'c9 \'bc\'f6 \'c0\'d6\'b4\'c2 \'b8\'ee\'b0\'a1\'c1\'f6 \'b4\'d9\'b8\'a5 \'c7\'cf\'c0\'a7 \'b8\'f0\'b5\'e2 \'c0\'cc \'b0\'e1\'c7\'d5\'b5\'c8 DSP C66x CorePac\'b7\'ce \'b1\'b8\'bc\'ba\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
Device DSP subsystem provides :\par
\'c0\'e5\'c4\'a1 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'ba \'b4\'d9\'c0\'bd\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\bullet  a 128-bit master data port (MDMA) on device L3_MAIN with a dedicated DSP subsystem local MMU\par
(MMU0) on the path.\par
\bullet   DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b7\'ce\'c4\'c3 MMU (MMU0) \'c0\'fc\'bf\'eb \'b0\'e6\'b7\'ce \'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 \'c0\'e5\'c4\'a1 L3_MAIN\'c0\'c7 128 \'ba\'f1\'c6\'ae \'b8\'b6\'bd\'ba\'c5\'cd \'b5\'a5\'c0\'cc\'c5\'cd \'c6\'f7\'c6\'ae (MDMA).\par
\par
\bullet  a 32-bit master configuration port (CFG) on device L3_MAIN through which DSP host configures\par
various device located peripherals (external to the DSP subsystem).\par
\bullet  L3_MAIN \'c0\'a7\'bf\'a1\'c0\'d6\'b4\'c2 32\'ba\'f1\'c6\'ae \'b8\'b6\'bd\'ba\'c5\'cd \'b1\'b8\'bc\'ba\'c6\'f7\'c6\'ae(CFG) \'b8\'a6 \'c5\'eb\'c7\'cf\'bf\'a9 DSP \'c8\'a3\'bd\'ba\'c6\'ae \'c1\'d6\'ba\'af\'b1\'e2\'b1\'e2\'bf\'a1 \'b9\'e8\'c4\'a1 \'b5\'c8 \'b4\'d9\'be\'e7\'c7\'d1 \'c0\'e5\'c4\'a1\'b8\'a6 \'b1\'b8\'bc\'ba (DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'bf\'dc\'ba\'ce)\par
\par
\par
\bullet  a 128-bit slave DMA port (SDMA) on device L3_MAIN which allows external initiators (masters) to DSP\par
to manipulate some portion of its config / status registers (those which are mapped in the L3_MAIN\par
space) in the device\par
\bullet  L3_MAIN 128 \'ba\'f1\'c6\'ae \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea DMA \'c6\'f7\'c6\'ae (SDMA) \'b4\'c2 \'bf\'dc\'ba\'ce \'c0\'cc\'b4\'cf\'bd\'c3\'bf\'a1\'c0\'cc\'c5\'cd(\'b8\'b6\'bd\'ba\'c5\'cd)\'b0\'a1 DSP\'c0\'e5\'c4\'a1 config/status \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd(L3_MAIN \'b0\'f8\'b0\'a3\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'c7\'b4\'c2 \'b0\'cd) \'c0\'cf\'ba\'ce\'b8\'a6 \'c1\'b6\'c0\'db \'c7\'d2 \'bc\'f6\'c0\'d6\'b0\'d4 \'c7\'d8\'c1\'d6\'b4\'c2 \'c0\'e5\'c4\'a1\par
\par
\bullet  a 128-bit master EDMA port - which allows the DSP_EDMA traffic controllers to initiate transfers on L3_MAIN.\par
\bullet  128 \'ba\'f1\'c6\'ae \'b8\'b6\'bd\'ba\'c5\'cd EDMA \'c6\'f7\'c6\'ae - DSP_EDMA \'c6\'ae\'b7\'a1\'c7\'c8 \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b0\'a1 L3_MAIN\'bf\'a1\'bc\'ad \'c0\'fc\'bc\'db\'c0\'bb \'bd\'c3\'c0\'db\'c7\'cf\'b5\'b5\'b7\'cf \'c7\'e3\'bf\'eb\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The C66x DSP subsystem is illustrated in the Figure 5-1.\par
C66x DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'ba \'b1\'d7\'b8\'b2 5-1\'bf\'a1 \'b3\'aa\'bf\'cd \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
5.3.2 DSPSubsystem Components\par
5.3.2 DSPSubsystem \'b1\'b8\'bc\'ba \'bf\'e4\'bc\'d2\par
\par
5.3.2.1 C66x DSP Subsystem Introduction\par
5.3.2.1 C66x DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'b0\'b3\'bf\'e4\par
\par
The key component of the C66x DSP subsystem is built on the TI's high performance TMS320C66x DSPCorePac which consists of a single TMS320C66x CPU (DSP_C0) processor along with a level 1 (L1P andL1D) cacheable SRAM and a level 2 (L2) cacheable SRAM memories interfaced via associated local L1P,L1D and L2 memory controllers, respectively.\par
C66x DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'c1\'d6\'bf\'e4 \'b1\'b8\'bc\'ba \'bf\'e4\'bc\'d2\'b4\'c2 \'b7\'b9\'ba\'a7 1 (L1P \'b9\'d7 L1D) \'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9 SRAM \'b9\'d7 \'b7\'b9\'ba\'a7 2 (L2) \'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9 SRAM\'b0\'fa \'c7\'d4\'b2\'b2 \'b4\'dc\'c0\'cf TMS320C66x CPU (DSP_C0) \'c7\'c1\'b7\'ce\'bc\'bc\'bc\'ad\'b7\'ce \'b1\'b8\'bc\'ba\'b5\'c7 \'c0\'d6\'b0\'ed TI\'c0\'c7 \'b0\'ed\'bc\'ba\'b4\'c9 TMS320C66x DSP CorePac\'c0\'bb \'b1\'e2\'b9\'dd\'c0\'b8\'b7\'ce\'c7\'d5\'b4\'cf\'b4\'d9. \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2  \'b7\'ce\'c4\'c3 L1P, L1D \'b9\'d7 L2 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b8\'a6 \'c5\'eb\'c7\'d8 \'b0\'a2\'b0\'a2 \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
 A DSP C66x CorePac includes also some other internal peripheral components, see Section 5.3.2.2.3 for details.\par
DSP C66x CorePac\'b4\'c2 \'b4\'d9\'b8\'a5 \'b3\'bb\'ba\'ce \'c1\'d6\'ba\'af \'b1\'b8\'bc\'ba \'bf\'e4\'bc\'d2\'b5\'b5 \'c6\'f7\'c7\'d4\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9 (\'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'c1\'a6 5.3.2.2.3 \'c7\'d7\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0).\par
\par
This chapter provides an overview of the DSP subsystem and the following considerations associated with it :\par
\'c0\'cc \'c0\'e5\'bf\'a1\'bc\'ad\'b4\'c2 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'b0\'b3\'bf\'e4\'bf\'cd DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'bf\'a1 \'b4\'eb\'c7\'d1  \'b0\'ed\'b7\'c1 \'bb\'e7\'c7\'d7\'bf\'a1 \'b4\'eb\'c7\'d8 \'bc\'b3\'b8\'ed\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  DSP C66x CorePac Core and L1 / L2 Memories\par
\bullet  DSP C66x CorePac \'c4\'da\'be\'ee \'b9\'d7 L1 / L2 \'b8\'de\'b8\'f0\'b8\'ae\par
\par
\bullet  DSP System control and configuration :\par
\bullet  DSP \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'c1\'a6\'be\'ee \'b9\'d7 \'bc\'b3\'c1\'a4 :\par
\endash  clock management\par
- \'c5\'ac\'b6\'f4 \'b0\'fc\'b8\'ae\par
\endash  wake-up event generation\par
- \'be\'cb\'b6\'f7 \'c0\'cc\'ba\'a5\'c6\'ae\'c0\'c7 \'bb\'fd\'bc\'ba\par
\endash  interrupt masking\par
- \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'b8\'b6\'bd\'ba\'c5\'a9\par
\bullet  DSP Booting\par
\bullet  DSP \'ba\'ce\'c6\'c3\par
\bullet  DSP subsystem internal memory and external memory (L3_MAIN) space views\par
\bullet  DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'b3\'bb\'ba\'ce \'b9\'d7 \'bf\'dc\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae (L3_MAIN) \'b0\'f8\'b0\'a3 \'ba\'e4\par
\bullet  DSP INTC interrupts mapping, event combining and exception generation\par
\bullet  DSP INTC \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'b8\'c5\'c7\'ce \'c0\'cc\'ba\'a5\'c6\'ae \'c7\'d5\'bc\'ba \'b9\'d7 \'bf\'b9\'bf\'dc \'bb\'fd\'bc\'ba\par
\bullet  DMA requests mapping to EDMA channels and EDMA traffic routing\par
\bullet  EDMA \'c3\'a4\'b3\'ce \'b9\'d7 EDMA \'c6\'ae\'b7\'a1\'c7\'c8 \'b6\'f3\'bf\'ec\'c6\'c3\'bf\'a1 DMA \'bf\'e4\'b1\'b8 \'b8\'c5\'c7\'ce\par
\bullet  Others\par
For more information on the TMS320C66x DSP CorePac, refer to the TMS320C66x DSP CorePac User\par
Guide, ( SPRUGW0C), the TMS320C66x DSP Cache User Guide, ( SPRUGY8) and the TMS320C66x\par
DSP CPU and Instruction Set Reference Guide, ( SPRUGH7).\par
TMS320C66x DSP CorePac\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba "TMS320C66x DSP CorePac \'bb\'e7\'bf\'eb\'c0\'da \'b0\'a1\'c0\'cc\'b5\'e5\'a1\'b9(SPRUGW0C)"TMS320C66x DSP \'c4\'b3\'bd\'c3 \'bb\'e7\'bf\'eb \'bc\'b3\'b8\'ed\'bc\'ad "(SPRUGY8) \'b9\'d7"TMS320C66x DSP CPU \'b9\'d7 \'b8\'ed\'b7\'c9\'be\'ee \'bc\'bc\'c6\'ae \'b7\'b9\'c6\'db\'b7\'b1\'bd\'ba \'b0\'a1\'c0\'cc\'b5\'e5\'a1\'b9(SPRUGH7)\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.2.2 DSP TMS320C66x CorePac\par
The TMS320C66x DSP CorePac is illustrated on Figure 5-1.\par
\par
TMS320C66x DSP CorePac\'c0\'ba \'b1\'d7\'b8\'b2 5-1\'bf\'a1 \'b3\'aa\'bf\'cd \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
It consists of a single DSP C66x CPU (DSP_C0) processor tightly coupled with level 1 - L1P (program), L1D (data) cacheable SRAM memories  and level 2 (L2) cacheable SRAM memories.\par
DSP C66x CPU \'b4\'c2 L1P (\'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5), L1D (\'b5\'a5\'c0\'cc\'c5\'cd) \'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9, SRAM \'b8\'de\'b8\'f0\'b8\'ae \'b9\'d7 \'b7\'b9\'ba\'a7 2 (L2) \'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9, SRAM \'b8\'de\'b8\'f0\'b8\'ae\'bf\'cd \'b9\'d0\'c1\'a2\'c7\'cf\'b0\'d4 \'b0\'e1\'c7\'d5 \'b5\'c8 DSP_C0 \'c7\'c1\'b7\'ce\'bc\'bc\'bc\'ad\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
 The C66x CorePac integrated memories are interfaced via associated local L1P, L1D and L2 memory controllers, respectively.\par
C66x CorePac \'c5\'eb\'c7\'d5 \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2 \'b0\'fc\'b7\'c3 \'b7\'ce\'c4\'c3 L1P, L1D \'b9\'d7 L2 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b8\'a6 \'c5\'eb\'c7\'d8 \'b0\'a2 \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba \'b5\'c7\'be\'ee\'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
Additionally, the DSP C66x CorePac contains the following internal peripherals:\par
\'b6\'c7\'c7\'d1 DSP C66x CorePac \'b4\'d9\'c0\'bd\'c0\'c7 \'b3\'bb\'ba\'ce \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1\'b0\'a1 \'c6\'f7\'c7\'d4\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\bullet  an interrupt controller (DSP_INTC) to service DSP C66x CorePac internal and external interrupt events\par
\bullet  DSP C66x CorePac \'b3\'bb\'ba\'ce \'b9\'d7 \'bf\'dc\'ba\'ce \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c3\'b3\'b8\'ae\'c7\'cf\'b1\'e2\'c0\'a7\'c7\'d1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (DSP_INTC)\par
\par
\bullet  a power-down controller (DSP_PDC)\par
\bullet  \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (DSP_PDC)\par
\par
\bullet  an external memory controller - DSP_EMC\par
\bullet  \'bf\'dc\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af - DSP_EMC\par
\par
\bullet  an extended memory controller - DSP_XMC_CTRL\par
\bullet  \'c8\'ae\'c0\'e5 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af - DSP_XMC_CTRL\par
\par
\bullet  a bandwidth manager - BWM with local controls to the L1P-, L1D- and L2-memories\par
\'b4\'eb\'bf\'aa\'c6\'f8 \'b0\'fc\'b8\'ae\'c0\'da - L1P, L1D \'b9\'d7 L2 \'b8\'de\'b8\'f0\'b8\'ae\'bf\'a1 \'b7\'ce\'c4\'c3 \'c4\'c1\'c6\'ae\'b7\'d1\'c0\'bb \'b0\'ae\'c3\'e1 BWM\par
\par
\bullet  an internal direct memory access controller - IDMA\par
\'b3\'bb\'ba\'ce \'c1\'f7\'c1\'a2 \'b8\'de\'b8\'f0\'b8\'ae \'be\'d7\'bc\'bc\'bd\'ba \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af - IDMA\par
\par
The C66x CorePac DSP also instantiates Debug and Trace logic, part of which is implemented in the DSP\par
core C66x CPU.\par
\'b6\'c7\'c7\'d1 C66x CorePac DSP\'b4\'c2 DSP \'c4\'da\'be\'ee C66x CPU\'bf\'a1\'bc\'ad \'b1\'b8\'c7\'f6\'b5\'c7\'b4\'c2 \'b5\'f0\'b9\'f6\'b1\'d7 \'b9\'d7 \'c3\'df\'c0\'fb \'b7\'ce\'c1\'f7\'c0\'bb \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba\'c8\'ad\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
For more details, refer to the Chapter 34, On-Chip Debug Support .\par
\'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 34 \'c0\'e5, \'bf\'c2\'c4\'a8 \'b5\'f0\'b9\'f6\'b1\'d7 \'c1\'f6\'bf\'f8\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.2.2.1 DSP TMS320C66x CorePac CPU\par
\par
The DSP C66x CorePac CPU includes following key components :\par
DSP C66x CorePac CPU\'b4\'c2 \'b4\'d9\'c0\'bd \'c1\'d6\'bf\'e4 \'b1\'b8\'bc\'ba \'bf\'e4\'bc\'d2\'b8\'a6 \'c6\'f7\'c7\'d4\'c7\'d5\'b4\'cf\'b4\'d9 :\par
\par
\bullet  A program fetch unit\par
\bullet\'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'b0\'a1\'c1\'ae\'bf\'c0\'b1\'e2 \'c0\'e5\'c4\'a1\par
\par
\bullet  16-/32-bit instruction dispatch unit, advanced instruction packing\par
\bullet  16-/32-bit \'b8\'ed\'b7\'c9\'be\'ee \'c0\'fc\'b4\'de \'c0\'e5\'c4\'a1, \'b0\'ed\'b1\'de \'b8\'ed\'b7\'c9 \'c6\'d0\'c5\'b7\par
\par
\bullet  Instruction decode unit\par
\bullet  \'b8\'ed\'b7\'c9 \'b5\'f0\'c4\'da\'b5\'e5 \'c0\'e5\'c4\'a1\par
\par
\bullet  Two data paths, each with four functional units\par
\bullet\'b5\'ce\'b0\'b3\'c0\'c7 \'b1\'e2\'b4\'c9\'c0\'fb\'c0\'ce \'c0\'e5\'c4\'a1\'b0\'a1 \'c0\'d6\'b4\'c2 2\'b0\'b3\'c0\'c7 \'b5\'a5\'c0\'cc\'c5\'cd \'b0\'e6\'b7\'ce\par
\par
\bullet  64 x 32-bit general purpose registers\par
64 \'a1\'bf 32 \'ba\'f1\'c6\'ae \'b9\'fc\'bf\'eb \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\par
\par
\bullet  Control logic and associated registers\par
\bullet  \'c1\'a6\'be\'ee \'b7\'ce\'c1\'f7 \'b9\'d7 \'b0\'fc\'b7\'c3 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\par
\par
\bullet  An internal interrupt and exception controller\par
\'b3\'bb\'ba\'ce \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'b9\'d7 \'bf\'b9\'bf\'dc \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\par
\par
\bullet  Test, emulation logic\par
\bullet  \'c5\'d7\'bd\'ba\'c6\'ae, \'bf\'a1\'b9\'c4\'b7\'b9\'c0\'cc\'bc\'c7 \'b3\'ed\'b8\'ae\par
\par
\bullet  Internal DMA (IDMA) for transfers between internal memories\par
\bullet  \'b3\'bb\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae \'b0\'a3\'c0\'c7 \'c0\'fc\'bc\'db\'c0\'bb\'c0\'a7\'c7\'d1 \'b3\'bb\'ba\'ce DMA (IDMA)\par
\par
For more information on the TMS320C66x central processing unit, see the TMS320C66x DSP CPU and\par
Instruction Set Reference Guide, ( SPRUGH7).\par
TMS320C66x \'c1\'df\'be\'d3 \'c3\'b3\'b8\'ae \'c0\'e5\'c4\'a1\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba TMS320C66x DSP CPU \'b9\'d7 \'b8\'ed\'b7\'c9 \'bc\'bc\'c6\'ae \'c2\'fc\'c1\'b6 \'be\'c8\'b3\'bb\'bc\'ad (SPRUGH7).\par
\par
5.3.2.2.2 DSP TMS320C66x CorePac Internal Memory Controllers and Memories\par
5.3.2.2.2 DSP TMS320C66x CorePac \'b3\'bb\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'b9\'d7 \'b8\'de\'b8\'f0\'b8\'ae\par
\par
The TMS320C66x DSP CorePac implements a two-level internal cache-based memory architecture.\par
TMS320C66x DSP CorePac\'c0\'ba  \'b7\'b9\'ba\'a7 2  \'b3\'bb\'ba\'ce \'c4\'b3\'bd\'c3 \'b1\'e2\'b9\'dd \'b8\'de\'b8\'f0\'b8\'ae \'be\'c6\'c5\'b0\'c5\'d8\'c3\'b3\'b8\'a6 \'b1\'b8\'c7\'f6\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.3.2.2.2.1 Level 1 Memories\par
\par
Level 1 memory (L1) is split into separate program memory (L1P memory) and data memory (L1D  memory).\par
\'b7\'b9\'ba\'a7 1 \'b8\'de\'b8\'f0\'b8\'ae (L1)\'b4\'c2 \'b4\'d9\'b8\'a5 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'b8\'de\'b8\'f0\'b8\'ae (L1P \'b8\'de\'b8\'f0\'b8\'ae)\'bf\'cd \'b5\'a5\'c0\'cc\'c5\'cd \'b8\'de\'b8\'f0\'b8\'ae (L1D \'b8\'de\'b8\'f0\'b8\'ae)\'b7\'ce \'ba\'d0\'c7\'d2\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
Each of the memories can be split into static RAM (normal addressable on-chip memory) and  cache.\par
\'b0\'a2 \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2 \'bd\'ba\'c5\'c2\'c6\'bd RAM (\'c0\'cf\'b9\'dd \'c1\'d6\'bc\'d2 \'b0\'a1\'b4\'c9\'c7\'d1 \'bf\'c2\'c4\'a8 \'b8\'de\'b8\'f0\'b8\'ae) \'b9\'d7 \'c4\'b3\'bd\'c3\'b7\'ce \'b3\'aa\'b4\'ad \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
L1P memory is dedicated to TMS320C66x CPU program words storage and is interfaced via a dedicated\par
L1P memory controller in the DSP C66x CorePac.\par
L1P \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2 TMS320C66x CPU \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'bf\'f6\'b5\'e5 \'c0\'fa\'c0\'e5 \'c0\'fc\'bf\'eb\'c0\'cc\'b8\'e7 DSP C66x CorePac \'be\'c8 \'bf\'a1\'c0\'d6\'b4\'c2 L1P \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b8\'a6 \'c5\'eb\'c7\'d8 \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b5\'cb\'b4\'cf\'b4\'d9.\par
 User can choose to initialize one part of the L1P memory as cache and the other as SRAM.\par
\'bb\'e7\'bf\'eb\'c0\'da\'b4\'c2 L1P \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7 \'c7\'d1 \'ba\'ce\'ba\'d0\'c0\'bb \'c4\'b3\'bd\'c3\'b7\'ce \'c3\'ca\'b1\'e2\'c8\'ad\'c7\'cf\'b0\'ed \'b4\'d9\'b8\'a5 \'ba\'ce\'ba\'d0\'c0\'ba SRAM\'c0\'b8\'b7\'ce \'c3\'ca\'b1\'e2\'c8\'ad\'c7\'cf\'b5\'b5\'b7\'cf \'bc\'b1\'c5\'c3\'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The entire 32 KiB memory is cacheable.\par
\'c0\'fc\'c3\'bc 32KB \'b8\'de\'b8\'f0\'b8\'ae\'b0\'a1 \'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The L1P features a dynamically configurable cache size (4 KiB, 8 KiB, 16 KiB and 32 KiB) defined via L1P controller configuration register - L1PCFG[2:0] L1PMODE bitfield.\par
L1P \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'b1\'b8\'bc\'ba \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'b4\'c2 -L1PCFG [2 : 0] L1PMODE \'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5\'bf\'a1 \'c0\'d6\'b4\'c2 \'b5\'bf\'c0\'fb\'c0\'b8\'b7\'ce \'b1\'b8\'bc\'ba \'b0\'a1\'b4\'c9\'c7\'d1 \'c4\'b3\'bd\'c3 (4 KiB, 8 KiB, 16 KiB \'b9\'d7 32 KiB)\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Note that, the L1P controller maps the cache space by starting at the top of the L1P memory map (i.e. from most significant address) and working downwards.\par
L1P \'c1\'a6\'be\'ee\'b1\'e2\'b4\'c2 L1P \'b8\'de\'b8\'f0\'b8\'ae \'b8\'ca\'c0\'c7 \'c3\'d6\'bb\'f3\'c0\'a7 (\'c1\'ef, \'c3\'d6\'bb\'f3\'c0\'a7 \'c1\'d6\'bc\'d2)\'bf\'a1\'bc\'ad \'bd\'c3\'c0\'db\'c7\'cf\'bf\'a9 \'be\'c6\'b7\'a1\'c2\'ca\'c0\'b8\'b7\'ce \'c0\'db\'be\'f7\'c7\'cf\'bf\'a9 \'c4\'b3\'bd\'c3 \'b0\'f8\'b0\'a3\'c0\'bb \'b8\'c5\'c7\'ce\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The L1P mapped SRAM size is 32 KiB minus the configured cache size.\par
L1P \'b8\'c5\'c7\'ce \'b5\'c8 SRAM \'c5\'a9\'b1\'e2\'b4\'c2 \'b1\'b8\'bc\'ba\'b5\'c8 \'c4\'b3\'bd\'c3 \'c5\'a9\'b1\'e2\'bf\'a1\'bc\'ad 32KB\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
NOTE: The L1P cache / SRAM is ONLY read-accessible by the C66x CPU processor.\par
L1P \'c4\'b3\'bd\'c3 / SRAM\'c0\'ba C66x CPU \'c7\'c1\'b7\'ce\'bc\'bc\'bc\'ad\'bf\'a1 \'c0\'c7\'c7\'d8\'bc\'ad\'b8\'b8 \'c0\'d0\'b1\'e2 \'be\'d7\'bc\'bc\'bd\'ba\'b0\'a1 \'b0\'a1\'b4\'c9\'c7\'d5\'b4\'cf\'b4\'d9.\par
The DSP C66x CorePac external DMAs (SDMA and EDMA) and internal DMA (IDMA) are the only  initiators which can write to the L1P memory.\par
DSP C66x CorePac \'bf\'dc\'ba\'ce DMA (SDMA \'b9\'d7 EDMA) \'b9\'d7 \'b3\'bb\'ba\'ce DMA (IDMA)\'b4\'c2 L1P \'b8\'de\'b8\'f0\'b8\'ae\'bf\'a1 \'b1\'e2\'b7\'cf \'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'c2 \'c0\'af\'c0\'cf\'c7\'d1 \'b0\'b3\'bd\'c3 \'c0\'e5\'c4\'a1\'c0\'d4\'b4\'cf\'b4\'d9.\par
 The CPU may however write access and modify certain L1P cache/SRAM controller registers if such access is allowed for the register.\par
\'b1\'d7\'b7\'af\'b3\'aa CPU\'b4\'c2 \'c7\'d8\'b4\'e7 \'be\'d7\'bc\'bc\'bd\'ba\'b0\'a1 \'c7\'e3\'bf\'eb\'b5\'c7\'b4\'c2 \'b0\'e6\'bf\'ec \'c6\'af\'c1\'a4 \'be\'d7\'bc\'bc\'bd\'ba \'c1\'a6\'be\'ee \'c0\'e5\'c4\'a1\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 \'c6\'af\'c1\'a4 \'be\'d7\'bc\'bc\'bd\'ba \'c1\'a6\'be\'ee \'c0\'e5\'c4\'a1\'b8\'a6 \'c0\'d4\'b7\'c2\'c7\'cf\'b0\'ed \'bc\'f6\'c1\'a4\'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
NOTE: In the device integrated DSP, at reset, the entire 32 KiB- L1P memory is initialized as a\par
cache ( reset value of L1PMODE=0x7).\par
\'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba \'c5\'eb\'c7\'d5 DSP\'bf\'a1\'bc\'ad \'b8\'ae\'bc\'c2\'bd\'c3 32 KiB-L1P \'b8\'de\'b8\'f0\'b8\'ae \'c0\'fc\'c3\'bc\'b0\'a1 \'c4\'b3\'bd\'c3 (L1PMODE = 0x7\'c0\'c7 \'c0\'e7\'bc\'b3\'c1\'a4 \'b0\'aa)\'b7\'ce \'c3\'ca\'b1\'e2\'c8\'ad\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
For more information on the L1P cache/SRAM memories, refer to the TMS320C66x DSP Cache User\par
Guide, ( SPRUGY8).\par
L1P \'c4\'b3\'bd\'c3 / SRAM \'b8\'de\'b8\'f0\'b8\'ae\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba TMS320C66x DSP \'c4\'b3\'bd\'c3 \'bb\'e7\'bf\'eb\'c0\'da \'be\'c8\'b3\'bb\'bc\'ad (SPRUGY8)\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
L1D memory is used for level 1 CPU data storage and is interfaced via a dedicated L1D memory  controller in the DSP C66x CorePac.\par
L1D \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2 \'b7\'b9\'ba\'a7 1 CPU \'b5\'a5\'c0\'cc\'c5\'cd \'c0\'fa\'c0\'e5\'bf\'a1 \'bb\'e7\'bf\'eb\'b5\'c7\'b8\'e7 DSP C66x CorePac\'c0\'c7 \'c0\'fc\'bf\'eb L1D \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b8\'a6 \'c5\'eb\'c7\'d8 \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
User can choose to initialize one part of the L1D memory as cache and the other as SRAM.\par
\'bb\'e7\'bf\'eb\'c0\'da\'b4\'c2 L1D \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7 \'c7\'d1 \'ba\'ce\'ba\'d0\'c0\'bb \'c4\'b3\'bd\'c3\'b7\'ce \'c3\'ca\'b1\'e2\'c8\'ad\'c7\'cf\'b0\'ed \'b4\'d9\'b8\'a5 \'ba\'ce\'ba\'d0\'c0\'ba SRAM\'c0\'b8\'b7\'ce \'c3\'ca\'b1\'e2\'c8\'ad\'c7\'cf\'b5\'b5\'b7\'cf \'bc\'b1\'c5\'c3\'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
The entire 32 KiB memory is cacheable.\par
\'c0\'fc\'c3\'bc 32KB \'b8\'de\'b8\'f0\'b8\'ae\'b0\'a1 \'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The L1D features a dynamically configurable cache size (4 KiB, 8 KiB, 16 KiB and 32 KiB) defined via L1D configuration register - L1DCFG[2:0] L1DMODE bitfield.\par
L1D\'b4\'c2 L1D \'b1\'b8\'bc\'ba \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd (L1DCFG [2 : 0] L1DMODE \'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5)\'b8\'a6 \'c5\'eb\'c7\'d8 \'b5\'bf\'c0\'fb\'c0\'b8\'b7\'ce \'b1\'b8\'bc\'ba \'b0\'a1\'b4\'c9\'c7\'d1 \'c4\'b3\'bd\'c3 \'c5\'a9\'b1\'e2 (4 KiB, 8 KiB, 16 KiB \'b9\'d7 32 KiB)\'b8\'a6 \'c6\'af\'c2\'a1\'c0\'b8\'b7\'ce\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
 Note that, the L1D controller maps the cache space by starting at the top of the L1D memory map (i.e. from most significant address) and working downwards. The L1D mapped SRAM size is 32 KiB minus the configured cache size.\par
L1D \'c1\'a6\'be\'ee\'b1\'e2\'b4\'c2 L1D \'b8\'de\'b8\'f0\'b8\'ae \'b8\'ca\'c0\'c7 \'c3\'d6\'bb\'f3\'c0\'a7\'bf\'a1\'bc\'ad (\'c1\'ef, \'c3\'d6\'bb\'f3\'c0\'a7 \'be\'ee\'b5\'e5\'b7\'b9\'bd\'ba\'b7\'ce\'ba\'ce\'c5\'cd) \'bd\'c3\'c0\'db\'c7\'cf\'bf\'a9 \'c7\'cf\'c7\'e2\'c0\'b8\'b7\'ce \'b5\'bf\'c0\'db\'c7\'d4\'c0\'b8\'b7\'ce\'bd\'e1 \'c4\'b3\'bd\'c3 \'b0\'f8\'b0\'a3\'c0\'bb \'b8\'c5\'c7\'ce\'c7\'d1\'b4\'d9.\par
\par
NOTE: In the device integrated DSP, at reset, the entire 32 KiB- L1D memory is initialized as a  cache ( i.e. reset value of L1DMODE = 0x7).\par
\'c2\'fc\'b0\'ed : \'c0\'e5\'c4\'a1 \'c5\'eb\'c7\'d5 DSP\'bf\'a1\'bc\'ad \'b8\'ae\'bc\'c2\'bd\'c3 \'c0\'fc\'c3\'bc 32 KiB-L1D \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2 \'c4\'b3\'bd\'c3 (\'c1\'ef, L1DMODE = 0x7\'c0\'c7 \'c0\'e7\'bc\'b3\'c1\'a4 \'b0\'aa)\'b7\'ce \'c3\'ca\'b1\'e2\'c8\'ad\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
For more information on the L1D cache/SRAM memories, refer to the TMS320C66x DSP Cache User Guide, ( SPRUGY8).\par
L1D \'c4\'b3\'bd\'c3 / SRAM \'b8\'de\'b8\'f0\'b8\'ae\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba TMS320C66x DSP \'c4\'b3\'bd\'c3 \'bb\'e7\'bf\'eb\'c0\'da \'be\'c8\'b3\'bb\'bc\'ad (SPRUGY8)\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.2.2.2.2 Level 2 Memory\par
\par
The L2 memory can also be split into L2 RAM (normal addressable on-chip memory) and L2-cache for\par
caching external to the DSP meagmodule memory locations.\par
L2 \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2 DSP \'b8\'de\'b8\'f0\'b8\'ae \'b8\'f0\'b5\'e2 \'c0\'a7\'c4\'a1 \'bf\'dc\'ba\'ce\'c0\'c7 \'c4\'b3\'bd\'cc\'c0\'bb \'c0\'a7\'c7\'d8 L2 RAM (\'c0\'cf\'b9\'dd \'c1\'d6\'bc\'d2 \'c1\'f6\'c1\'a4 \'b0\'a1\'b4\'c9 \'bf\'c2\'c4\'a8 \'b8\'de\'b8\'f0\'b8\'ae) \'b9\'d7 L2 \'c4\'b3\'bd\'c3\'b7\'ce \'ba\'d0\'c7\'d2 \'b5\'c9 \'bc\'f6\'b5\'b5 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The on-chip integrated L2 memory total size is 288 KiB.\par
\'bf\'c2\'c4\'a8 \'c5\'eb\'c7\'d5 L2 \'b8\'de\'b8\'f0\'b8\'ae \'c3\'d1 \'c5\'a9\'b1\'e2\'b4\'c2 288 KiB\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
 The L2 memory is shared between data and program word sources within and outside the DSP C66x CorePac.\par
L2 \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2 DSP C66x CorePac \'b3\'bb\'bf\'dc\'c0\'c7 \'b5\'a5\'c0\'cc\'c5\'cd \'bf\'f6\'b5\'e5\'bf\'cd \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'bf\'f6\'b5\'e5 \'bc\'d2\'bd\'ba \'b0\'a1 \'b0\'f8\'c0\'af\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
 The L2 memory is divided into two physical 128 bit-wide banks, accesses to which are interleaved on address LSB.\par
L2 \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2 2 \'b0\'b3\'c0\'c7 \'b9\'b0\'b8\'ae\'c0\'fb 128 \'ba\'f1\'c6\'ae \'c6\'f8 \'b9\'f0\'c5\'a9\'b7\'ce \'ba\'d0\'b8\'ae\'b5\'c7\'be\'ee \'b1\'d7 \'be\'d7\'bc\'bc\'bd\'ba \'c1\'d6\'bc\'d2 LSB\'bf\'a1\'bc\'ad \'c0\'ce\'c5\'cd\'b8\'ae\'ba\'ea\'b5\'c8\'b4\'d9.\par
\par
 Each of the two L2 banks is further split into 4 subbanks.\par
\'b5\'ce \'b0\'b3\'c0\'c7 L2 \'b9\'f0\'c5\'a9 \'b0\'a2\'b0\'a2\'c0\'ba 4 \'b0\'b3\'c0\'c7 \'bc\'ad\'ba\'ea \'b9\'f0\'c5\'a9\'b7\'ce \'b4\'f5 \'b3\'aa\'b4\'b9\'b4\'cf\'b4\'d9.\par
\par
NOTE: Only 256 KiB of the L2 memory are cacheable in the device DSP. The remaining 32 KiB are\par
always mapped as static RAM.\par
L2 \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7 256 KiB\'b8\'b8\'c0\'cc \'c0\'e5\'c4\'a1 DSP\'bf\'a1 \'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9\'c7\'d5\'b4\'cf\'b4\'d9. \'b3\'aa\'b8\'d3\'c1\'f6 32 KiB\'b4\'c2 \'c7\'d7\'bb\'f3 \'c1\'a4\'c0\'fb RAM\'c0\'b8\'b7\'ce \'b8\'c5\'c7\'ce\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The L2 memory features a dynamically configurable cache size (32 KiB, 64 KiB, 128 KiB and 256 KiB)\par
L2 \'b8\'de\'b8\'f0\'b8\'ae\'b4\'c2 L2 \'b1\'b8\'bc\'ba \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd (L2CFG [2 : 0] L2MODE \'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5)\'b8\'a6 \'c5\'eb\'c7\'d8 \'b5\'bf\'c0\'fb\'c0\'b8\'b7\'ce \'b1\'b8\'bc\'ba \'b0\'a1\'b4\'c9\'c7\'d1 \'c4\'b3\'bd\'c3 \'c5\'a9\'b1\'e2 (32 KiB, 64 KiB, 128 KiB \'b9\'d7 256 KiB)\'b8\'a6 \'c6\'af\'c2\'a1\'c0\'b8\'b7\'ce\'c7\'d5\'b4\'cf\'b4\'d9.\par
defined via L2 configuration register - L2CFG[2:0] L2MODE bitfield.\par
L2 \'b1\'b8\'bc\'ba \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b8\'a6 \'c5\'eb\'c7\'d8 \'c1\'a4\'c0\'c7 \'b5\'ca - L2CFG [2 : 0] L2MODE \'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5.\par
The additional (to the 32KiB fixed SRAM L2) SRAM available is 256-KiB minus the cache size.\par
\'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9\'c7\'d1 32KiB \'b0\'ed\'c1\'a4 SRAM \'b4\'c2 L2 SRAM\'bf\'a1 \'c3\'df\'b0\'a1\'b5\'c7\'b4\'c2 256K \'b9\'d9\'c0\'cc\'c6\'ae \'c4\'b3\'bd\'c3 \'c5\'a9\'b1\'e2\'b8\'a6 \'bb\'ab \'b0\'cd\'c0\'d4\'b4\'cf\'b4\'d9.\par
L2 memory controller is responsible for MDMA bus error events reporting.\par
L2 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b4\'c2 MDMA \'b9\'f6\'bd\'ba \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae\'ba\'b8\'b0\'ed\'b8\'a6 \'b4\'e3\'b4\'e7\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The DSP C66x CorePac MDMA bus error event is exported outside the C66x DSP CorePac in the subsystem, and can be enabled to trigger the ERRINT_IRQ aggregated interrupt output.\par
DSP C66x CorePac MDMA \'b9\'f6\'bd\'ba \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 C66x DSP CorePac \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'b8\'e7 ERRINT_IRQ \'c1\'fd\'b0\'e8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'e2\'b7\'c2\'c0\'bb \'c6\'ae\'b8\'ae\'b0\'c5 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
 See also corresponding "MDMAERREVT" event in the Table 5-5.\par
\'c7\'a5 5-5\'c0\'c7 \'c7\'d8\'b4\'e7 "MDMAERREVT"\'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: The MDMA bus error event is not exported outside DSP subsystem. However it is merged\par
(OR-ed) along with other error event sources within the DSP subsystem to produce a single\par
ERRINT_IRQ interrupt exported outside the DSP subsystem.\par
\'c2\'fc\'b0\'ed : MDMA \'b9\'f6\'bd\'ba \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9. \'b1\'d7\'b7\'af\'b3\'aa DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'ba\'ce\'bf\'a1\'bc\'ad \'b4\'d9\'b8\'a5 ERRINT_IRQ \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'c0\'c7 \'b4\'d9\'b8\'a5 \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae \'bc\'d2\'bd\'ba\'bf\'cd \'c7\'d4\'b2\'b2 \'ba\'b4\'c7\'d5 (OR-ed)\'b5\'cb\'b4\'cf\'b4\'d9.\par
For more details on ERRINT_IRQ generation and asscoiated event registers at DSP_SYSTEM level, refer to the Section 5.3.4.2.2.\par
ERRINT_IRQ \'bb\'fd\'bc\'ba \'b9\'d7 DSP_SYSTEM \'b7\'b9\'ba\'a7\'c0\'c7 asscoiated \'c0\'cc\'ba\'a5\'c6\'ae \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.4.2.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.2.2.3 DSP C66x CorePac Internal Peripherals\par
5.3.2.2.3 DSP C66x CorePac \'b3\'bb\'ba\'ce \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1\par
\par
The DSP C66x CorePac includes the following internal peripherals:\par
DSP C66x CorePac\'bf\'a1\'b4\'c2 \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'c0\'ba \'b3\'bb\'ba\'ce \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1\'b0\'a1 \'c6\'f7\'c7\'d4\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  DSP interrupt controller (DSP_INTC)\par
\bullet  DSP \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (DSP_INTC)\par
\par
\bullet  DSP power-down controller (DSP_PDC)\par
\bullet  DSP \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (DSP_PDC)\par
\par
\bullet  Bandwidth manager (DSP_BWM)\par
\bullet  \'b4\'eb\'bf\'aa\'c6\'f8 \'b0\'fc\'b8\'ae\'c0\'da (DSP_BWM)\par
\par
\bullet  Memory Protection Hardware\par
\bullet  \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee\par
\par
\bullet  Internal DMA (DSP_IDMA) controller\par
\bullet  \'b3\'bb\'ba\'ce DMA (DSP_IDMA) \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\par
\par
\bullet  External Memory Controller (DSP_EMC)\par
\bullet  \'bf\'dc\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (DSP_EMC)\par
\par
\bullet  Extended Memory Controller (DSP_XMC_CTRL) including prefetch buffer logic\par
\bullet  prefetch \'b9\'f6\'c6\'db \'b7\'ce\'c1\'f7\'c0\'bb \'c6\'f7\'c7\'d4\'c7\'d1 \'c8\'ae\'c0\'e5\'b5\'c8 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af( DSP_XMC_CTRL)\par
\par
\bullet  Error Detection logic for the L1P memory\par
\bullet  L1P \'b8\'de\'b8\'f0\'b8\'ae\'bf\'a1 \'b4\'eb\'c7\'d1 \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'b7\'ce\'c1\'f7\par
\par
\bullet  Error Detection and Correction (ECC) logic for the L2 memory This section briefly describes the DSP_INTC, DSP_PDC, DSP_BWM, DSP_IDMA, DSP_EMC,  DSP_XMC_CTRL controller, L1P Error detection and L2 ECC logic.\par
\bullet  L2 \'b8\'de\'b8\'f0\'b8\'ae \'bf\'eb ECC (Error Detection and Correction) \'b7\'ce\'c1\'f7\'c0\'cc \'bc\'bd\'bc\'c7\'bf\'a1\'bc\'ad\'b4\'c2 DSP_INTC, DSP_PDC, DSP_BWM, DSP_IDMA, DSP_EMC, DSP_XMC_CTRL \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af, L1P \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'b9\'d7 L2 ECC \'b7\'ce\'c1\'f7\'bf\'a1 \'b4\'eb\'c7\'d8 \'b0\'a3\'b7\'ab\'c7\'cf\'b0\'d4 \'bc\'b3\'b8\'ed\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
 For more information on the TMS320C66x DSP CorePac, see the TMS320C66x DSP CorePac User Guide, ( SPRUGW0C).\par
 TMS320C66x DSP CorePac\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba TMS320C66x DSP CorePac \'bb\'e7\'bf\'eb\'c0\'da \'be\'c8\'b3\'bb\'bc\'ad (SPRUGW0C)\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.2.2.3.1 DSP C66x CorePac Interrupt Controller (DSP INTC)\par
5.3.2.2.3.1 DSP C66x CorePac \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (DSP INTC)\par
\par
The DSP C66x CorePac includes an interrupt controller (DSP_INTC) and can receive a total of 128\par
system events as inputs.\par
DSP C66x CorePac\'c0\'ba \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (DSP_INTC)\'b8\'a6 \'c6\'f7\'c7\'d4\'c7\'cf\'b0\'ed \'c3\'d1 128 \'b0\'b3\'c0\'c7 \'bd\'c3\'bd\'ba\'c5\'db \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c0\'d4\'b7\'c2\'c0\'b8\'b7\'ce \'bc\'f6\'bd\'c5 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
They include DSP-generated events and chip-level events.\par
\'bf\'a9\'b1\'e2\'bf\'a1\'b4\'c2 DSP \'bb\'fd\'bc\'ba \'c0\'cc\'ba\'a5\'c6\'ae \'b9\'d7 \'c4\'a8 \'b7\'b9\'ba\'a7 \'c0\'cc\'ba\'a5\'c6\'ae\'b0\'a1 \'c6\'f7\'c7\'d4\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
In addition to these 128 events, a non-maskable (NMI) event (see the Section 5.3.4.1.1) and reset events\par
are mapped to the DSP_INTC as well, and are routed straight through to the DSP CPU core.\par
\'c0\'cc 128 \'b0\'b3\'c0\'c7 \'c0\'cc\'ba\'a5\'c6\'ae \'bf\'dc\'bf\'a1\'b5\'b5, NMI (Non-Maskable) \'c0\'cc\'ba\'a5\'c6\'ae (5.3.4.1.1 \'c0\'fd \'c2\'fc\'c1\'b6) \'b9\'d7 \'b8\'ae\'bc\'c2 \'c0\'cc\'ba\'a5\'c6\'ae \'b4\'c2 DSP_INTC\'bf\'a1\'b5\'b5 \'b8\'ca\'c7\'ce\'b5\'c7\'b8\'e7, DSP CPU \'c4\'da\'be\'ee\'b7\'ce \'b0\'f0\'b9\'d9\'b7\'ce \'b6\'f3\'bf\'ec\'c6\'c3\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
For more details on the DSP_INTC functionalities and its corresponding control / status registers (part of\par
the DSP_ICFG local configuration space), refer to the section Interrupt Controller within the TMS320C66x\par
DSP CorePac User Guide, ( SPRUGW0C).\par
DSP_INTC \'b1\'e2\'b4\'c9\'b0\'fa \'b0\'c5\'b1\'e2\'bf\'a1 \'b4\'eb\'c0\'c0\'c7\'cf\'b4\'c2 \'c1\'a6\'be\'ee / \'bb\'f3\'c5\'c2 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd (DSP_ICFG \'b7\'ce\'c4\'c3 \'b1\'b8\'bc\'ba \'b0\'f8\'b0\'a3\'c0\'c7 \'c0\'cf\'ba\'ce)\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba "TMS320C66x DSP CorePac \'bb\'e7\'bf\'eb \'bc\'b3\'b8\'ed\'bc\'ad (SPRUGW0C)"\'c0\'c7 "\'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af"\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
For more details on input interrupt mappings and associated IRQ wake-up events, refer to the\par
Section 5.3.4.1.\par
\'c0\'d4\'b7\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'b8\'c5\'c7\'ce\'b0\'fa \'b0\'fc\'b7\'c3\'b5\'c8 IRQ \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'c0\'cc\'ba\'a5\'c6\'ae\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.4.1 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
For more information about the device DSP_INTC, see Chapter 17, Interrupt Controllers.\par
DSP_INTC \'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'c1\'a4\'ba\'b8\'b4\'c2 17 \'c0\'e5, \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
For more information on chip level IRQ mapping via the device IRQ_CROSSBAR module, see Section 18.4.6.4,\par
IRQ_CROSSBAR Module Functional Description, in Chapter 18, Control Module.\par
\'c0\'e5\'c4\'a1 IRQ_CROSSBAR \'b8\'f0\'b5\'e2\'c0\'bb \'c5\'eb\'c7\'d1 \'c4\'a8 \'bc\'f6\'c1\'d8 IRQ \'b8\'c5\'c7\'ce\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 18 \'c0\'e5, \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2\'c0\'c7 18.4.6.4 \'c0\'fd, IRQ_CROSSBAR \'b8\'f0\'b5\'e2 \'b1\'e2\'b4\'c9 \'bc\'b3\'b8\'ed\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.2.2.3.2 DSP C66x CorePac Power-Down Controller (DSP PDC)\par
5.3.2.2.3.2 DSP C66x CorePac \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (DSP PDC)\par
\par
The DSP C66x CorePac includes a power-down controller (PDC).\par
DSP C66x CorePac\'bf\'a1\'b4\'c2 \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (PDC)\'b0\'a1 \'c6\'f7\'c7\'d4\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
The PDC can power-down all of the following components of the DSP C66x CorePac and internal memories of the DSP subsystem:\par
PDC\'b4\'c2 \'b8\'f0\'b5\'e7 DSP C66x CorePac\'c0\'c7 \'b1\'b8\'bc\'ba \'bf\'e4\'bc\'d2\'bf\'cd DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'b3\'bb\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae :\par
\bullet  C66x CPU\par
\bullet  L1P Memory\par
\bullet  L2 Memory\par
\bullet  Cache controllers\par
\bullet  Entire TMS320C66x DSP CorePac\par
\'c0\'fc\'c3\'bc TMS320C66x DSP \'c4\'da\'be\'ee \'c6\'d1\par
\par
Refer to the Power-Down Controller in the TMS320C66x DSP CorePac User Guide, ( SPRUGW0C) for\par
detailed descriptions of the DSP C66x CorePac components power-down control.\par
DSP C66x CorePac \'c4\'c4\'c6\'f7\'b3\'cd\'c6\'ae \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'c1\'a6\'be\'ee\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'bc\'b3\'b8\'ed\'c0\'ba TMS320C66x DSP CorePac \'bb\'e7\'bf\'eb \'c0\'da \'b0\'a1\'c0\'cc\'b5\'e5 (SPRUGW0C)\'c0\'c7 \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'d1\'b4\'d9.\par
\par
5.3.2.2.3.3 DSP C66x CorePac Bandwidth Manager (BWM)\par
5.3.2.2.3.3 DSP C66x CorePac \'b4\'eb\'bf\'aa\'c6\'f8 \'b0\'fc\'b8\'ae\'c0\'da (BWM)\par
\par
The DSP C66x CorePac implements a bandwidth manager (BWM) to assure that some requestors do\par
NOT block resources in the C66x CorePac DSP for extended periods of time.\par
DSP C66x CorePac\'c0\'ba \'b4\'eb\'bf\'aa\'c6\'f8 \'b0\'fc\'b8\'ae\'c0\'da (BWM)\'b8\'a6 \'b1\'b8\'c7\'f6\'c7\'cf\'bf\'a9 \'c0\'cf\'ba\'ce \'bf\'e4\'c3\'bb\'c0\'da\'b0\'a1 \'c0\'e5\'bd\'c3\'b0\'a3 \'b5\'bf\'be\'c8 C66x CorePac DSP\'c0\'c7 \'b8\'ae\'bc\'d2\'bd\'ba\'b8\'a6 \'c2\'f7\'b4\'dc\'c7\'cf\'c1\'f6 \'be\'ca\'b5\'b5\'b7\'cf\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Refer to the Bandiwdth Management Architecture in theTMS320C66x DSP CorePac User Guide, (\par
SPRUGW0C) for detailed descriptions of the DSP C66x CorePac components power-down control.\par
DSP C66x CorePac \'c4\'c4\'c6\'f7\'b3\'cd\'c6\'ae \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'c1\'a6\'be\'ee\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'bc\'b3\'b8\'ed\'c0\'ba TMS320C66x DSP CorePac \'bb\'e7\'bf\'eb\'c0\'da \'be\'c8\'b3\'bb\'bc\'ad (Bandwidth) \'b0\'fc\'b8\'ae \'be\'c6\'c5\'b0\'c5\'d8\'c3\'b3 (SPRUGW0C)\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.2.2.3.4 DSP C66x CorePac Memory Protection Hardware\par
5.3.2.2.3.4 DSP C66x CorePac \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee\par
\par
The C66x Core Pac memory protection architecture introduces in the DSP a combination of DSP privilege\par
levels and a memory system permission structure.\par
C66x Core Pac \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'be\'c6\'c5\'b0\'c5\'d8\'c3\'b3\'b4\'c2 DSP \'b1\'c7\'c7\'d1 \'bc\'f6\'c1\'d8\'b0\'fa \'b8\'de\'b8\'f0\'b8\'ae \'bd\'c3\'bd\'ba\'c5\'db \'b1\'c7\'c7\'d1 \'b1\'b8\'c1\'b6\'c0\'c7 \'c1\'b6\'c7\'d5\'c0\'bb DSP\'bf\'a1 \'b5\'b5\'c0\'d4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
 This provides several benefits to the system, as follows:\par
\'c0\'cc\'b0\'cd\'c0\'ba \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'c0\'cc \'bd\'c3\'bd\'ba\'c5\'db\'bf\'a1 \'bf\'a9\'b7\'af \'b0\'a1\'c1\'f6 \'c0\'cc\'c1\'a1\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The DSP C66x CorePac MP events are exported outside the DSP C66x CorePac in DSP subsystem,\par
and can be enabled to trigger the ERRINT_IRQ aggregated interrupt output.\par
DSP C66x CorePac MP \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 DSP C66x CorePac \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'b8\'e7 ERRINT_IRQ \'c1\'fd\'b0\'e8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'e2\'b7\'c2\'c0\'bb \'c6\'ae\'b8\'ae\'b0\'c5 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
 See also corresponding memory protection fault events listed in the Table 5-5.\par
\'c7\'a5 5-5\'bf\'a1 \'b3\'aa\'bf\'ad\'b5\'c8 \'c7\'d8\'b4\'e7 \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: The memory protection exception events are not exported outside DSP subsystem.\par
\'c2\'fc\'b0\'ed : \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'bf\'b9\'bf\'dc \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
 However they are merged (OR-ed) along with other error event sources within the DSP subsystem to produce a single ERRINT_IRQ interrupt exported outside the DSP subsystem.\par
\'b1\'d7\'b7\'af\'b3\'aa \'c0\'cc\'b5\'e9\'c0\'ba DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'bf\'a1\'bc\'ad \'b4\'d9\'b8\'a5 ERRINT_IRQ \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'c0\'c7 \'b4\'d9\'b8\'a5 \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae \'bc\'d2\'bd\'ba\'bf\'cd \'c7\'d4\'b2\'b2 \'ba\'b4\'c7\'d5 (OR-ed)\'b5\'cb\'b4\'cf\'b4\'d9.\par
For more details on ERRINT_IRQ generation and associated event registers at DSP_SYSTEM level, refer to the Section 5.3.4.2.2.\par
ERRINT_IRQ \'bb\'fd\'bc\'ba \'b9\'d7 DSP_SYSTEM \'b7\'b9\'ba\'a7\'c0\'c7 \'bf\'ac\'b0\'fc\'b5\'c8 \'c0\'cc\'ba\'a5\'c6\'ae \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.4.2.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: IDMA, DMA or System initiators should not issue read/write requests to regions of DSP L1P,\par
L1D, or L2 memory configured as cache.\par
\'c2\'fc\'b0\'ed : IDMA, DMA \'b6\'c7\'b4\'c2 \'bd\'c3\'bd\'ba\'c5\'db \'c3\'ca\'b1\'e2 \'c4\'b3\'bd\'c3\'b7\'ce \'bc\'b3\'c1\'a4\'b5\'c8 DSP L1P, L1D \'b6\'c7\'b4\'c2 L2 \'b8\'de\'b8\'f0\'b8\'ae \'bf\'b5\'bf\'aa\'bf\'a1 \'c0\'d0\'b1\'e2 / \'be\'b2\'b1\'e2 \'bf\'e4\'c3\'bb\'c0\'bb\'c7\'cf\'c1\'f6 \'b8\'b6\'bd\'ca\'bd\'c3\'bf\'c0.\par
In such cases the corresponding MPPA register should be set to 0x0 to disallow external read/write accesses.\par
\'c0\'cc\'b7\'b1 \'b0\'e6\'bf\'ec \'c7\'d8\'b4\'e7 MPPA \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b8\'a6 0x0\'c0\'b8\'b7\'ce \'bc\'b3\'c1\'a4\'c7\'cf\'bf\'a9 \'bf\'dc\'ba\'ce\'c0\'c7 \'c0\'d0\'b1\'e2 / \'be\'b2\'b1\'e2 \'be\'d7\'bc\'bc\'bd\'ba\'b8\'a6 \'b1\'dd\'c1\'f6\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.3.2.2.3.5 DSP C66x CorePac Internal DMA (IDMA) Controller\par
5.3.2.2.3.5 DSP C66x CorePac \'b3\'bb\'ba\'ce DMA (IDMA) \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\par
\par
 The IDMA controller performs fast block transfers between any two memory locations local to the DSP C66x CorePac.\par
IDMA \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b4\'c2 DSP C66x CorePac\'c0\'c7 \'b7\'ce\'c4\'c3 \'b5\'ce \'b8\'de\'b8\'f0\'b8\'ae \'c0\'a7\'c4\'a1\'b0\'a3\'bf\'a1 \'ba\'fc\'b8\'a5 \'ba\'ed\'b7\'cf \'c0\'fc\'bc\'db\'c0\'bb \'bc\'f6\'c7\'e0\'c7\'d5\'b4\'cf\'b4\'d9.\par
Local memory locations are defined as those in Level 1 program (L1P), Level 1 data (L1D), and Level 2 (L2) memories, or in the external peripheral configuration (CFG) port.\par
\'b7\'ce\'c4\'c3 \'b8\'de\'b8\'f0\'b8\'ae \'c0\'a7\'c4\'a1\'b4\'c2 \'b7\'b9\'ba\'a7 1 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 (L1P), \'b7\'b9\'ba\'a7 1 \'b5\'a5\'c0\'cc\'c5\'cd (L1D) \'b9\'d7 \'b7\'b9\'ba\'a7 2 (L2) \'b8\'de\'b8\'f0\'b8\'ae \'b6\'c7\'b4\'c2 \'bf\'dc\'ba\'ce \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1 \'b1\'b8\'bc\'ba (CFG) \'c6\'f7\'c6\'ae\'c0\'c7 \'c0\'a7\'c4\'a1\'b7\'ce \'c1\'a4\'c0\'c7\'b5\'cb\'b4\'cf\'b4\'d9.\par
The IDMA configuration / status registers themselves are part of the DSP_ICFG and are visible only to\par
C66x CPU.\par
IDMA \'b1\'b8\'bc\'ba / \'bb\'f3\'c5\'c2 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'c0\'da\'c3\'bc\'b4\'c2 DSP_ICFG\'c0\'c7 \'c0\'cf\'ba\'ce\'c0\'cc\'b8\'e7 C66x CPU\'bf\'a1\'bc\'ad\'b8\'b8 \'ba\'bc \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
NOTE: The IDMA cannot transfer data to or from the internal DSP memory-mapped register\par
space (DSP_ICFG).\par
\'c2\'fc\'b0\'ed : IDMA \'b3\'bb\'ba\'ce DSP \'b8\'de\'b8\'f0\'b8\'ae \'b8\'c5\'c7\'ce \'b5\'c8 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'b0\'f8\'b0\'a3 (DSP_ICFG)\'b0\'a3\'bf\'a1 \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'c0\'fc\'bc\'db\'c7\'d2 \'bc\'f6 \'be\'f8\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The IDMA exception is mapped to the system level ERRINT_IRQ interrupt event. For more\par
details, refer to the Section 5.3.4.2.2 and the Table 5-5.\par
IDMA \'bf\'b9\'bf\'dc\'b4\'c2 \'bd\'c3\'bd\'ba\'c5\'db \'b7\'b9\'ba\'a7 ERRINT_IRQ \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c0\'cc\'ba\'a5\'c6\'ae\'bf\'a1 \'b8\'ca\'c7\'ce\'b5\'cb\'b4\'cf\'b4\'d9. \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'bc\'bd\'bc\'c7 5.3.4.2.2 \'b9\'d7 \'c7\'a5 5-5\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
The DSP C66x CorePac IDMA error event is exported outside the DSP C66x CorePac in the subsystem, and can be enabled to trigger the ERRINT_IRQ aggregated interrupt output.\par
DSP C66x CorePac IDMA \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 DSP C66x CorePac \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'b8\'e7 ERRINT_IRQ \'c1\'fd\'b0\'e8 \'b5\'c8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'e2\'b7\'c2\'c0\'bb \'c6\'ae\'b8\'ae\'b0\'c5 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
See also corresponding "EMC_IDMAERR" event in the Table 5-5.\par
\'c7\'a5 5-5\'c0\'c7 \'c7\'d8\'b4\'e7 "EMC_IDMAERR"\'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: The IDMA exception error event is not exported outside DSP subsystem.\par
\'c2\'fc\'b0\'ed : IDMA \'bf\'b9\'bf\'dc \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
However it is merged (OR-ed) along with other error event sources within the DSP subsystem to produce a single ERRINT_IRQ interrupt exported outside the DSP subsystem.\par
\'b1\'d7\'b7\'af\'b3\'aa DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'ba\'ce\'bf\'a1\'bc\'ad \'b4\'d9\'b8\'a5 ERRINT_IRQ \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'c0\'c7 \'b4\'d9\'b8\'a5 \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae \'bc\'d2\'bd\'ba\'bf\'cd \'c7\'d4\'b2\'b2 \'ba\'b4\'c7\'d5 (OR-ed)\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
For more details on ERRINT_IRQ generation and asscoiated event registers at DSP_SYSTEM level, refer to the Section 5.3.4.2.2.\par
ERRINT_IRQ \'bb\'fd\'bc\'ba \'b9\'d7 DSP_SYSTEM \'b7\'b9\'ba\'a7\'c0\'c7 asscoiated \'c0\'cc\'ba\'a5\'c6\'ae \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.4.2.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
The IDMA is fully described in the section Internal Direct Memory Access (IDMA) Controller of the TMS320C66x DSP CorePac User Guide, ( SPRUGW0C).\par
IDMA\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba TMS320C66x DSP CorePac \'bb\'e7\'bf\'eb\'c0\'da \'be\'c8\'b3\'bb\'bc\'ad (SPRUGW0C)\'c0\'c7 IDMA (Internal Direct Memory Access) \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'b4\'dc\'bf\'f8\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.2.2.3.6 DSP C66x CorePac External Memory Controller\par
5.3.2.2.3.6 DSP C66x CorePac \'bf\'dc\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\par
\par
The DSP C66x CorePac has an embedded External Memory Controller which acts as a bridge between\par
the DSP C66x CorePac CPU and the remaining part of DSP subsystem.\par
DSP C66x CorePac\'bf\'a1\'b4\'c2 DSP C66x CorePac CPU\'bf\'cd DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'b3\'aa\'b8\'d3\'c1\'f6 \'ba\'ce\'ba\'d0 \'b0\'a3 \'ba\'ea\'b8\'ae\'c1\'f6 \'bf\'aa\'c7\'d2\'c0\'bb\'c7\'cf\'b4\'c2 \'b3\'bb\'c0\'e5 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b0\'a1 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
 It implements two ports interfacing the DSP C66x CorePac environment:\par
DSP C66x CorePac \'c8\'af\'b0\'e6\'c0\'bb \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'c7\'cf\'b4\'c2 2 \'b0\'b3\'c0\'c7 \'c6\'f7\'c6\'ae\'b8\'a6 \'b1\'b8\'c7\'f6\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  An external peripheral 32-bit CFG port which acts as an (DSP CPU cfg) initiator on the DSP_NoC L2\par
interconnect.\par
\bullet  DSP_NoC L2 \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1\'bf\'a1\'bc\'ad (DSP CPU cfg) \'c0\'cc\'b4\'cf\'bd\'c3\'bf\'a1\'c0\'cc\'c5\'cd\'b7\'ce \'c0\'db\'b5\'bf\'c7\'cf\'b4\'c2 \'bf\'dc\'ba\'ce \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1 32 \'ba\'f1\'c6\'ae CFG \'c6\'f7\'c6\'ae.\par
It is the root source of all C66x CPU external configuration traffic (excluding the DSP_ICFG traffic which takes place only within the DSP C66x CorePac) towards the subsystem.\par
\'c0\'cc\'b0\'cd\'c0\'ba C66x CPU\'c0\'c7 \'bf\'dc\'ba\'ce \'b1\'b8\'bc\'ba \'c6\'ae\'b7\'a1\'c7\'c8(DSP C66x CorePac\'bf\'a1\'bc\'ad\'b8\'b8 \'b9\'df\'bb\'fd\'c7\'cf\'b4\'c2 DSP_ICFG \'c6\'ae\'b7\'a1\'c7\'c8\'c0\'bb \'c1\'a6\'bf\'dc\'c7\'d1) \'b8\'f0\'b5\'e7 \'b7\'e7\'c6\'ae \'bc\'d2\'bd\'ba\'bf\'a1\'bc\'ad \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'bb \'c7\'e2\'c7\'d8 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\bullet  An SDMA slave port which is a target on the L2 DSP_NoC interconnect.\par
\bullet  L2 DSP_NoC\'b4\'c2 \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1\'c0\'c7 \'b4\'eb\'bb\'f3\'c0\'ce SDMA \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea \'c6\'f7\'c6\'ae.\par
It generally accepts traffic initiated on DSP_NoC by the:\par
\'c0\'cf\'b9\'dd\'c0\'fb\'c0\'b8\'b7\'ce DSP_NoC\'bf\'a1\'bc\'ad \'bd\'c3\'c0\'db\'b5\'c8 \'c6\'ae\'b7\'a1\'c7\'c8\par
\endash  DSP_EDMA_TC0 and DSP_EDMA_TC1\par
- DSP_EDMA_TC0 \'b9\'d7 DSP_EDMA_TC1\par
\par
\endash  DSP external slave port on the L3_MAIN\par
- L3_MAIN\'c0\'c7 DSP \'bf\'dc\'ba\'ce \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea \'c6\'f7\'c6\'ae\par
\par
In summary:\par
\'bf\'e4\'be\'e0\par
\bullet  The CPU CFG port provides access to the memory-mapped registers which control various peripherals\par
and resources within the DSP subsystem, such as the MMUs, DSP_EDMA controllers, DSP system\par
control and wakeup logic, DSP NoC itself, DSP external peripherals, etc.\par
\bullet  CPU CFG \'c6\'f7\'c6\'ae\'b4\'c2 MMU, DSP_EDMA \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af, DSP \'bd\'c3\'bd\'ba\'c5\'db \'c1\'a6\'be\'ee \'b9\'d7 \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'b7\'ce\'c1\'f7, DSP NoC \'c0\'da\'c3\'bc DSP \'bf\'dc\'ba\'ce \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1 \'b5\'ee DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'b4\'d9\'be\'e7\'c7\'d1 \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1 \'b9\'d7 \'b8\'ae\'bc\'d2\'bd\'ba\'b8\'a6 \'c1\'a6\'be\'ee\'c7\'cf\'b4\'c2 \u8203?\u8203?\'b8\'de\'b8\'f0\'b8\'ae \'b8\'c5\'c7\'ce \'b5\'c8 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'be\'d7\'bc\'bc\'bd\'ba\'b8\'a6 \'c1\'a6\'b0\'f8 \'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet The DSP system masters found outside the DSP C66x CorePac such as the DSP_EDMA controllers\par
(TC0 and TC1) or L3_MAIN masters (device MPU, IPU1, IPU2, etc.) access the SDMA slave port to\par
reach resources inside the DSP C66x CorePac.\par
\bullet DSP_EDMA \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (TC0 \'b9\'d7 TC1) \'b6\'c7\'b4\'c2 L3_MAIN \'b8\'b6\'bd\'ba\'c5\'cd (\'c0\'e5\'c4\'a1 MPU, IPU1, IPU2 \'b5\'ee)\'bf\'cd \'b0\'b0\'c0\'ba DSP C66x CorePac \'bf\'dc\'ba\'ce\'bf\'a1\'bc\'ad \'b9\'df\'b0\'df \'b5\'c8 DSP \'bd\'c3\'bd\'ba\'c5\'db \'b8\'b6\'bd\'ba\'c5\'cd\'b4\'c2 SDMA \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea \'c6\'f7\'c6\'ae\'bf\'a1 \'be\'d7\'bc\'bc\'bd\'ba\'c7\'cf\'bf\'a9 DSP C66x CorePac \'b3\'bb\'ba\'ce \'b8\'ae\'bc\'d2\'bd\'ba\'bf\'a1 \'c1\'a2\'b1\'d9\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
In respect to the SDMA port, the DSP C66x CorePac is the slave in the transaction.\par
SDMA \'c6\'f7\'c6\'ae\'bf\'cd \'b0\'fc\'b7\'c3\'c7\'cf\'bf\'a9 DSP C66x CorePac\'c0\'ba \'c6\'ae\'b7\'a3\'c0\'e8\'bc\'c7\'bf\'a1\'bc\'ad \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea\'c0\'d4\'b4\'cf\'b4\'d9.\par
The DSP_EMC controller adds following functionalities to the DSP C66x CorePac:\par
DSP_EMC \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b4\'c2 \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'c0\'ba \'b1\'e2\'b4\'c9\'c0\'bb DSP C66x CorePac\'bf\'a1 \'c3\'df\'b0\'a1\'c7\'d5\'b4\'cf\'b4\'d9.\par
\bullet  Reporting errors related to the C66x CPU external peripheral configuration bus (associated registers)\par
\bullet  C66x CPU \'bf\'dc\'ba\'ce \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1 \'b1\'b8\'bc\'ba \'b9\'f6\'bd\'ba (\'b0\'fc\'b7\'c3 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd)\'bf\'cd \'b0\'fc\'b7\'c3\'b5\'c8\'ba\'b8\'b0\'ed \'bf\'c0\'b7\'f9\par
\par
NOTE: Regarding PrivID versus AID mapping functionality of the EMC, the C66x DSP CorePac is\par
able to distinguish ONLY "local" vs "external" requests.\par
\'c2\'fc\'b0\'ed : EMC\'c0\'c7 PrivID \'b4\'eb AID \'b8\'c5\'c7\'ce \'b1\'e2\'b4\'c9\'b0\'fa \'b0\'fc\'b7\'c3\'c7\'cf\'bf\'a9 C66x DSP CorePac\'c0\'ba "\'b7\'ce\'c4\'c3"\'b4\'eb "\'bf\'dc\'ba\'ce"\'bf\'e4\'c3\'bb \'b8\'b8 \'b1\'b8\'ba\'b0 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
The device integrated C66x DSP CorePac has the SDMA PrivID input tied-off to a value of 0x0.\par
\par
\'c0\'e5\'c4\'a1 \'c5\'eb\'c7\'d5 C66x DSP CorePac\'b4\'c2 SDMA PrivID \'c0\'d4\'b7\'c2\'c0\'cc 0x0\'c0\'c7 \'b0\'aa\'bf\'a1 \'bf\'ac\'b0\'e1\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
 On DSP C66x CorePac SDMA port, this means that no distinguishing can be made between external requests which come over DSP_NoC interconnect from local DSP_EDMA and those coming from other initiators accesing DSP via the device L3_MAIN interconnect.\par
DSP C66x CorePac SDMA \'c6\'f7\'c6\'ae\'b4\'c2 \'b7\'ce\'c4\'c3 DSP_EDMA\'bf\'a1\'bc\'ad DSP_NoC \'c0\'ce\'c5\'cd\'c4\'bf\'b3\'d8\'c6\'ae \'b9\'d7 \'c0\'e5\'c4\'a1 L3_MAIN \'c0\'ce\'c5\'cd\'c4\'bf\'b3\'d8\'c6\'ae\'b8\'a6 \'c5\'eb\'c7\'d8 DSP\'bf\'a1 \'be\'d7\'bc\'bc\'bd\'ba\'c7\'cf\'b4\'c2 \'b4\'d9\'b8\'a5 \'c0\'cc\'b4\'cf\'bc\'bc\'c0\'cc\'c5\'cd\'b5\'e9\'b0\'fa \'b1\'b8\'ba\'b0 \'c7\'d2 \'bc\'f6 \'be\'f8\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
This limits the funcitionality of the internal memory protection registers.\par
\'c0\'cc\'b7\'b8\'b0\'d4\'c7\'cf\'b8\'e9 \'b3\'bb\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'b1\'e2\'b4\'c9\'c0\'cc \'c1\'a6\'c7\'d1\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The DSP C66x CorePac EMC error event is exported outside the DSP C66x CorePac in the\par
subsystem, and is capable to trigger the ERRINT_IRQ aggregated interrupt output.\par
DSP C66x CorePac EMC \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 DSP C66x CorePac\'c0\'c7 \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'b0\'ed ERRINT_IRQ \'c1\'fd\'b0\'e8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'e2\'b7\'c2\'c0\'bb \'c6\'ae\'b8\'ae\'b0\'c5 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
 See also corresponding EMC_BUSERR event in the Table 5-5.\par
\'c7\'a5 5-5\'c0\'c7 \'c7\'d8\'b4\'e7 EMC_BUSERR \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: The EMC configuration bus error event is not exported outside DSP subsystem.\par
\'c2\'fc\'b0\'ed : EMC \'b1\'b8\'bc\'ba \'b9\'f6\'bd\'ba \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
 However it is merged (OR-ed) along with other error event sources within the DSP subsystem to\par
produce a single ERRINT_IRQ interrupt exported outside the DSP subsystem.\par
\'b1\'d7\'b7\'af\'b3\'aa DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'ba\'ce\'bf\'a1\'bc\'ad \'b4\'d9\'b8\'a5 ERRINT_IRQ \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'c0\'c7 \'b4\'d9\'b8\'a5 \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae \'bc\'d2\'bd\'ba\'bf\'cd \'c7\'d4\'b2\'b2 \'ba\'b4\'c7\'d5 (OR-ed)\'b5\'cb\'b4\'cf\'b4\'d9.\par
For more details on ERRINT_IRQ generation and asscoiated event registers at DSP_SYSTEM level, refer to the Section 5.3.4.2.2.\par
ERRINT_IRQ \'bb\'fd\'bc\'ba \'b9\'d7 DSP_SYSTEM \'b7\'b9\'ba\'a7\'c0\'c7 asscoiated \'c0\'cc\'ba\'a5\'c6\'ae \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.4.2.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
For various DSP_NoC initiator vs target mappings, refer to the Table 5-8.\par
\'b4\'d9\'be\'e7\'c7\'d1 DSP_NoC \'b1\'e2\'c0\'da \'b9\'d7 \'b4\'eb\'bb\'f3 \'b8\'c5\'c7\'ce\'c0\'ba \'c7\'a5 5-8\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
Note that, there are DSP_NoC pressure (Mflag bus) controls in DSP_SYSTEM logic related to the C66x\par
CPU CFG and DSP_NoC SDMA init traffic. They are described in the Section 5.3.8.3.\par
C66x CPU CFG \'b9\'d7 DSP_NoC SDMA init \'c6\'ae\'b7\'a1\'c7\'c8 \'b0\'fc\'b7\'c3 DSP_SYSTEM \'b3\'ed\'b8\'ae\'bf\'a1\'b4\'c2 DSP_NoC \'be\'d0\'b7\'c2 (Mflag \'b9\'f6\'bd\'ba) \'c4\'c1\'c6\'ae\'b7\'d1\'c0\'cc \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9. \'b1\'d7\'b5\'e9\'c0\'ba \'bc\'bd\'bc\'c7 5.3.8.3\'bf\'a1 \'bc\'b3\'b8\'ed\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The EMC functionalities / registers are fully described in the section External Memory Controller (EMC) of the TMS320C66x DSP CorePac User Guide, ( SPRUGW0C).\par
EMC \'b1\'e2\'b4\'c9 / \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 TMS320C66x DSP CorePac \'bb\'e7\'bf\'eb\'c0\'da \'be\'c8\'b3\'bb\'bc\'ad (SPRUGW0C)\'c0\'c7 \'bf\'dc\'c0\'e5 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (EMC) \'bc\'bd\'bc\'c7\'bf\'a1\'bc\'ad \'c0\'da\'bc\'bc\'c8\'f7 \'bc\'b3\'b8\'ed\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.3.2.2.3.7 DSP C66x CorePac Extended Memory Controller\par
5.3.2.2.3.7 DSP C66x CorePac \'c8\'ae\'c0\'e5 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\par
\par
The DSP C66x CorePac located extended memory controller (DSP_XMC_CTRL) implements a local DMA\par
master port (MDMA) which provides the primary path for C66x CPU and cache requests to the device\par
level memories such as (DDR or L3 SRAM) and peripheral / memory mapped register space.\par
DSP C66x CorePac\'bf\'a1 \'c0\'a7\'c4\'a1\'c7\'d1 \'c8\'ae\'c0\'e5 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (DSP_XMC_CTRL)\'b4\'c2 \'c0\'e5\'c4\'a1\'bf\'a1 C66x CPU \'b9\'d7 \'c4\'b3\'bd\'c3 \'bf\'e4\'c3\'bb\'bf\'a1 \'b4\'eb\'c7\'d1 \'b1\'e2\'ba\'bb \'b0\'e6\'b7\'ce\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'cf\'b4\'c2 \'b7\'ce\'c4\'c3 DMA \'b8\'b6\'bd\'ba\'c5\'cd \'c6\'f7\'c6\'ae (MDMA)\'b8\'a6 \'b1\'b8\'c7\'f6\'c7\'d5\'b4\'cf\'b4\'d9 .DDR \'b6\'c7\'b4\'c2 L3 SRAM \'b9\'d7 \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1 / \'b8\'de\'b8\'f0\'b8\'ae \'b8\'c5\'c7\'ce \'b5\'c8 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'b0\'f8\'b0\'a3\'b0\'fa \'b0\'b0\'c0\'ba \'bb\'f3\'c0\'a7 \'bc\'f6\'c1\'d8\'c0\'c7 \'b8\'de\'b8\'f0\'b8\'ae\'b8\'a6 \'c6\'f7\'c7\'d4 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
Via some additional logic, including DSP_SYSTEM controls and a local DSP MMU - DSP_MMU0 on the path (with\par
option to bypass), C66x local MDMA port is mapped to the DSP subsystem CPU master port (i.e. MDMA\par
master port of the DSP CPU on L3_MAIN).\par
DSP_SYSTEM \'c4\'c1\'c6\'ae\'b7\'d1\'b0\'fa \'b0\'e6\'b7\'ce\'bb\'f3\'c0\'c7 \'b7\'ce\'c4\'c3 DSP MMU-DSP_MMU0 (\'b9\'d9\'c0\'cc \'c6\'d0\'bd\'ba \'bf\'c9\'bc\'c7 \'c6\'f7\'c7\'d4)\'c0\'bb \'c6\'f7\'c7\'d4\'c7\'d1 \'b8\'ee \'b0\'a1\'c1\'f6 \'c3\'df\'b0\'a1 \'b7\'ce\'c1\'f7\'c0\'bb \'c5\'eb\'c7\'d8 C66x \'b7\'ce\'c4\'c3 MDMA \'c6\'f7\'c6\'ae\'b4\'c2 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db CPU \'b8\'b6\'bd\'ba\'c5\'cd \'c6\'f7\'c6\'ae (\'bf\'b9 : L3_MAIN\'c0\'c7 DSP CPU \'c0\'c7  MDMA \'b8\'b6\'bd\'ba\'c5\'cd \'c6\'f7\'c6\'ae)\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
 The DSP C66x Corepac MDMA port is mapped to the DSP Subsystem CPU Master Port (with DSP_MMU0 involved or not involved) to allow fast accesses (DSP_NoC not involved) to the external SDRAM (via the L3_MAIN and DMM) or to L3 SRAM (via the L3_MAIN).\par
DSP C66x Corepac MDMA \'c6\'f7\'c6\'ae\'b4\'c2 \'bf\'dc\'ba\'ce SDRAM\'bf\'a1 \'b4\'eb\'c7\'d1 \'ba\'fc\'b8\'a5 \'be\'d7\'bc\'bc\'bd\'ba (L3_MAIN \'b9\'d7 DMM \'c5\'eb\'c7\'d8) \'b6\'c7\'b4\'c2 L3 SRAM\'bf\'a1 \'b4\'eb\'c7\'d1 \'ba\'fc\'b8\'a5 \'be\'d7\'bc\'bc\'bd\'ba (DSP_NoC\'c0\'ba \'c6\'f7\'c7\'d4\'b5\'c7\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9)\'c0\'bb \'b0\'a1\'b4\'c9\'c7\'cf\'b0\'d4\'c7\'cf\'b4\'c2 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db CPU \'b8\'b6\'bd\'ba\'c5\'cd \'c6\'f7\'c6\'ae (DSP_MMU0 \'c2\'fc\'bf\'a9 \'b6\'c7\'b4\'c2 \'c2\'fc\'bf\'a9 \'c7\'cf\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9) L3_MAIN).\par
\par
The memory protection settings in MPAX defines types of the memory accesses permitted on various\par
address ranges within DSP C66x CorePac 32-bit address map.\par
MPAX\'c0\'c7 \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'bc\'b3\'c1\'a4\'c0\'ba DSP C66x CorePac 32 \'ba\'f1\'c6\'ae \'c1\'d6\'bc\'d2 \'b8\'ca \'b3\'bb \'b4\'d9\'be\'e7\'c7\'d1 \u8203?\u8203?\'c1\'d6\'bc\'d2 \'b9\'fc\'c0\'a7\'bf\'a1\'bc\'ad \'c7\'e3\'bf\'eb\'b5\'c7\'b4\'c2 \'b8\'de\'b8\'f0\'b8\'ae \'be\'d7\'bc\'bc\'bd\'ba \'c0\'af\'c7\'fc\'c0\'bb \'c1\'a4\'c0\'c7\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The DSP_XMC_CTRL also instantiates program and data prefetch buffer logic to reduce time during\par
servicing read requests from the L1D, L1P and L2 memory controllers.\par
DSP_XMC_CTRL\'c0\'ba \'b6\'c7\'c7\'d1 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'b9\'d7 \'b5\'a5\'c0\'cc\'c5\'cd \'c7\'c1\'b8\'ae \'c6\'e4\'c4\'a1 \'b9\'f6\'c6\'db \'b7\'ce\'c1\'f7\'c0\'bb \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba\'c8\'ad\'c7\'cf\'bf\'a9 L1D, L1P \'b9\'d7 L2 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'c0\'c7 \'c0\'d0\'b1\'e2 \'bf\'e4\'c3\'bb\'c0\'bb \'c3\'b3\'b8\'ae\'c7\'cf\'b4\'c2 \'b5\'bf\'be\'c8\'c0\'bb \u8203?\u8203?\'c1\'d9\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
The aim is to buffer program and data fetches from external L3_MAIN memory locations.\par
\'b1\'d7 \'b8\'f1\'c0\'fb\'c0\'ba \'bf\'dc\'ba\'ce L3_MAIN \'b8\'de\'b8\'f0\'b8\'ae \'c0\'a7\'c4\'a1\'bf\'a1\'bc\'ad \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'b9\'d7 \'b5\'a5\'c0\'cc\'c5\'cd \'c6\'e4\'c4\'a1\'b8\'a6 \'b9\'f6\'c6\'db\'b8\'b5\'c7\'cf\'b4\'c2 \'b0\'cd\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
While the program prefetch buffer is organized as 4 entry x 32 byte, the data prefetch buffer is organized in 8 slots, with 128 bytes per slot.\par
\'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'c7\'c1\'b8\'ae \'c6\'e4\'c4\'a1 \'b9\'f6\'c6\'db\'b0\'a1 4 \'b0\'b3 \'c7\'d7\'b8\'f1 x 32 \'b9\'d9\'c0\'cc\'c6\'ae\'b7\'ce \'b1\'b8\'bc\'ba\'b5\'c7\'b4\'c2 \'b5\'bf\'be\'c8 \'b5\'a5\'c0\'cc\'c5\'cd \'c7\'c1\'b8\'ae \'c6\'e4\'c4\'a1 \'b9\'f6\'c6\'db\'b4\'c2 \'bd\'bd\'b7\'d4 \'b4\'e7 128 \'b9\'d9\'c0\'cc\'c6\'ae\'b0\'a1\'c0\'d6\'b4\'c2 8 \'b0\'b3 \'bd\'bd\'b7\'d4\'c0\'b8\'b7\'ce \'b1\'b8\'bc\'ba\'b5\'cb\'b4\'cf\'b4\'d9.\par
 The DSP_XMC_CTRL prefetch reduces the penalty associated with accesses to the L3_MAIN SDRAM upon L1P, L1D and L2-cache read-misses.\par
DSP_XMC_CTRL \'c7\'c1\'b8\'ae \'c6\'e4\'c4\'a1\'b4\'c2 L1P, L1D \'b9\'d7 L2 \'c4\'b3\'bd\'c3 \'c0\'d0\'b1\'e2 \'b4\'a9\'b6\'f4\'bd\'c3 L3_MAIN SDRAM\'bf\'a1 \'b4\'eb\'c7\'d1 \'be\'d7\'bc\'bc\'bd\'ba\'bf\'cd \'b0\'fc\'b7\'c3\'b5\'c8 \'c6\'e4\'b3\'ce\'c6\'bc\'b8\'a6 \'c1\'d9\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
NOTE: the DSP_XMC_CTRL registers are part of the DSP_ICFG space, hence they are not\par
accessible outside the DSP C66x CorePac (visible only to the C66x CPU).\par
\'c2\'fc\'b0\'ed : DSP_XMC_CTRL \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 DSP_ICFG \'b0\'f8\'b0\'a3\'c0\'c7 \'c0\'cf\'ba\'ce\'c0\'cc\'b9\'c7\'b7\'ce DSP C66x CorePac (C66x CPU\'bf\'a1\'bc\'ad\'b8\'b8 \'ba\'bc \'bc\'f6 \'c0\'d6\'c0\'bd) \'bf\'dc\'ba\'ce\'bf\'a1\'bc\'ad\'b4\'c2 \'be\'d7\'bc\'bc\'bd\'ba \'c7\'d2 \'bc\'f6 \'be\'f8\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
In summary the DSP_XMC_CTRL provides :\par
\'bf\'e4\'be\'e0\'c7\'cf\'b8\'e9 DSP_XMC_CTRL\'c0\'ba \'b4\'d9\'c0\'bd\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\bullet  a master path from the DSP C66x CorePac level 2 cache / SRAM memory to device memory such as\par
SDRAM or L3 SRAM or peripheral / MMR address space.\par
DSP C66x CorePac \'b7\'b9\'ba\'a7 2 \'c4\'b3\'bd\'c3 / SRAM \'b8\'de\'b8\'f0\'b8\'ae\'bf\'a1\'bc\'ad \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'c0\'ba \'c0\'e5\'c4\'a1( DSP_XMC_CTRL) \'b8\'de\'b8\'f0\'b8\'ae\'bf\'a1 \'c0\'cc\'b8\'a3\'b4\'c2 \'b8\'b6\'bd\'ba\'c5\'cd \'b0\'e6\'b7\'ce SDRAM \'b6\'c7\'b4\'c2 L3 SRAM \'b6\'c7\'b4\'c2 \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1 / MMR \'c1\'d6\'bc\'d2 \'b0\'f8\'b0\'a3.\par
\par
\bullet  memory protection on external address ranges related to L3_MAIN RAMs (via MPAX unit) :\par
\bullet  L3_MAIN RAM\'b0\'fa \'b0\'fc\'b7\'c3\'b5\'c8 \'bf\'dc\'ba\'ce \'c1\'d6\'bc\'d2 \'b9\'fc\'c0\'a7\'c0\'c7 \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 (MPAX \'c0\'e5\'c4\'a1\'b8\'a6 \'c5\'eb\'c7\'d8) :\par
\endash  16 user-defined address ranges (MPAX segments) can be used to divide external memory space\par
- 16 \'b0\'b3\'c0\'c7 \'bb\'e7\'bf\'eb\'c0\'da \'c1\'a4\'c0\'c7 \'c1\'d6\'bc\'d2 \'b9\'fc\'c0\'a7 (MPAX \'bc\'bc\'b1\'d7\'b8\'d5\'c6\'ae)\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 \'bf\'dc\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae \'b0\'f8\'b0\'a3\'c0\'bb \'b3\'aa\'b4\'ad \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9\par
\par
\bullet  Address translation\par
\bullet  \'c1\'d6\'bc\'d2 \'b9\'f8\'bf\'aa\par
\par
\bullet  Data and Program prefetch buffer logic\par
\bullet  \'b5\'a5\'c0\'cc\'c5\'cd \'b9\'d7 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'c7\'c1\'b8\'ae \'c6\'e4\'c4\'a1 \'b9\'f6\'c6\'db \'b7\'ce\'c1\'f7\par
\par
\bullet  12- address candidate buffer that acts as a "stream detection filter"\par
\bullet  "\'bd\'ba\'c6\'ae\'b8\'b2 \'c5\'bd\'c1\'f6 \'c7\'ca\'c5\'cd"\'bf\'aa\'c7\'d2\'c0\'bb\'c7\'cf\'b4\'c2 12- \'c1\'d6\'bc\'d2 \'bf\'b9\'ba\'f1 \'b9\'f6\'c6\'db\par
\par
NOTE: The device DSP subsystem does NOT use the DSP C66x CorePac multicore shared\par
memory controller (MSMC) port to add more static RAM within subsystem boundaries, i.e. no\par
additional SRAM is available in the DSP except for the L1P, L1D and L2 memories.\par
\'c0\'e5\'c4\'a1 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'ba DSP C66x CorePac \'b8\'d6\'c6\'bc \'c4\'da\'be\'ee \'b0\'f8\'c0\'af \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (MSMC) \'c6\'f7\'c6\'ae\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b0\'e6\'b0\'e8 \'b3\'bb\'bf\'a1\'bc\'ad \'b4\'f5 \'b8\'b9\'c0\'ba \'c1\'a4\'c0\'fb RAM\'c0\'bb \'c3\'df\'b0\'a1\'c7\'cf\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9. \'c1\'ef, L1P, L1D \'b9\'d7 L2 \'b8\'de\'b8\'f0\'b8\'ae\'b8\'a6 \'c1\'a6\'bf\'dc\'c7\'cf\'b0\'ed DSP\'bf\'a1 \'c3\'df\'b0\'a1 SRAM\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'d2 \'bc\'f6 \'be\'f8\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
Only the DSP_XMC_CTRL controller MDMA port on the L3_MAIN interconnect is used to extend DSP\par
available RAM memory via a direct or DSP_MMU0 translated access to the device EMIF DDR memories and OCMC RAMs.\par
L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 DSP_XMC_CTRL \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af MDMA \'c6\'f7\'c6\'ae\'b8\'b8 \'c0\'e5\'c4\'a1 EMIF DDR \'b8\'de\'b8\'f0\'b8\'ae \'b9\'d7 OCMC RAM\'bf\'a1 \'c1\'f7\'c1\'a2 \'b6\'c7\'b4\'c2 DSP_MMU0 \'ba\'af\'c8\'af \'be\'d7\'bc\'bc\'bd\'ba\'b8\'a6 \'c5\'eb\'c7\'d8 DSP \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9\'c7\'d1 RAM \'b8\'de\'b8\'f0\'b8\'ae\'b8\'a6 \'c8\'ae\'c0\'e5\'c7\'cf\'b4\'c2 \'b5\'a5 \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The XMC functionalities / registers are fully described in the section Extended Memory Controller (XMC)\par
of the TMS320C66x DSP CorePac User Guide, ( SPRUGW0C).\par
XMC \'b1\'e2\'b4\'c9 / \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 TMS320C66x DSP CorePac \'bb\'e7\'bf\'eb\'c0\'da \'be\'c8\'b3\'bb\'bc\'ad (SPRUGW0C)\'c0\'c7 \'c8\'ae\'c0\'e5 \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (XMC) \'bc\'bd\'bc\'c7\'bf\'a1\'bc\'ad \'c0\'da\'bc\'bc\'c8\'f7 \'bc\'b3\'b8\'ed\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.3.2.2.3.7.1 XMC MDMA Accesses at DSP System Level\par
5.3.2.2.3.7.1 DSP \'bd\'c3\'bd\'ba\'c5\'db \'b7\'b9\'ba\'a7\'bf\'a1\'bc\'ad\'c0\'c7 XMC MDMA \'be\'d7\'bc\'bc\'bd\'ba\par
\par
5.3.2.2.3.7.1.1 DSP System MPAX Logic\par
5.3.2.2.3.7.1.1 DSP \'c3\'bc\'b0\'e8 MPAX \'b3\'ed\'b8\'ae\par
\par
The default configuration of MPAX registers provides a 32-bit view of system memory on L3_MAIN.\par
MPAX \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'b1\'e2\'ba\'bb \'b1\'b8\'bc\'ba\'c0\'ba L3_MAIN\'bf\'a1\'bc\'ad \'bd\'c3\'bd\'ba\'c5\'db \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7 32 \'ba\'f1\'c6\'ae \'ba\'e4\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
In summary, each MPAX segment (mentioned above) is programmed with a starting virtual base address,  segment sizes from 4 GiB down to 4 KiB, replacement address (i.e., physical address); and permission  attributes.\par
\'bf\'e4\'be\'e0\'c7\'cf\'b8\'e9, \'c0\'a7\'bf\'a1\'bc\'ad \'be\'f0\'b1\'de \'c7\'d1 \'b0\'a2 MPAX \'bc\'bc\'b1\'d7\'b8\'d5\'c6\'ae\'b4\'c2 \'bd\'c3\'c0\'db \'b0\'a1\'bb\'f3 \'b1\'e2\'ba\'bb \'c1\'d6\'bc\'d2, 4 GiB\'bf\'a1\'bc\'ad 4 KiB\'b1\'ee\'c1\'f6\'c0\'c7 \'bc\'bc\'b1\'d7\'b8\'d5\'c6\'ae \'c5\'a9\'b1\'e2, \'b4\'eb\'c3\'bc \'c1\'d6\'bc\'d2 (\'c1\'ef, \'bd\'c7\'c1\'a6 \'c1\'d6\'bc\'d2) \'b9\'d7 \'b1\'c7\'c7\'d1 \'bc\'d3\'bc\'ba\'c0\'b8\'b7\'ce \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a1\'b9\'d6\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Provided that DSP_MMU0 can be used to perform address translation, in most cases the replacement address will equal the base address (i.e., virtual == physical from DSP C66x CorePac perespective).\par
DSP_MMU0\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 \'c1\'d6\'bc\'d2 \'ba\'af\'c8\'af\'c0\'bb \'bc\'f6\'c7\'e0 \'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'c2 \'b0\'e6\'bf\'ec, \'b4\'eb\'c3\'bc \'c1\'d6\'bc\'d2\'b4\'c2 \'b1\'e2\'ba\'bb \'c1\'d6\'bc\'d2\'bf\'cd \'b5\'bf\'c0\'cf\'c7\'d5\'b4\'cf\'b4\'d9 (\'c1\'ef, \'b0\'a1\'bb\'f3 == DSP C66x CorePac\'c0\'c7 \'b9\'b0\'b8\'ae\'c0\'fb \'c1\'d6\'bc\'d2).\par
\par
The system level implementation of MPAX logic allows the C66x CPU to change permission without being\par
required to flush the cache.\par
MPAX \'b7\'ce\'c1\'f7\'c0\'c7 \'bd\'c3\'bd\'ba\'c5\'db \'b7\'b9\'ba\'a7 \'b1\'b8\'c7\'f6\'c0\'ba C66x CPU\'b0\'a1 \'c4\'b3\'bd\'c3\'b8\'a6 \'c7\'c3\'b7\'af\'bd\'c3\'c7\'cf\'b4\'c2 \'b5\'a5 \'c7\'ca\'bf\'e4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The C66x CPU subsystem relies on the MPAXn.PERM field to properly configure the permissions for\par
remote address ranges.\par
C66x CPU \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'ba MPAXn.PERM \'c7\'ca\'b5\'e5\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 \'bf\'f8\'b0\'dd \'c1\'d6\'bc\'d2 \'b9\'fc\'c0\'a7\'bf\'a1 \'b4\'eb\'c7\'d1 \'bb\'e7\'bf\'eb \'b1\'c7\'c7\'d1\'c0\'bb \'bf\'c3\'b9\'d9\'b8\'a3\'b0\'d4 \'b1\'b8\'bc\'ba\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The MDMA.rperm[6:0] signals are tie-off to a fixed value of 0x7F on the DSP C66x CorePac boundary.\par
MDMA.rperm [6 : 0] \'bd\'c5\'c8\'a3\'b4\'c2 DSP C66x CorePac \'b0\'e6\'b0\'e8\'bf\'a1\'bc\'ad 0x7F\'c0\'c7 \'b0\'ed\'c1\'a4 \'b0\'aa\'bf\'a1 \'bf\'ac\'b0\'e1\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
5.3.2.2.3.7.1.2 MDMA Non-Post Override Control\par
5.3.2.2.3.7.1.2 MDMA \'ba\'f1 \'c6\'f7\'bd\'ba\'c6\'ae \'c0\'e7 \'c1\'f6\'c1\'a4 \'c1\'a6\'be\'ee\par
\par
The C66x corepac submits writes denoted as either \ldblquote cacheable\rdblquote  or non-cacheable.\par
C66x \'c4\'da\'be\'ee \'c6\'d1\'c0\'ba "\'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9"\'b6\'c7\'b4\'c2 \'c4\'b3\'bd\'c3 \'ba\'d2\'b0\'a1\'b4\'c9\'c7\'d1 \'b0\'cd\'c0\'b8\'b7\'ce \'c7\'a5\'bd\'c3\'b5\'c8 \'be\'b2\'b1\'e2\'b8\'a6 \'c1\'a6\'c3\'e2\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Write accesses that are non-cacheable will be submitted as interconnect (L3_MAIN) non-posted writes; whereas write accesses that are cacheable are submitted as interconnect posted writes.\par
\'be\'b2\'b1\'e2\'b0\'a1 \'ba\'d2\'b0\'a1\'b4\'c9\'c7\'d1 \'be\'b2\'b1\'e2 \'be\'d7\'bc\'bc\'bd\'ba\'b4\'c2 \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 (L3_MAIN) \'ba\'f1 \'b0\'d4\'bd\'c3 \'be\'b2\'b1\'e2\'b7\'ce \'c1\'a6\'c3\'e2\'b5\'cb\'b4\'cf\'b4\'d9. \'c4\'b3\'bd\'c3 \'b0\'a1\'b4\'c9\'c7\'d1 \'be\'b2\'b1\'e2 \'be\'d7\'bc\'bc\'bd\'ba\'b4\'c2 \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 \'b0\'d4\'bd\'c3 \'be\'b2\'b1\'e2\'b7\'ce \'c1\'a6\'c3\'e2\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
An exception for the cache writes to L3_MAIN is that in the case of a cache block write-back operation (when actual cache evict busrts are actually issued towards L3_MAIN connected memory), a non-posted write is submitted.\par
L3_MAIN\'bf\'a1 \'b4\'eb\'c7\'d1 \'c4\'b3\'bd\'c3 \'be\'b2\'b1\'e2 \'bf\'b9\'bf\'dc\'b4\'c2 \'c4\'b3\'bd\'c3 \'ba\'ed\'b7\'cf \'c8\'c4 \'b1\'e2\'b7\'cf \'c0\'db\'be\'f7 (\'bd\'c7\'c1\'a6 \'c4\'b3\'bd\'c3 \'c1\'a6\'b0\'c5 \'b9\'f6\'bd\'ba\'b0\'a1 \'bd\'c7\'c1\'a6\'b7\'ce L3_MAIN \'bf\'ac\'b0\'e1\'b5\'c8 \'b8\'de\'b8\'f0\'b8\'ae\'b8\'a6 \'c7\'e2\'c7\'d2 \'b6\'a7)\'c0\'cc \'b0\'d4\'bd\'c3\'b5\'c7\'c1\'f6 \'be\'ca\'c0\'ba \'be\'b2\'b1\'e2( non-posted)\'b0\'a1 \'c1\'a6\'c3\'e2\'b5\'c8\'b4\'d9\'b4\'c2 \'b0\'cd\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
NOTE: In order to provide a safety net for interconnects that may do aggressive reordering, a memory-mapped register SW control is provided - DSP_SYS_BUS_CONFIG[24] NOPOSTOVERRIDE.\par
\'c2\'fc\'b0\'ed : \'c0\'fb\'b1\'d8\'c0\'fb\'c0\'ce \'c0\'e7\'c1\'a4\'b7\'c4\'c0\'bb \'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'c2 \'c0\'ce\'c5\'cd\'c4\'bf\'b3\'d8\'c6\'ae\'b8\'a6\'bf\'a1\'b0\'d4 \'be\'c8\'c0\'fc\'b8\'c1\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 \'b8\'de\'b8\'f0\'b8\'ae \'b8\'c5\'c7\'ce \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd SW \'c1\'a6\'be\'ee\'b0\'a1 \'c1\'a6\'b0\'f8\'b5\'cb\'b4\'cf\'b4\'d9 (DSP_SYS_BUS_CONFIG [24] NOPOSTOVERRIDE).\par
\par
When set, this results in all write commands being issued as nonposted.\par
\'bc\'b3\'c1\'a4\'b5\'c7\'b8\'e9 \'b8\'f0\'b5\'e7 \'be\'b2\'b1\'e2 \'b8\'ed\'b7\'c9\'c0\'cc \'c6\'f7\'bd\'ba\'c6\'ae\'b0\'a1 \'be\'c6\'b4\'d1 \'b0\'cd\'c0\'b8\'b7\'ce \'b9\'df\'c7\'e0\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
This bit defaults to set, and thus the default behavior is for non-posted writes to be used exclusively.\par
\'c0\'cc \'ba\'f1\'c6\'ae\'b4\'c2 \'b1\'e2\'ba\'bb\'c0\'fb\'c0\'b8\'b7\'ce set\'c0\'b8\'b7\'ce \'bc\'b3\'c1\'a4\'b5\'c7\'be\'ee \'c0\'d6\'b1\'e2 \'b6\'a7\'b9\'ae\'bf\'a1, \'b1\'e2\'ba\'bb \'b5\'bf\'c0\'db\'c0\'ba \'b9\'e8\'c4\'a1\'b5\'c7\'c1\'f6 \'be\'ca\'c0\'ba ( non-posted ) \'be\'b2\'b1\'e2\'b8\'a6 \'b5\'b6\'c1\'a1\'c0\'fb\'c0\'b8\'b7\'ce \'bb\'e7\'bf\'eb\'c7\'d2\'bc\'f6\'c0\'d6\'b4\'d9.\par
\par
5.3.2.2.3.8 L1P Memory Error Detection Logic\par
5.3.2.2.3.8 L1P \'b8\'de\'b8\'f0\'b8\'ae \'bf\'c0\'b7\'f9 \'c5\'bd\'c1\'f6 \'b7\'ce\'c1\'f7\par
\par
The L1P memory detection logic (no correction is implemented) uses a 4-bit parity per 256-bit location (1-bit parity per 64-bit line quadrant).\par
L1P \'b8\'de\'b8\'f0\'b8\'ae \'b0\'a8\'c1\'f6 \'b7\'ce\'c1\'f7 (\'ba\'b8\'c1\'a4\'c7\'cf\'c1\'f6 \'be\'ca\'c0\'bd)\'c0\'ba 256 \'ba\'f1\'c6\'ae \'c0\'a7\'c4\'a1 \'b4\'e7 4 \'ba\'f1\'c6\'ae \'c6\'d0\'b8\'ae\'c6\'bc (64 \'ba\'f1\'c6\'ae \'b6\'f3\'c0\'ce \'bb\'e7\'ba\'d0\'b8\'e9 \'b4\'e7 1 \'ba\'f1\'c6\'ae \'c6\'d0\'b8\'ae\'c6\'bc)\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The L1P error detection logic features:\par
L1P \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'b7\'ce\'c1\'f7\'c0\'c7 \'c6\'af\'c2\'a1\'c0\'ba \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  L1P error detection command, status and address controls (registers)\par
\bullet  L1P \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'b8\'ed\'b7\'c9, \'bb\'f3\'c5\'c2 \'b9\'d7 \'c1\'d6\'bc\'d2 \'c1\'a6\'be\'ee (\'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd)\par
\par
\bullet  L1P_ED error detection exception / interrupt to the DSP_INTC upon DMA / IDMA access\par
\bullet  L1P_ED \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'bf\'b9\'bf\'dc / DMA / IDMA \'be\'d7\'bc\'bc\'bd\'ba\'bd\'c3 DSP_INTC\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\par
\par
\bullet  a direct exception event to C66x CPU (DSP_INTC not involved) upon parity error during a program\par
fetch from L1P-cache\par
\bullet  L1P \'c4\'b3\'bd\'c3\'bf\'a1\'bc\'ad \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5\'c0\'bb \'b0\'a1\'c1\'ae \'bf\'c0\'b4\'c2 \'b5\'bf\'be\'c8 \'c6\'d0\'b8\'ae\'c6\'bc \'bf\'c0\'b7\'f9\'b0\'a1 \'b9\'df\'bb\'fd\'c7\'cf\'b8\'e9 C66x CPU\'bf\'a1 \'b4\'eb\'c7\'d1 \'c1\'f7\'c1\'a2 \'bf\'b9\'bf\'dc \'c0\'cc\'ba\'a5\'c6\'ae (DSP_INTC\'b4\'c2 \'c6\'f7\'c7\'d4\'b5\'c7\'c1\'f6 \'be\'ca\'c0\'bd)\par
\par
\bullet  L1P-cache error recovery\par
\bullet  L1P \'c4\'b3\'bd\'c3 \'bf\'c0\'b7\'f9 \'ba\'b9\'b1\'b8\par
\par
The L1P parity error detection event is exported outside the DSP C66x CorePac in the subsystem,  and can be enabled to trigger the ERRINT_IRQ aggregated interrupt output.\par
L1P \'c6\'d0\'b8\'ae\'c6\'bc \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 DSP C66x CorePac \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'b8\'e7 ERRINT_IRQ \'c1\'fd\'b0\'e8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'e2\'b7\'c2\'c0\'bb \'c6\'ae\'b8\'ae\'b0\'c5 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
 See also corresponding "PMC_ED" event in the Table 5-5.\par
\'c7\'a5 5-5\'c0\'c7 \'c7\'d8\'b4\'e7 "PMC_ED"\'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: The L1P error detection event is not exported outside DSP subsystem.\par
\'c2\'fc\'b0\'ed : L1P \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
However it is merged (OR-ed) along with other error event sources within the DSP subsystem to produce a single ERRINT_IRQ interrupt exported outside the DSP subsystem.\par
\'b1\'d7\'b7\'af\'b3\'aa DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'ba\'ce\'bf\'a1\'bc\'ad \'b4\'d9\'b8\'a5 ERRINT_IRQ \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'c0\'c7 \'b4\'d9\'b8\'a5 \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae \'bc\'d2\'bd\'ba\'bf\'cd \'c7\'d4\'b2\'b2 \'ba\'b4\'c7\'d5 (OR-ed)\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
For more details on ERRINT_IRQ generation and asscoiated event registers at DSP_SYSTEM level, refer to the Section 5.3.4.2.2.\par
ERRINT_IRQ \'bb\'fd\'bc\'ba \'b9\'d7 DSP_SYSTEM \'b7\'b9\'ba\'a7\'c0\'c7 asscoiated \'c0\'cc\'ba\'a5\'c6\'ae \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.4.2.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
For more details on L1P error detection logic, refer to the section L1P Error Detection, of the\par
TMS320C66x DSP CorePac User Guide, ( SPRUGW0C).\par
L1P \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'b7\'ce\'c1\'f7\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba TMS320C66x DSP CorePac \'bb\'e7\'bf\'eb\'c0\'da \'be\'c8\'b3\'bb\'bc\'ad (SPRUGW0C)\'c0\'c7 L1P \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'bc\'bd\'bc\'c7\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.2.2.3.9 L2 Memory Error Detection and Correction Logic\par
5.3.2.2.3.9 L2 \'b8\'de\'b8\'f0\'b8\'ae \'bf\'c0\'b7\'f9 \'c5\'bd\'c1\'f6 \'b9\'d7 \'bc\'f6\'c1\'a4 \'b3\'ed\'b8\'ae\par
\par
The L2 Memory error detection and correction logic (ECC) implements a distance-3 \ldblquote detect 2, correct 1\rdblquote   Hamming code based error correction / detection algorithm.\par
L2 \'b8\'de\'b8\'f0\'b8\'ae \'bf\'c0\'b7\'f9 \'c5\'bd\'c1\'f6 \'b9\'d7 \'c1\'a4\'c1\'a4 \'b7\'ce\'c1\'f7 (ECC)\'c0\'ba \'b0\'c5\'b8\'ae -3 "\'c7\'d8\'b5\'b6 \'c4\'da\'b5\'e5 2\'b8\'a6 \'b1\'e2\'b9\'dd\'c0\'b8\'b7\'ce \'c7\'d1 \'c1\'a4\'c8\'ae\'c7\'d1 \'c7\'d8\'b9\'d6 \'c4\'da\'b5\'e5\'b8\'a6 \'bf\'c0\'b7\'f9 \'c1\'a4\'c1\'a4 / \'b0\'cb\'c3\'e2 \'be\'cb\'b0\'ed\'b8\'ae\'c1\'f2\'c0\'b8\'b7\'ce \'b1\'b8\'c7\'f6\'c7\'d5\'b4\'cf\'b4\'d9.\par
 A 12-bit hamming code per 256-bit is used.\par
256 \'ba\'f1\'c6\'ae \'b4\'e7 12 \'ba\'f1\'c6\'ae \'c7\'d8\'b9\'d6 \'c4\'da\'b5\'e5\'b0\'a1 \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The L2 error detection and correction logic features:\par
L2 \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'b9\'d7 \'c1\'a4\'c1\'a4 \'b7\'ce\'c1\'f7 \'b1\'e2\'b4\'c9 :\par
\par
\bullet  L2 error detection command, status and address controls (registers)\par
\bullet  L2 \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'b8\'ed\'b7\'c9, \'bb\'f3\'c5\'c2 \'b9\'d7 \'c1\'d6\'bc\'d2 \'c1\'a6\'be\'ee (\'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd)\par
\par
\bullet  L2 EDC enable\par
\bullet  L2 EDC \'c8\'b0\'bc\'ba\'c8\'ad\par
\par
\bullet  L2 error detection event counter\par
\bullet  L2 \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'c0\'cc\'ba\'a5\'c6\'ae \'c4\'ab\'bf\'ee\'c5\'cd\par
\par
\bullet  2x L2 EDC exception / interrupts mapped to the DSP_INTC :\par
\bullet  DSP_INTC\'bf\'a1 \'b8\'c5\'c7\'ce \'b5\'c8 2x L2 EDC \'bf\'b9\'bf\'dc / \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae :\par
\par
\endash  L2_ED1 = "error corrected" event\par
- L2_ED1 = "\'bf\'c0\'b7\'f9 \'bc\'f6\'c1\'a4 \'b5\'ca"\'c0\'cc\'ba\'a5\'c6\'ae\par
\par
\endash  L2_ED2 = "error-not-corrected" event\par
- L2_ED2 = "\'bf\'c0\'b7\'f9\'b0\'a1 \'bc\'f6\'c1\'a4\'b5\'c7\'c1\'f6 \'be\'ca\'be\'d2\'bd\'c0\'b4\'cf\'b4\'d9"\'c0\'cc\'ba\'a5\'c6\'ae\par
\par
The two L2 memory error correction events are exported outside the DSP C66x CorePac in the  subsystem, and can be enabled to trigger the ERRINT_IRQ aggregated interrupt output.\par
\'b5\'ce \'b0\'b3\'c0\'c7 L2 \'b8\'de\'b8\'f0\'b8\'ae \'bf\'c0\'b7\'f9 \'bc\'f6\'c1\'a4 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 DSP C66x CorePac \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'b8\'e7 ERRINT_IRQ \'c1\'fd\'b0\'e8 \'b5\'c8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'e2\'b7\'c2\'c0\'bb \'c6\'ae\'b8\'ae\'b0\'c5 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
 See also corresponding "UMC_ED1" and "UMC_ED2" events in the Table 5-5.\par
\'c7\'a5 5-5\'c0\'c7 \'c7\'d8\'b4\'e7 "UMC_ED1"\'b9\'d7 "UMC_ED2"\'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: The L2 error detection events are not exported outside DSP subsystem.\par
\'c2\'fc\'b0\'ed : L2 \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
However they are merged (OR-ed) along with other error event sources within the DSP subsystem to produce\par
a single ERRINT_IRQ interrupt exported outside the DSP subsystem.\par
\'b1\'d7\'b7\'af\'b3\'aa \'c0\'cc\'b5\'e9\'c0\'ba DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'bf\'a1\'bc\'ad \'b4\'d9\'b8\'a5 ERRINT_IRQ \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'c0\'c7 \'b4\'d9\'b8\'a5 \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae \'bc\'d2\'bd\'ba\'bf\'cd \'c7\'d4\'b2\'b2 \'ba\'b4\'c7\'d5 (OR-ed)\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
For more details on ERRINT_IRQ generation and asscoiated event registers at DSP_SYSTEM level, refer to the Section 5.3.4.2.2.\par
ERRINT_IRQ \'bb\'fd\'bc\'ba \'b9\'d7 DSP_SYSTEM \'b7\'b9\'ba\'a7\'c0\'c7 asscoiated \'c0\'cc\'ba\'a5\'c6\'ae \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.4.2.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
For more details on L2 error detection and correction logic, refer to the section L2 Error Detection and\par
Correction of theTMS320C66x DSP CorePac User Guide, ( SPRUGW0C).\par
L2 \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'b9\'d7 \'bc\'f6\'c1\'a4 \'b7\'ce\'c1\'f7\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba TMS320C66x DSP CorePac \'bb\'e7\'bf\'eb\'c0\'da \'be\'c8\'b3\'bb\'bc\'ad (SPRUGW0C)\'c0\'c7 L2 \'bf\'c0\'b7\'f9 \'b0\'a8\'c1\'f6 \'b9\'d7 \'bc\'f6\'c1\'a4 \'bc\'bd\'bc\'c7\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.2.3 DSP Debug and Trace Support\par
5.3.2.3 DSP \'b5\'f0\'b9\'f6\'b1\'d7 \'b9\'d7 \'c3\'df\'c0\'fb \'c1\'f6\'bf\'f8\par
\par
The DSP subsystem offers full support for the native DSP C66x CorePac debug features. This includes\par
Advanced Event Triggering (AET) and Trace.\par
DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'ba \'b1\'e2\'ba\'bb DSP C66x CorePac \'b5\'f0\'b9\'f6\'b1\'d7 \'b1\'e2\'b4\'c9\'c0\'bb \'bf\'cf\'ba\'ae\'c7\'cf\'b0\'d4 \'c1\'f6\'bf\'f8\'c7\'d5\'b4\'cf\'b4\'d9. \'bf\'a9\'b1\'e2\'bf\'a1\'b4\'c2 \'b4\'d9\'c0\'bd\'c0\'cc \'c6\'f7\'c7\'d4\'b5\'cb\'b4\'cf\'b4\'d9.\par
\'b0\'ed\'b1\'de \'c0\'cc\'ba\'a5\'c6\'ae \'c6\'ae\'b8\'ae\'b0\'c5\'b8\'b5 (FAET) \'b9\'d7 \'c3\'df\'c0\'fb.\par
\par
5.3.2.3.1 DSP Advanced Event Triggering (AET)\par
5.3.2.3.1 DSP \'b0\'ed\'b1\'de \'c0\'cc\'ba\'a5\'c6\'ae \'c6\'ae\'b8\'ae\'b0\'c5\'b8\'b5 (AET)\par
\par
AET capability can be used to debug complex problems as well as understand performance\par
characteristics of user applications.\par
AET \'b1\'e2\'b4\'c9\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 \'ba\'b9\'c0\'e2\'c7\'d1 \'b9\'ae\'c1\'a6\'b8\'a6 \'b5\'f0\'b9\'f6\'b1\'eb\'c7\'cf\'b0\'ed \'bb\'e7\'bf\'eb\'c0\'da \'c0\'c0\'bf\'eb \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5\'c0\'c7 \'bc\'ba\'b4\'c9 \'c6\'af\'bc\'ba\'c0\'bb \'c0\'cc\'c7\'d8\'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
AET provides the following capabilities:\par
AET\'b4\'c2 \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'c0\'ba \'b1\'e2\'b4\'c9\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  Hardware Program Breakpoints: specify addresses or address ranges that can generate events such\par
as halting the processor or triggering the trace capture.\par
\bullet  \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'c1\'df\'b4\'dc \'c1\'a1 : \'c7\'c1\'b7\'ce\'bc\'bc\'bc\'ad \'c1\'a4\'c1\'f6 \'b6\'c7\'b4\'c2 \'c6\'ae\'b7\'b9\'c0\'cc\'bd\'ba \'c4\'b8\'c3\'b3 \'c6\'ae\'b8\'ae\'b0\'c5\'bf\'cd \'b0\'b0\'c0\'ba \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba \'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'c2 \'c1\'d6\'bc\'d2 \'b6\'c7\'b4\'c2 \'c1\'d6\'bc\'d2 \'b9\'fc\'c0\'a7\'b8\'a6 \'c1\'f6\'c1\'a4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  Data Watchpoints: specify data variable addresses, address ranges, or data values that can generate\par
events such as halting the processor or triggering the trace capture.\par
\bullet  Data Watchpoints : \'c7\'c1\'b7\'ce\'bc\'bc\'bc\'ad \'c1\'df\'c1\'f6 \'b6\'c7\'b4\'c2 \'c3\'df\'c0\'fb \'c4\'b8\'c3\'b3 \'c6\'ae\'b8\'ae\'b0\'c5\'bf\'cd \'b0\'b0\'c0\'ba \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba \'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'c2 \'b5\'a5\'c0\'cc\'c5\'cd \'ba\'af\'bc\'f6 \'c1\'d6\'bc\'d2, \'c1\'d6\'bc\'d2 \'b9\'fc\'c0\'a7 \'b6\'c7\'b4\'c2 \'b5\'a5\'c0\'cc\'c5\'cd \'b0\'aa\'c0\'bb \'c1\'f6\'c1\'a4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  Counters: count the occurrence of an event or cycles for performance monitoring.\par
\bullet  \'c4\'ab\'bf\'ee\'c5\'cd : \'bc\'ba\'b4\'c9 \'b8\'f0\'b4\'cf\'c5\'cd\'b8\'b5\'c0\'bb \'c0\'a7\'c7\'d8 \'c0\'cc\'ba\'a5\'c6\'ae\'c0\'c7 \'b9\'df\'bb\'fd \'b6\'c7\'b4\'c2 \'c8\'bd\'bc\'f6\'b8\'a6 \'b0\'e8\'bb\'ea\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  State Sequencing: allows combinations of hardware program breakpoints and data watchpoints to  precisely generate events for complex sequences.\par
\bullet  \'bb\'f3\'c5\'c2 \'bd\'c3\'c4\'f6\'bd\'ba : \'ba\'b9\'c0\'e2\'c7\'d1 \'bd\'c3\'c4\'f6\'bd\'ba\'c0\'c7 \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c1\'a4\'c8\'ae\'c7\'cf\'b0\'d4 \'bb\'fd\'bc\'ba\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5\'c0\'c7 \'c1\'df\'b4\'dc \'c1\'a1 \'b9\'d7 \'b5\'a5\'c0\'cc\'c5\'cd \'bf\'cd\'c4\'a1 \'c6\'f7\'c0\'ce\'c6\'ae\'b8\'a6 \'b0\'e1\'c7\'d5 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
5.3.2.3.2 DSP Trace Support\par
5.3.2.3.2 DSP \'c3\'df\'c0\'fb \'c1\'f6\'bf\'f8\par
\par
Trace is a debug technology that provides a detailed, historical account of application code execution, timing, and data accesses.\par
\'c3\'df\'c0\'fb\'c0\'ba \'c0\'c0\'bf\'eb \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'c4\'da\'b5\'e5 \'bd\'c7\'c7\'e0, \'c5\'b8\'c0\'cc\'b9\'d6 \'b9\'d7 \'b5\'a5\'c0\'cc\'c5\'cd \'be\'d7\'bc\'bc\'bd\'ba\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'bc\'b3\'b8\'ed\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'cf\'b4\'c2 \'b5\'f0\'b9\'f6\'b1\'d7 \'b1\'e2\'bc\'fa\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
Trace collects, compresses, and exports debug information for analysis.\par
\'c3\'df\'c0\'fb\'c0\'ba \'ba\'d0\'bc\'ae\'c0\'bb \'c0\'a7\'c7\'d8 \'b5\'f0\'b9\'f6\'b1\'d7 \'c1\'a4\'ba\'b8\'b8\'a6 \'bc\'f6\'c1\'fd, \'be\'d0\'c3\'e0 \'b9\'d7 \'b3\'bb\'ba\'b8\'b3\'bb\'b1\'e2\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Trace works in real-time and does not impact the execution of the system. Trace is supported via Code  Composer Studio.\par
\'c3\'df\'c0\'fb\'c0\'ba \'bd\'c7\'bd\'c3\'b0\'a3\'c0\'b8\'b7\'ce \'c0\'db\'b5\'bf\'c7\'cf\'b8\'e7 \'bd\'c3\'bd\'ba\'c5\'db \'bd\'c7\'c7\'e0\'bf\'a1 \'bf\'b5\'c7\'e2\'c0\'bb \'b9\'cc\'c4\'a1\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9. \'c3\'df\'c0\'fb\'c0\'ba Code Composer Studio\'b8\'a6 \'c5\'eb\'c7\'d8 \'c1\'f6\'bf\'f8\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
See also the Chapter 34, On-Chip Debug Support.\par
34 \'c0\'e5, \'bf\'c2\'c4\'a8 \'b5\'f0\'b9\'f6\'b1\'d7 \'c1\'f6\'bf\'f8\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.3 DSP System Control Logic\par
5.3.3 DSP \'bd\'c3\'bd\'ba\'c5\'db \'c1\'a6\'be\'ee \'b3\'ed\'b8\'ae\par
\par
The DSP_SYSTEM module controls the following functions:\par
DSP_SYSTEM \'b8\'f0\'b5\'e2\'c0\'ba \'b4\'d9\'c0\'bd \'b1\'e2\'b4\'c9\'c0\'bb \'c1\'a6\'be\'ee\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  Generation of the divided clocks (DSP_CLK2 or DSP_CLK3) to all components of the DSP subsystem\par
\bullet  DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'b8\'f0\'b5\'e7 \'b1\'b8\'bc\'ba \'bf\'e4\'bc\'d2\'b7\'ce \'ba\'d0\'c7\'d2 \'c5\'ac\'b7\'b0 (DSP_CLK2 \'b6\'c7\'b4\'c2 DSP_CLK3) \'bb\'fd\'bc\'ba\par
\par
\bullet  Synchronization of the DSP divided clocks\par
\bullet  DSP \'ba\'d0\'c7\'d2 \'c5\'ac\'b7\'b0\'c0\'c7 \'b5\'bf\'b1\'e2\'c8\'ad\par
\par
\bullet  PRCM module power handshaking\par
\bullet  PRCM \'b8\'f0\'b5\'e2 \'c0\'fc\'bf\'f8 \'c7\'da\'b5\'e5 \'bd\'a6\'c0\'cc\'c5\'b7\par
\par
\bullet  Reset input resynchronization of the active-to-inactive transition to the CD1_CLK clock\par
\bullet  CD1_CLK \'c5\'ac\'b7\'cf\'bf\'a1 \'b4\'eb\'c7\'d1 \'c8\'b0\'bc\'ba - \'ba\'f1\'c8\'b0\'bc\'ba \'c0\'fc\'c8\'af\'c0\'c7 \'c0\'d4\'b7\'c2 \'c0\'e7 \'b5\'bf\'b1\'e2\'c8\'ad \'c0\'e7\'bc\'b3\'c1\'a4\par
\par
\bullet  DSP subsystem top level configuraiton registers and its access from the DSP core.\par
\bullet  DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'c3\'d6\'bb\'f3\'c0\'a7 \'b7\'b9\'ba\'a7 \'b1\'b8\'bc\'ba \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'b9\'d7 DSP \'c4\'da\'be\'ee\'b7\'ce\'ba\'ce\'c5\'cd\'c0\'c7 \'be\'d7\'bc\'bc\'bd\'ba.\par
\par
Figure 5-3 highlights the DSP_SYSTEM and its connectivities to the surrounding blocks within the  subsystem and in the device.\par
\'b1\'d7\'b8\'b2 5-3\'c0\'ba DSP_SYSTEM\'b0\'fa \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'b9\'d7 \'c0\'e5\'c4\'a1\'c0\'c7 \'c1\'d6\'ba\'af \'ba\'ed\'b7\'cf\'bf\'a1 \'b4\'eb\'c7\'d1 \'bf\'ac\'b0\'e1\'c0\'bb \'b0\'ad\'c1\'b6 \'c7\'a5\'bd\'c3\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.3.3.1 DSP System Clocks\par
5.3.3.1 DSP \'bd\'c3\'bd\'ba\'c5\'db \'c5\'ac\'b7\'b0\par
\par
The DSP1 and DSP2 subsystems inputs a primary non-divided clock (DSP1_FICLK / DSP2_FICLK) and  based on it (DSP_CLK1), internally generates either a divided by 2 clock (DSP_CLK2) version or a  divided by 3 clock (DSP_CLK3).\par
DSP1 \'b9\'d7 DSP2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'ba 1 \'c2\'f7 \'b9\'cc\'ba\'d0\'c7\'d2 \'c5\'ac\'b7\'b0(DSP1_FICLK / DSP2_FICLK)\'c0\'bb \'c0\'d4\'b7\'c2\'c7\'cf\'b0\'ed \'c0\'cc\'b8\'a6 \'b1\'e2\'b9\'dd\'c0\'b8\'b7\'ce DSP_CLK1\'c0\'bb \'b3\'bb\'ba\'ce\'c0\'fb\'c0\'b8\'b7\'ce 2 \'c5\'ac\'b7\'b0(DSP_CLK2) \'b9\'f6\'c0\'fc\'c0\'b8\'b7\'ce \'b3\'aa\'b4\'a9\'be\'ee \'c1\'f6\'b0\'c5\'b3\'aa 3 \'c5\'ac\'b7\'b0\'c0\'b8\'b7\'ce \'b3\'aa\'b4\'a9\'be\'ee (DSP_CLK3) \'bb\'fd\'bc\'ba\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The divided clock determines the operation rate of the DSP subsystem logic and bus interfaces.\par
\'ba\'d0\'c7\'d2 \'c5\'ac\'b7\'b0\'c0\'ba DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b7\'ce\'c1\'f7 \'b9\'d7 \'b9\'f6\'bd\'ba \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'c0\'c7 \'c0\'db\'b5\'bf \'bc\'d3\'b5\'b5\'b8\'a6 \'b0\'e1\'c1\'a4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The division is defined upon device boot time through signal level externally applied on the device sysboot15 input.\par
\'b5\'f0\'b9\'d9\'c0\'cc \'bd\'ba\'b4\'c2 \'c0\'e5\'c4\'a1 \'ba\'ce\'c6\'c3 \'bd\'c3\'b0\'a3\'c0\'bb  \'bf\'dc\'ba\'ce\'bf\'a1 \'c0\'d6\'b4\'c2 \'c0\'e5\'c4\'a1 sysboot15 \'c0\'d4\'b7\'c2\'bf\'a1  \'c0\'fb\'bf\'eb\'b5\'c8 \'bd\'c5\'c8\'a3 \'b7\'b9\'ba\'a7\'c0\'bb \'c5\'eb\'c7\'d8 \'c1\'a4\'c0\'c7\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
 The actual bit configuration is latched upon power-on reset in Control Module register CTRL_CORE_BOOTSTRAP[15] SYS_BOOT_15_CLOCK_DIVIDER boot status bit.\par
\'bd\'c7\'c1\'a6 \'ba\'f1\'c6\'ae \'b1\'b8\'bc\'ba\'c0\'ba \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd CTRL_CORE_BOOTSTRAP [15] SYS_BOOT_15_CLOCK_DIVIDER \'ba\'ce\'c6\'c3 \'bb\'f3\'c5\'c2\'b4\'c2 \'ba\'f1\'c6\'ae\'c0\'c7 \'c0\'fc\'bf\'f8 \'c4\'d1\'b1\'e2 \'c0\'e7\'bc\'b3\'c1\'a4\'bd\'c3 \'b7\'a1\'c4\'a1\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
For more details, refer to the Section 18.4.6.14.1, System Boot Status Settings of the chapter, Control  Module.\par
\'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'bc\'bd\'bc\'c7 18.4.6.14.1, \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2 \'c0\'e5\'c0\'c7 \'bd\'c3\'bd\'ba\'c5\'db \'ba\'ce\'c6\'c3 \'bb\'f3\'c5\'c2 \'bc\'b3\'c1\'a4\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: Upon boot time, sysboot15 set at '0' selects a DSP_CLK2 and a sysboot15 set at '1' selects\par
a DSP_CLK3 divided clock version for the DSP subsystem logic and bus interfaces.\par
\'c2\'fc\'b0\'ed : \'ba\'ce\'c6\'c3\'bd\'c3 sysboot15\'b0\'a1 '0'\'c0\'b8\'b7\'ce \'bc\'b3\'c1\'a4\'b5\'c7\'b8\'e9 DSP_CLK2\'b0\'a1 \'bc\'b1\'c5\'c3\'b5\'c7\'b0\'ed '1'\'b7\'ce \'bc\'b3\'c1\'a4\'b5\'c8 sysboot15\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'b3\'ed\'b8\'ae \'b9\'d7 \'b9\'f6\'bd\'ba \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'bf\'a1 \'b4\'eb\'c7\'d8 DSP_CLK3 \'ba\'d0\'c7\'d2 \'c5\'ac\'b7\'b0 \'b9\'f6\'c0\'fc\'c0\'bb \'bc\'b1\'c5\'c3\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
NOTE: Only DSP_CLK3 clock is supported on this SoC. For SR1.1, sysboot15 must be tied to vdd,  but for SR2.0 it is configurable. For more information, see Section 18.4.6.1.1.1, Permanent PU/PD disabling (SR 2.0 only) in Chapter 18, Control Module.\par
\'c2\'fc\'b0\'ed :\'c0\'cc SoC\'bf\'a1\'bc\'ad\'b4\'c2 DSP_CLK3 \'c5\'ac\'b7\'b0 \'b8\'b8 \'c1\'f6\'bf\'f8\'b5\'cb\'b4\'cf\'b4\'d9. SR1.1\'c0\'c7 \'b0\'e6\'bf\'ec sysboot15\'b4\'c2 vdd\'bf\'a1 \'bf\'ac\'b0\'e1\'c7\'d8\'be\'df\'c7\'cf\'c1\'f6\'b8\'b8 SR2.0\'c0\'c7 \'b0\'e6\'bf\'ec \'b1\'b8\'bc\'ba\'c0\'cc \'b0\'a1\'b4\'c9\'c7\'d5\'b4\'cf\'b4\'d9. \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 18 \'c0\'e5, \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2\'c0\'c7 18.4.6.1.1.1 \'c0\'fd, \'bf\'b5\'b1\'b8 PU / PD \'ba\'f1\'c8\'b0\'bc\'ba\'c8\'ad (SR 2.0 \'c0\'fc\'bf\'eb)\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
The clock operating mode setting (DSP_CLK2 or DSP_CLK3) must be static just before and continually  after reset deassertion.\par
\'c5\'ac\'b7\'cf \'b5\'bf\'c0\'db \'b8\'f0\'b5\'e5 \'bc\'b3\'c1\'a4 (DSP_CLK2 \'b6\'c7\'b4\'c2 DSP_CLK3)\'c0\'ba \'b8\'ae\'bc\'c2 \'b5\'f0 \'be\'ee\'bd\'e4\'c6\'ae \'c1\'f7\'c0\'fc\'b0\'fa \'b1\'d7 \'c1\'f7\'c8\'c4\'bf\'a1 \'c1\'a4\'c0\'fb\'c0\'cc\'be\'ee\'be\'df\'c7\'d1\'b4\'d9.\par
\par
 This signal will also drive the configuration to the DSP C66x CorePac for the XMC_MDMA_CLK, EMC_SDMA_CLK, and EMC_CFG_CLK configurations.\par
\'c0\'cc \'bd\'c5\'c8\'a3\'b4\'c2 \'b6\'c7\'c7\'d1 XMC_MDMA_CLK, EMC_SDMA_CLK \'b9\'d7 EMC_CFG_CLK \'b1\'b8\'bc\'ba\'c0\'bb \'c0\'a7\'c7\'d8 DSP C66x CorePac\'bf\'a1 \'b4\'eb\'c7\'d1 \'b1\'b8\'bc\'ba\'c0\'bb \'c0\'af\'b5\'b5\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The DSPSS1 / DSPSS2 subsystem input clock frequency (DSP_CLK1) corresponds to the PRCM DSP1_GFCLK / DSP2_GFCLK frequency that is configured in the device PRCM registers.\par
DSPSS1 / DSPSS2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'c0\'d4\'b7\'c2 \'c5\'ac\'b7\'cf \'c1\'d6\'c6\'c4\'bc\'f6 (DSP_CLK1)\'b4\'c2 \'c0\'e5\'c4\'a1 PRCM \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b1\'b8\'bc\'ba\'b5\'c8 PRCM DSP1_GFCLK / DSP2_GFCLK \'c1\'d6\'c6\'c4\'bc\'f6\'bf\'a1 \'c7\'d8\'b4\'e7\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
NOTE: For valid DSP_CLK1 (and hence for DSP_CLK3 = DSP_CLK1 / 3) frequency range, see the  Operating Performance Points section of the device Data Manual.\par
\'c2\'fc\'b0\'ed : \'bf\'c3\'b9\'d9\'b8\'a5 DSP_CLK1 (\'b5\'fb\'b6\'f3\'bc\'ad DSP_CLK3 = DSP_CLK1 / 3) \'c1\'d6\'c6\'c4\'bc\'f6 \'b9\'fc\'c0\'a7\'bf\'a1 \'b4\'eb\'c7\'d8\'bc\'ad\'b4\'c2 \'c0\'e5\'c4\'a1 \'b5\'a5\'c0\'cc\'c5\'cd \'b8\'c5\'b4\'ba\'be\'f3\'c0\'c7 \'c0\'db\'b5\'bf \'bc\'ba\'b4\'c9 \'c1\'a1\'bc\'f6 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
The Section 5.3.2 also shows the distribution of the different DSP subsystems blocks within the two DSP  local clock domains CD0_CLK (running on DSP_CLK frequency) and CD1_CLK (running on DSP_CLK2\par
or DSP_CLK3 frequency).\par
\'bc\'bd\'bc\'c7 5.3.2\'b4\'c2 \'b6\'c7\'c7\'d1 \'b5\'ce \'b0\'b3\'c0\'c7 DSP \'b3\'bb\'bf\'a1\'bc\'ad \'bc\'ad\'b7\'ce \'b4\'d9\'b8\'a5 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'ba\'ed\'b7\'b0\'c0\'c7 \'ba\'d0\'c6\'f7\'b8\'a6 \'ba\'b8\'bf\'a9\'c1\'d8\'b4\'d9\par
DSP_CLK \'c1\'d6\'c6\'c4\'bc\'f6\'bf\'a1\'bc\'ad \'bd\'c7\'c7\'e0\'b5\'c7\'b4\'c2 \'b7\'ce\'c4\'c3 \'c5\'ac\'b7\'cf \'b5\'b5\'b8\'de\'c0\'ce CD0_CLK) \'b9\'d7 DSP_CLK2 \'b6\'c7\'b4\'c2 DSP_CLK3 \'c1\'d6\'c6\'c4\'bc\'f6\'bf\'a1\'bc\'ad \'bd\'c7\'c7\'e0\'b5\'c7\'b4\'c2 CD1_CLK\'b0\'a1 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
Table 5-4. Summary of the DSP1 and DSP2 Hardware Resets\par
\'c7\'a5 5-4. DSP1 \'b9\'d7 DSP2 \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee \'c0\'e7\'bc\'b3\'c1\'a4 \'bf\'e4\'be\'e0\par
\par
DSP1_PWR_RST Description\par
This is power-on reset signal used inside DSP1 to reset mainly the  emulation logic.\par
\'c0\'cc\'b0\'cd\'c0\'ba \'c1\'d6\'b7\'ce \'bf\'a1\'b9\'c4\'b7\'b9\'c0\'cc\'bc\'c7 \'b7\'ce\'c1\'f7\'c0\'bb \'b8\'ae\'bc\'c2\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSP1 \'b3\'bb\'ba\'ce\'bf\'a1\'bc\'ad \'bb\'e7\'bf\'eb\'b5\'c7\'b4\'c2 \'c6\'c4\'bf\'f6 \'bf\'c2 \'b8\'ae\'bc\'c2 \'bd\'c5\'c8\'a3\'c0\'d4\'b4\'cf\'b4\'d9.\par
 It resets the entire DSP1 logic.\par
DSP1 \'b7\'ce\'c1\'f7 \'c0\'fc\'c3\'bc\'b8\'a6 \'b8\'ae\'bc\'c2\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
DSP1_RST\par
Reset signal used to reset all logic inside DSP1 except Emulation logic.\par
\'bf\'a1\'b9\'c4\'b7\'b9\'c0\'cc\'bc\'c7 \'b7\'ce\'c1\'f7\'c0\'bb \'c1\'a6\'bf\'dc\'c7\'d1 DSP1 \'b3\'bb\'c0\'c7 \'b8\'f0\'b5\'e7 \'b7\'ce\'c1\'f7\'c0\'bb \'b8\'ae\'bc\'c2\'c7\'cf\'b4\'c2 \'b5\'a5 \'bb\'e7\'bf\'eb\'b5\'c7\'b4\'c2 \'b8\'ae\'bc\'c2 \'bd\'c5\'c8\'a3.\par
\par
DSP1_LRST\par
Reset applied ONLY to the C66x CPU inside DSP1\par
\'b8\'ae\'bc\'c2\'c0\'ba DSP1 \'b3\'bb\'ba\'ce\'c0\'c7 C66x CPU\'bf\'a1\'b8\'b8 \'c0\'fb\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
DSP1_LRST_DONE\par
Indicates completion of the DSP1 local C66x CPU reset to device PRCM\par
\'c0\'e5\'c4\'a1 PRCM\'bf\'a1 \'b4\'eb\'c7\'d1 DSP1 \'b7\'ce\'c4\'c3 C66x CPU \'c0\'e7\'bc\'b3\'c1\'a4 \'bf\'cf\'b7\'e1\'b8\'a6 \'b3\'aa\'c5\'b8\'b3\'c0\'b4\'cf\'b4\'d9.\par
\par
See also the Section 5.2 for more information on the PRCM reset sources to DSP reset inputs  connectivity.\par
PRCM \'c0\'e7\'bc\'b3\'c1\'a4 \'bc\'d2\'bd\'ba \'bf\'cd DSP \'c0\'e7\'bc\'b3\'c1\'a4 \'c0\'d4\'b7\'c2 \'bf\'ac\'b0\'e1\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
Refer to the Section 3.5.6.6, DSP1 Subsystem Power-on Reset Sequence and the Section 3.5.6.8, DSP2  Subsystem Power-on Reset Sequence in the chapter, Power, Reset and Clock Manamgement for more  details on the DSP1 and DSP2 power-on reset sequence, respectively.\par
DSP1 \'b9\'d7 DSP2 \'c6\'c4\'bf\'f6 \'bf\'c2\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 3.5.6.6 \'c0\'fd, DSP1 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'c6\'c4\'bf\'f6 \'bf\'c2 \'b8\'ae\'bc\'c2 \'bc\'f8\'bc\'ad \'b9\'d7 3.5.6.8 \'c0\'fd, DSP2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'c6\'c4\'bf\'f6 \'bf\'c2 \'b8\'ae\'bc\'c2 \'bc\'f8\'bc\'ad, \'c0\'fc\'bf\'f8, \'b8\'ae\'bc\'c2 \'b9\'d7 \'c5\'ac\'b7\'cf \'b0\'fc\'b8\'ae \'c0\'e5\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0. \'b8\'ae\'bc\'c2 \'bd\'c3\'c4\'f6\'bd\'ba\'c0\'cc\'b4\'d9.\par
\par
NOTE: In the case of DSP1 / DSP2 recovery from the \ldblquote Powerdown-grid off\rdblquote , a full power-on-reset  sequence is required before re-booting and resuming functional operation.\par
\'c2\'fc\'b0\'ed : \'c0\'fc\'bf\'f8 \'b2\'f4\'b1\'e2 \'b1\'d7\'b8\'ae\'b5\'e5\'bf\'a1\'bc\'ad DSP1 / DSP2\'b8\'a6 \'ba\'b9\'b1\'b8\'c7\'cf\'b4\'c2 \'b0\'e6\'bf\'ec "\'b1\'e2\'b4\'c9 \'c0\'db\'b5\'bf\'c0\'bb \'c0\'e7\'ba\'ce\'c6\'c3\'c7\'cf\'b0\'ed \'b4\'d9\'bd\'c3 \'bd\'c3\'c0\'db\'c7\'cf\'b1\'e2 \'c0\'fc\'bf\'a1 \'c0\'fc\'c3\'bc \'c6\'c4\'bf\'f6 \'bf\'c2 \'b8\'ae\'bc\'c2 \'bd\'c3\'c4\'f6\'bd\'ba\'b0\'a1 \'c7\'ca\'bf\'e4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The DSP host (device MPU) software must ensure that the PRCM functional clock DSP1_GFCLK / DSP2_GFCLK is enabled to the DSP1 / DSP2, respectively, prior to starting the DSP1 / DSP2 power-on reset sequence.\par
DSP \'c8\'a3\'bd\'ba\'c6\'ae (\'c0\'e5\'c4\'a1 MPU) \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b4\'c2 DSP1 / DSP2 \'c6\'c4\'bf\'f6 \'bf\'c2 \'b8\'ae\'bc\'c2 \'bd\'c3\'c4\'f6\'bd\'ba\'b8\'a6 \'bd\'c3\'c0\'db\'c7\'cf\'b1\'e2 \'c0\'fc\'bf\'a1 PRCM \'b1\'e2\'b4\'c9 \'c5\'ac\'b7\'b0 \'c0\'ce DSP1_GFCLK / DSP2_GFCLK\'b0\'a1 \'b0\'a2\'b0\'a2 DSP1 / DSP2\'bf\'a1 \'c8\'b0\'bc\'ba\'c8\'ad\'b5\'c7\'be\'ee \'c0\'d6\'b4\'c2\'c1\'f6 \'c8\'ae\'c0\'ce\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.3.3.3 DSP Software Resets\par
5.3.3.3 DSP \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee \'b8\'ae\'bc\'c2\par
\par
During a software reset on the DSP, all resets described in Table 5-4 are asserted, except for the poweron DSP_PWRON_RST signal which remains de-asserted in this case.\par
DSP\'bf\'a1\'bc\'ad \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b8\'a6 \'b8\'ae\'bc\'c2\'c7\'cf\'b4\'c2 \'b5\'bf\'be\'c8 \'c7\'a5\'bd\'c3 \'b5\'c7\'c1\'f6 \'be\'ca\'c0\'ba poweron DSP_PWRON_RST \'bd\'c5\'c8\'a3\'b8\'a6 \'c1\'a6\'bf\'dc\'c7\'cf\'b0\'ed \'c7\'a5 5-4\'bf\'a1 \'bc\'b3\'b8\'ed \'b5\'c8 \'b8\'f0\'b5\'e7 \'b8\'ae\'bc\'c2\'c0\'cc \'be\'ee\'bc\'b3\'c6\'ae\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The DSP subsystem does NOT implement any local software reset controls.\par
DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'ba \'b7\'ce\'c4\'c3 \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee \'c0\'e7\'bc\'b3\'c1\'a4 \'c1\'a6\'be\'ee\'b8\'a6 \'b1\'b8\'c7\'f6\'c7\'cf\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The software reset assertion and DSP_LRST completion monitoring is done in PRCM located registers (part of the DSP1_PRM / DSP2_PRM address space).\par
\'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee \'b8\'ae\'bc\'c2 \'be\'ee\'bc\'b3\'bc\'c7 \'b9\'d7 DSP_LRST \'bf\'cf\'b7\'e1 \'b8\'f0\'b4\'cf\'c5\'cd\'b8\'b5\'c0\'ba PRCM \'c0\'a7\'c4\'a1 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd (DSP1_PRM / DSP2_PRM \'be\'ee\'b5\'e5\'b7\'b9\'bd\'ba \'b0\'f8\'b0\'a3\'c0\'c7 \'c0\'cf\'ba\'ce)\'bf\'a1\'bc\'ad \'bc\'f6\'c7\'e0\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Refer to the Section 3.5.6.7, DSP1 Subsystem Software Warm Reset Sequence and the Section 3.5.6.9,  DSP2 Subsystem Software Warm Reset Sequence in the chapter, Power, Reset and Clock Manamgement for more details on the DSP1 and DSP2 software reset sequence and related software controls, respectively.\par
DSP1 \'b9\'d7 DSP2 \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee \'b8\'ae\'bc\'c2 \'bc\'f8\'bc\'ad\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 3.5.6.7, DSP1 \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee \'bf\'fa \'b8\'ae\'bc\'c2 \'bc\'f8\'bc\'ad \'b9\'d7 3.5.6.9 \'c0\'fd, DSP2 \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee \'bf\'fa \'b8\'ae\'bc\'c2 \'bc\'f8\'bc\'ad, \'c0\'fc\'bf\'f8, \'b8\'ae\'bc\'c2 \'b9\'d7 \'c5\'ac\'b7\'cf \'b0\'fc\'b8\'ae \'c0\'e5\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0. \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee \'c1\'a6\'be\'ee\par
\par
5.3.3.4 DSP Power Management\par
5.3.3.4 DSP \'c0\'fc\'bf\'f8 \'b0\'fc\'b8\'ae\par
\par
The supported power-down modes are:\par
\'c1\'f6\'bf\'f8\'b5\'c7\'b4\'c2 \'c0\'fd\'c0\'fc \'b8\'f0\'b5\'e5\'b4\'c2 \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  Slave idle and master standby protocols for powerdown\par
\bullet  \'c0\'fc\'bf\'f8 \'b2\'f4\'b1\'e2\'b8\'a6\'c0\'a7\'c7\'d1 \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea \'c0\'af\'c8\'de \'b9\'d7 \'b8\'b6\'bd\'ba\'c5\'cd \'b4\'eb\'b1\'e2 \'c7\'c1\'b7\'ce\'c5\'e4\'c4\'dd\par
\par
\bullet  "Disconnect from interconnect" handshake for init and target busses\par
\bullet  \'c3\'ca\'b1\'e2\'c8\'ad \'b9\'d7 \'b4\'eb\'bb\'f3 \'b9\'f6\'bd\'ba\'bf\'a1 \'b4\'eb\'c7\'d1 "\'c0\'ce\'c5\'cd\'c4\'bf\'b3\'d8\'c6\'ae \'bf\'ac\'b0\'e1 \'c7\'d8\'c1\'a6"\'c7\'da\'b5\'e5 \'bc\'ce\'c0\'cc\'c5\'a9\par
\par
\bullet  Clock Stop mode - wakeup on interrupt or DMA event\par
\bullet  Clock Stop \'b8\'f0\'b5\'e5 - \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'b6\'c7\'b4\'c2 DMA \'c0\'cc\'ba\'a5\'c6\'ae \'b9\'df\'bb\'fd\par
\par
\bullet  Grid OFF mode : No power supply is switched-on\par
\bullet  \'b1\'d7\'b8\'ae\'b5\'e5 OFF \'b8\'f0\'b5\'e5 : \'c0\'fc\'bf\'f8 \'b0\'f8\'b1\'de \'c0\'e5\'c4\'a1\'b0\'a1 \'c4\'d1\'c1\'ae \'c0\'d6\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
NOTE: Powerdown-retention mode is NOT supported by DSP subsystem. The DSP recovery from\par
the Powerdown-grid OFF mode requires full boot.\par
\'c2\'fc\'b0\'ed : DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'bf\'a1\'bc\'ad\'b4\'c2 \'c0\'fd\'c0\'fc \'b8\'f0\'b5\'e5\'b8\'a6 \'c1\'f6\'bf\'f8\'c7\'cf\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9. Powerdown-grid OFF \'b8\'f0\'b5\'e5\'bf\'a1\'bc\'ad DSP\'b8\'a6 \'ba\'b9\'b1\'b8\'c7\'cf\'b7\'c1\'b8\'e9 \'c0\'fc\'c3\'bc \'ba\'ce\'c6\'c3\'c0\'cc \'c7\'ca\'bf\'e4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The DSP C66x CorePac natively supports \ldblquote CLKSTOP/Static Powerdown\rdblquote  and \ldblquote POWERDOWN (Grid off)\rdblquote   modes of operation.\par
DSP C66x CorePac\'c0\'ba \'b1\'e2\'ba\'bb\'c0\'fb\'c0\'b8\'b7\'ce "CLKSTOP / Static Powerdown"\'b9\'d7 "POWERDOWN (Grid off)"\'c0\'db\'b5\'bf \'b8\'f0\'b5\'e5\'b8\'a6 \'c1\'f6\'bf\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
 Once the device PRCM restores clocks and power supply, then the DSP C66x CorePac can exit static-powerdown.\par
\'c0\'e5\'c4\'a1 PRCM\'c0\'cc \'c5\'ac\'b7\'cf \'b9\'d7 \'c0\'fc\'bf\'f8 \'b0\'f8\'b1\'de\'c0\'bb \'ba\'b9\'bf\'f8\'c7\'cf\'b8\'e9 DSP C66x CorePac\'c0\'ba \'c1\'a4\'c0\'fb \'c0\'fc\'bf\'f8 \'c2\'f7\'b4\'dc\'c0\'bb \'c1\'be\'b7\'e1 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The DSP_SYSTEM wakeup logic is implemented in the "always-on" clock / power supply domain.\par
DSP_SYSTEM \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'b7\'ce\'c1\'f7\'c0\'ba "always-on"\'c5\'ac\'b7\'b0 / \'c0\'fc\'bf\'f8 \'b0\'f8\'b1\'de \'c0\'e5\'c4\'a1 \'b5\'b5\'b8\'de\'c0\'ce\'bf\'a1\'bc\'ad \'b1\'b8\'c7\'f6\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
 This logic monitors new interrupts / events and will drive the IDLE wakeup request when a new interrupt / event occurs.\par
\'c0\'cc \'b7\'ce\'c1\'f7\'c0\'ba \'bb\'f5\'b7\'ce\'bf\'ee \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae / \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'b8\'f0\'b4\'cf\'c5\'cd\'b8\'b5\'c7\'cf\'b0\'ed \'bb\'f5\'b7\'ce\'bf\'ee \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae / \'c0\'cc\'ba\'a5\'c6\'ae\'b0\'a1 \'b9\'df\'bb\'fd\'c7\'d2 \'b6\'a7 IDLE \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'bf\'e4\'c3\'bb\'c0\'bb \'c0\'af\'b5\'b5\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.3.3.4.1 DSP System Powerdown Protocols\par
5.3.3.4.1 DSP \'bd\'c3\'bd\'ba\'c5\'db \'c0\'fc\'bf\'f8 \'c2\'f7\'b4\'dc \'c7\'c1\'b7\'ce\'c5\'e4\'c4\'dd\par
\par
For each of the powerdown modes \endash  Static or Powerdown-Grid Off, the device PRCM will control whether  clocks are gated, or whether supplies are reduced or removed.\par
\'b0\'a2 \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'b8\'f0\'b5\'e5 (Static \'b6\'c7\'b4\'c2 Powerdown-Grid Off)\'bf\'a1 \'b4\'eb\'c7\'d8 \'c0\'e5\'c4\'a1 PRCM\'c0\'ba \'c5\'ac\'b7\'cf\'c0\'cc \'b0\'d4\'c0\'cc\'c6\'ae\'b5\'c7\'b4\'c2\'c1\'f6 \'b6\'c7\'b4\'c2 \'bc\'d2\'b8\'f0\'c7\'b0\'c0\'cc \'b0\'a8\'bc\'d2\'b5\'c7\'b0\'c5\'b3\'aa \'c1\'a6\'b0\'c5\'b5\'c7\'b4\'c2\'c1\'f6 \'bf\'a9\'ba\'ce\'b8\'a6 \'c1\'a6\'be\'ee\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
NOTE: In the case of \ldblquote Powerdown-grid off\rdblquote , a full power-on-reset sequence is required before rebooting  and resuming functional operation.\par
\'c2\'fc\'b0\'ed : "Powerdown-grid off"\'c0\'c7 \'b0\'e6\'bf\'ec, \'b1\'e2\'b4\'c9 \'c0\'db\'b5\'bf\'c0\'bb \'c0\'e7\'ba\'ce\'c6\'c3\'c7\'cf\'b0\'ed \'b4\'d9\'bd\'c3 \'bd\'c3\'c0\'db\'c7\'cf\'b1\'e2 \'c0\'fc\'bf\'a1 \'c0\'fc\'c3\'bc \'c6\'c4\'bf\'f6 \'bf\'c2 \'b8\'ae\'bc\'c2 \'bd\'c3\'c4\'f6\'bd\'ba\'b0\'a1 \'c7\'ca\'bf\'e4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
in the static powerdown modes - the DSP recognizes new level interrupts while in a clock-gated state (and  drive wakeup request).\par
\'c1\'a4\'c0\'fb \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'b8\'f0\'b5\'e5\'bf\'a1\'bc\'ad DSP\'b4\'c2 \'c5\'ac\'b7\'b0 \'b0\'d4\'c0\'cc\'c6\'ae \'bb\'f3\'c5\'c2 (\'b9\'d7 \'b5\'e5\'b6\'f3\'c0\'cc\'ba\'ea \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'bf\'e4\'c3\'bb)\'bf\'a1\'bc\'ad \'bb\'f5\'b7\'ce\'bf\'ee \'b7\'b9\'ba\'a7 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'c0\'ce\'bd\'c4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
 During this powerdown mode all internal state will be retained, including DSP C66x CorePac, interconnect, EDMA, memories, etc.\par
\'c0\'cc \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'b8\'f0\'b5\'e5\'bf\'a1\'bc\'ad\'b4\'c2 DSP C66x CorePac, \'c0\'ce\'c5\'cd\'c4\'bf\'b3\'d8\'c6\'ae, EDMA, \'b8\'de\'b8\'f0\'b8\'ae \'b5\'ee \'b8\'f0\'b5\'e7 \'b3\'bb\'ba\'ce \'bb\'f3\'c5\'c2\'b0\'a1 \'c0\'af\'c1\'f6\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The following protocols are implemented with PRCM:\par
\'b4\'d9\'c0\'bd \'c7\'c1\'b7\'ce\'c5\'e4\'c4\'dd\'c0\'ba PRCM\'c0\'b8\'b7\'ce \'b1\'b8\'c7\'f6\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
\bullet  Slave idle protocol with device PRCM for powerdown (wake-up capable)\par
\bullet  \'c0\'fd\'c0\'fc\'c0\'bb \'c0\'a7\'c7\'d8 \'c0\'e5\'c4\'a1 PRCM\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'cf\'b4\'c2 \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea IDLE \'c7\'c1\'b7\'ce\'c5\'e4\'c4\'dd (\'b1\'fa\'bf\'ec\'b1\'e2 \'b0\'a1\'b4\'c9)\par
\par
\bullet  Master standby protocol with device PRCM for powerdown\par
\bullet  \'c0\'fc\'bf\'f8 \'b0\'f8\'b1\'de \'c0\'e5\'c4\'a1 \'bf\'eb \'c0\'e5\'c4\'a1 PRCM\'c0\'cc\'c0\'d6\'b4\'c2 \'b8\'b6\'bd\'ba\'c5\'cd \'b4\'eb\'b1\'e2 \'c7\'c1\'b7\'ce\'c5\'e4\'c4\'dd\par
\par
\bullet  Interconnect disconnect for master and slave ports\par
\bullet  \'b8\'b6\'bd\'ba\'c5\'cd \'b9\'d7 \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea \'c6\'f7\'c6\'ae\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'ce\'c5\'cd\'c4\'bf\'b3\'d8\'c6\'ae \'bf\'ac\'b0\'e1 \'c7\'d8\'c1\'a6\par
\par
The Master standby and slave idle protocols behaviour is controlled in the DSP_SYS_SYSCONFIG  register.\par
\'b8\'b6\'bd\'ba\'c5\'cd \'b4\'eb\'b1\'e2 \'b9\'d7 \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea \'c0\'af\'c8\'de \'c7\'c1\'b7\'ce\'c5\'e4\'c4\'dd \'b5\'bf\'c0\'db\'c0\'ba DSP_SYS_SYSCONFIG \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1\'bc\'ad \'c1\'a6\'be\'ee\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
5.3.3.4.2 DSP Software and Hardware Power Down Sequence Overview\par
5.3.3.4.2 DSP \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee \'b9\'d7 \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee \'c0\'fc\'bf\'f8 \'c2\'f7\'b4\'dc \'bd\'c3\'c4\'f6\'bd\'ba \'b0\'b3\'bf\'e4\par
\par
Figure 5-4 highlights the high level flow-chart for entry into any of the DSP powerdown modes.\par
\'b1\'d7\'b8\'b2 5-4\'b4\'c2 DSP \'c6\'c4\'bf\'f6 \'b4\'d9\'bf\'ee \'b8\'f0\'b5\'e5\'b7\'ce \'b5\'e9\'be\'ee\'b0\'a1\'b1\'e2\'c0\'a7\'c7\'d1 \'c7\'cf\'c0\'cc \'b7\'b9\'ba\'a7 \'c7\'c3\'b7\'ce\'bf\'ec \'c2\'f7\'c6\'ae\'b8\'a6 \'b0\'ad\'c1\'b6 \'c7\'a5\'bd\'c3\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Thesystem host (typically) first informs the DSP that it should enter a powerdown mode.\par
\'bd\'c3\'bd\'ba\'c5\'db \'c8\'a3\'bd\'ba\'c6\'ae (\'c0\'cf\'b9\'dd\'c0\'fb\'c0\'b8\'b7\'ce)\'b4\'c2 \'b8\'d5\'c0\'fa DSP\'bf\'a1 \'c0\'fc\'bf\'f8 \'c2\'f7\'b4\'dc \'b8\'f0\'b5\'e5\'b7\'ce \'b5\'e9\'be\'ee\'b0\'a1\'be\'df\'c7\'d1\'b4\'d9\'b0\'ed \'be\'cb\'b8\'b3\'b4\'cf\'b4\'d9.\par
\par
The host (g.h. device MPU) sends a software message (normally via system level mailbox+interrupt).\par
\'c8\'a3\'bd\'ba\'c6\'ae (g.h \'c0\'e5\'c4\'a1 MPU)\'b4\'c2 \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee \'b8\'de\'bd\'c3\'c1\'f6\'b8\'a6 \'ba\'b8\'b3\'c0\'b4\'cf\'b4\'d9 (\'c0\'cf\'b9\'dd\'c0\'fb\'c0\'b8\'b7\'ce \'bd\'c3\'bd\'ba\'c5\'db \'bc\'f6\'c1\'d8 \'c6\'ed\'c1\'f6\'c7\'d4 + \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'c5\'eb\'c7\'d8).\par
\par
In parallel, the PRCM (via host or DSP programmation) will hardware assert an SIdleReq request to the DSP via the IDLE Protocolconnection.\par
\'ba\'b4\'b7\'c4\'b7\'ce, PRCM (\'c8\'a3\'bd\'ba\'c6\'ae \'b6\'c7\'b4\'c2 DSP \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a1\'b9\'d6\'c0\'bb \'c5\'eb\'c7\'d8) \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee\'b4\'c2 IDLE \'c7\'c1\'b7\'ce\'c5\'e4\'c4\'dd \'bf\'ac\'b0\'e1\'c0\'bb \'c5\'eb\'c7\'d8 DSP\'b7\'ce SIdleReq \'bf\'e4\'c3\'bb\'c0\'bb \'be\'ee\'bc\'b3 \'bc\'c7\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
At the next stage, the C66x CPU, in general, performs any software bookkeeping necessary\par
to transition the DSP subsystem to a quiescent state.\par
\'b4\'d9\'c0\'bd \'b4\'dc\'b0\'e8\'bf\'a1\'bc\'ad C66x CPU\'b4\'c2 \'c0\'cf\'b9\'dd\'c0\'fb\'c0\'b8\'b7\'ce DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'bb \'c1\'a4\'c1\'f6 \'bb\'f3\'c5\'c2\'b7\'ce \'c0\'fc\'c8\'af\'c7\'cf\'b4\'c2 \'b5\'a5 \'c7\'ca\'bf\'e4\'c7\'d1 \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee \'ba\'ce\'b1\'e2\'b8\'a6 \'bc\'f6\'c7\'e0\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
This may include : waiting for outstanding DMA transfers to complete, waiting for outstanding DMA transfers to complete, etc.\par
\'bf\'a9\'b1\'e2\'bf\'a1\'b4\'c2 \'b4\'d9\'c0\'bd\'c0\'bb \'c6\'f7\'c7\'d4 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9 : \'b9\'cc\'c7\'d8\'b0\'e1 DMA \'c0\'fc\'bc\'db \'bf\'cf\'b7\'e1 \'b4\'eb\'b1\'e2, \'b9\'cc\'c7\'d8\'b0\'e1 DMA \'c0\'fc\'bc\'db \'bf\'cf\'b7\'e1 \'b4\'eb\'b1\'e2, \'b5\'ee\par
\par
 The C66x processor should finally execute the IDLE instruction when it is ready to be powered-down.\par
 C66x \'c7\'c1\'b7\'ce\'bc\'bc\'bc\'ad\'b4\'c2 \'c0\'fc\'bf\'f8\'c0\'cc \'b2\'a8\'c1\'fa \'c1\'d8\'ba\'f1\'b0\'a1\'b5\'c7\'be\'fa\'c0\'bb \'b6\'a7 \'b8\'b6\'c4\'a7\'b3\'bb IDLE \'b8\'ed\'b7\'c9\'c0\'bb \'bd\'c7\'c7\'e0\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
 Assuming the DSP_SYS_SYSCONFIG[5:4] STANDBYMODE is enabled, then the hardware will transition to an idle state and notify to the system the intention to enter powerdown state to the system via the master standby and slave idle protocols.\par
 DSP_SYS_SYSCONFIG [5 : 4] STANDBYMODE\'b0\'a1 \'c8\'b0\'bc\'ba\'c8\'ad\'b5\'c7\'be\'fa\'b4\'d9\'b0\'ed \'b0\'a1\'c1\'a4\'c7\'cf\'b8\'e9 \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee\'b4\'c2 IDLE \'bb\'f3\'c5\'c2\'b7\'ce \'c0\'fc\'c8\'af\'b5\'c7\'be\'ee \'b8\'b6\'bd\'ba\'c5\'cd \'b4\'eb\'b1\'e2 \'b9\'d7 \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea IDLE \'c7\'c1\'b7\'ce\'c5\'e4\'c4\'dd\'c0\'bb \'c5\'eb\'c7\'d8 \'bd\'c3\'bd\'ba\'c5\'db\'bf\'a1 \'c0\'fc\'bf\'f8 \'c2\'f7\'b4\'dc \'bb\'f3\'c5\'c2\'b7\'ce \'b5\'e9\'be\'ee\'b0\'a5 \'c0\'c7\'b5\'b5\'b8\'a6 \'bd\'c3\'bd\'ba\'c5\'db\'bf\'a1 \'be\'cb\'b8\'b3\'b4\'cf\'b4\'d9.\par
\par
After IDLE and MSTANDBY handshake is completed, the DSP clocks are optionally gated; and supply rails are optionally reduced or turned off.\par
 IDLE(\'b0\'d4\'c0\'b8\'b8\'a5?) \'b9\'d7 MSTANDBY \'c7\'da\'b5\'e5 \'bc\'ce\'c0\'cc\'c5\'a9\'b0\'a1 \'bf\'cf\'b7\'e1\'b5\'c7\'b8\'e9 DSP \'c5\'ac\'b7\'cf\'c0\'cc \'bc\'b1\'c5\'c3\'c0\'fb\'c0\'b8\'b7\'ce \'b0\'d4\'c0\'cc\'c6\'ae\'b5\'cb\'b4\'cf\'b4\'d9. \'bc\'b1\'c5\'c3\'c0\'fb\'c0\'b8\'b7\'ce \'b0\'f8\'b1\'de \'b7\'b9\'c0\'cf\'c0\'bb \'c1\'d9\'c0\'cc\'b0\'c5 \'b3\'aa \'b2\'fc\'b4\'cf\'b4\'d9.\par
\par
NOTE: The PM_DSPx_PWRSTCTRL[1:0] POWERSTATE bit field in device PRCM must be set to 0x3 (ON state) prior to performing the sequence shown in Figure 5-4 for the transition to be successful.\par
\'c2\'fc\'b0\'ed : \'c0\'fc\'c8\'af\'c0\'cc \'bc\'ba\'b0\'f8\'c7\'cf\'b7\'c1\'b8\'e9 \'b1\'d7\'b8\'b2 5-4\'bf\'a1 \'c7\'a5\'bd\'c3\'b5\'c8 \'bd\'c3\'c4\'f6\'bd\'ba\'b8\'a6 \'bc\'f6\'c7\'e0\'c7\'cf\'b1\'e2 \'c0\'fc\'bf\'a1 \'c0\'e5\'c4\'a1 PRCM\'c0\'c7 PM_DSPx_PWRSTCTRL [1 : 0] POWERSTATE \'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5\'b8\'a6 0x3 (ON \'bb\'f3\'c5\'c2)\'b7\'ce \'bc\'b3\'c1\'a4\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.3.3.4.3 DSP IDLE Wakeup\par
5.3.3.4.3 DSP IDLE \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7\par
\par
In order to facilitate auto-wakeup of DSP C66x, the IDLE protocol\rquote s wakeup capability is used.\par
DSP C66x\'c0\'c7 \'c0\'da\'b5\'bf \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7\'c0\'bb \'bf\'eb\'c0\'cc\'c7\'cf\'b0\'d4\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 IDLE \'c7\'c1\'b7\'ce\'c5\'e4\'c4\'dd\'c0\'c7 \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'b1\'e2\'b4\'c9\'c0\'cc \'bb\'e7\'bf\'eb\'b5\'c8\'b4\'d9.\par
\par
Wakeup operation is enabled if DSP_SYS_SYSCONFIG[3:2] IDLEMODE is set to 0x3.\par
DSP_SYS_SYSCONFIG [3 : 2] IDLEMODE\'b0\'a1 0x3\'c0\'b8\'b7\'ce \'bc\'b3\'c1\'a4\'b5\'c8 \'b0\'e6\'bf\'ec \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'c0\'db\'be\'f7\'c0\'cc \'c8\'b0\'bc\'ba\'c8\'ad\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
In this mode, while in IDLE state, if an external input interrupt source is asserted (if enabled via the DSP_SYS_IRQWAKEEN0 / DSP_SYS_IRQWAKEEN1 mask) or if an external DMA event source is asserted (if enabled via the DSP_SYS_DMAWAKEEN0 / DSP_SYS_DMAWAKEEN1 mask) or if the DSP subsystem NMI input is asserted (note that there is no wake enable mask for the non- askable interrupt) then the Mwakeup signal is asserted to the PRCM which is expected to observe the Mwakeup.\par
\'c0\'cc \'b8\'f0\'b5\'e5\'bf\'a1\'bc\'ad\'b4\'c2 IDLE \'bb\'f3\'c5\'c2\'bf\'a1\'bc\'ad \'bf\'dc\'ba\'ce \'c0\'d4\'b7\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bc\'d2\'bd\'ba\'b0\'a1 \'be\'ee\'bc\'b3 \'bc\'c7(\'bf\'e4\'c3\'bb? \'ba\'bb\'b6\'e6\'c0\'ba \'c1\'d6\'c0\'e5\'c7\'cf\'b4\'d9.) (DSP_SYS_IRQWAKEEN0 / DSP_SYS_IRQWAKEEN1 \'b8\'b6\'bd\'ba\'c5\'a9\'b8\'a6 \'c5\'eb\'c7\'d8 \'c8\'b0\'bc\'ba\'c8\'ad \'b5\'c8 \'b0\'e6\'bf\'ec)\'b5\'c7\'b0\'c5\'b3\'aa \'bf\'dc\'ba\'ce DMA \'c0\'cc\'ba\'a5\'c6\'ae \'bc\'d2\'bd\'ba\'b0\'a1 \'be\'ee\'bc\'b3 \'bc\'c7(\'bf\'e4\'c3\'bb) (DSP_SYS_DMAWAKEEN0 / DSP_SYS_DMAWAKEEN1 \'b8\'b6\'bd\'ba\'c5\'a9\'b8\'a6 \'c5\'eb\'c7\'d8 \'c8\'b0\'bc\'ba\'c8\'ad \'b5\'c8 \'b0\'e6\'bf\'ec)\'b5\'c7\'b0\'c5\'b3\'aa DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db NMI \'c0\'d4\'b7\'c2\'c0\'cc \'be\'ee\'bc\'b3\'bc\'c7(\'bf\'e4\'c3\'bb)\'b5\'c7\'b8\'e9 (\'ba\'f1 \'bf\'e4\'c3\'bb \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'bf\'a1 \'b4\'eb\'c7\'d1 \'bf\'fe\'c0\'cc\'c5\'a9 \'c0\'ce \'bf\'a1\'c0\'cc\'ba\'ed \'b8\'b6\'bd\'ba\'c5\'a9\'b0\'a1 \'be\'f8\'b4\'d9\'b4\'c2 \'b0\'cd\'bf\'a1 \'c0\'af\'c0\'c7\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0), Mwakeup \'bd\'c5\'c8\'a3\'b4\'c2 Mwakeup\'c0\'bb \'b0\'fc\'c3\'f8 \'c7\'d2 \'b0\'cd\'c0\'b8\'b7\'ce \'bf\'b9\'bb\'f3\'b5\'c7\'b4\'c2 PRCM\'bf\'a1 \'be\'ee\'bc\'ad \'c6\'ae(\'c1\'d6\'c0\'e5)\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Upon such assertion the PRCM enables the clocks, exiting the "Standby" and "Idle" states.\par
\'b1\'d7\'b7\'af\'c7\'d1 \'be\'ee\'bc\'b3 \'bc\'c7\'bd\'c3 PRCM\'c0\'ba \'c5\'ac\'b7\'cf\'c0\'bb \'c8\'b0\'bc\'ba\'c8\'ad\'c7\'cf\'b0\'ed "\'b4\'eb\'b1\'e2"\'b9\'d7 "IDLE"\'bb\'f3\'c5\'c2\'b8\'a6 \'c1\'be\'b7\'e1\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
at this point the C66x CPU is able to branch to the pending interrupt service routine.\par
\'c0\'cc \'bd\'c3\'c1\'a1\'bf\'a1\'bc\'ad C66x CPU\'b4\'c2 \'ba\'b8\'b7\'f9\'c1\'df\'c0\'ce \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bc\'ad\'ba\'f1\'bd\'ba \'b7\'e7\'c6\'be\'c0\'b8\'b7\'ce \'ba\'d0\'b1\'e2 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The MWakeup is deasserted when all IRQ or DMA requests enabled in the DSP_SYS_IRQWAKEEN0/1 and\par
DSP_SYS_DMAWAKEEN0/1 are deasserted.\par
MWakeup\'c0\'ba \'b8\'f0\'b5\'e7 IRQ \'b6\'c7\'b4\'c2 DMA \'bf\'e4\'c3\'bb\'c0\'cc DSP_SYS_IRQWAKEEN0 / 1\'bf\'a1\'bc\'ad \'c8\'b0\'bc\'ba\'c8\'ad \'b5\'c9 \'b6\'a7 \'b5\'f0 \'be\'ee\'bc\'ad \'c6\'ae\'b5\'c7\'b0\'ed\par
DSP_SYS_DMAWAKEEN0 / 1\'c0\'cc (\'b0\'a1) \'c7\'d8\'c1\'a6\'b5\'c7\'be\'fa\'bd\'c0\'b4\'cf\'b4\'d9\par
\par
The Wakeup logic controlling assertion of the MWakeup request is completely asynchronous because in IDLE mode the clock may not be present.\par
IDLE \'b8\'f0\'b5\'e5\'bf\'a1\'bc\'ad \'c5\'ac\'b7\'cf\'c0\'cc \'c1\'b8\'c0\'e7\'c7\'cf\'c1\'f6 \'be\'ca\'c0\'bb \'bc\'f6 \'c0\'d6\'b1\'e2 \'b6\'a7\'b9\'ae\'bf\'a1 MWakeup \'bf\'e4\'c3\'bb\'c0\'c7 \'be\'ee\'bc\'b3 \'bc\'c7\'c0\'bb \'c1\'a6\'be\'ee\'c7\'cf\'b4\'c2 \u8203?\u8203?\'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'b7\'ce\'c1\'f7\'c0\'ba \'bf\'cf\'c0\'fc\'c8\'f7 \'ba\'f1\'b5\'bf\'b1\'e2\'bd\'c4\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
It relies on level sensitive interrupts.\par
\'b7\'b9\'ba\'a7\'bf\'a1 \'b9\'ce\'b0\'a8\'c7\'d1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'bf\'a1 \'c0\'c7\'c1\'b8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
NOTE: The DSP_EDMA must be manually removed from IDLE / Standby state.\par
\'c2\'fc\'b0\'ed : DSP_EDMA\'b4\'c2 IDLE / \'b4\'eb\'b1\'e2 \'bb\'f3\'c5\'c2\'bf\'a1\'bc\'ad \'bc\'f6\'b5\'bf\'c0\'b8\'b7\'ce \'c1\'a6\'b0\'c5\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
During that time, it is possible that the EDMA input event is no longer pending and may not have been recognized/latched as an EVENT to the EDMA.\par
\'c0\'cc \'bd\'c3\'b0\'a3 \'b5\'bf\'be\'c8 EDMA \'c0\'d4\'b7\'c2 \'c0\'cc\'ba\'a5\'c6\'ae\'b0\'a1 \'b4\'f5 \'c0\'cc\'bb\'f3 \'ba\'b8\'b7\'f9 \'bb\'f3\'c5\'c2\'b0\'a1 \'be\'c6\'b4\'cf\'b8\'e7 EDMA\'bf\'a1 EVENT\'b7\'ce \'c0\'ce\'bd\'c4 / \'b7\'a1\'c4\'a1\'b5\'c7\'c1\'f6 \'be\'ca\'be\'d2\'c0\'bb \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
In that case, the user SW can enable the DSP EDMA_WAKE_INT (in associated DSP_SYS_EDMAWAKE0_IRQENABLE_SET register ) to recognize in the (DSP_SYS_EDMAWAKE0_IRQSTATUS_RAW  /DSP_SYS_EDMAWAKE0_IRQSTATUS ) which specific EDMA event was asserted and caused the wakeup condition.\par
\'c0\'cc \'b0\'e6\'bf\'ec, \'bb\'e7\'bf\'eb\'c0\'da SW\'b4\'c2 \'bf\'ac\'b0\'fc\'b5\'c8 DSP_SYS_EDMAWAKE0_IRQENABLE_SET \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 DSP EDMA_WAKE_INT\'b8\'a6 (DSP_SYS_EDMAWAKE0_IRQSTATUS_RAW / DSP_SYS_EDMAWAKE0_IRQSTATUS) \'c6\'af\'c1\'a4 EDMA \'c0\'cc\'ba\'a5\'c6\'ae\'bf\'a1 \'be\'ee\'bc\'b3 \'bc\'c7\'b5\'c7\'be\'ee \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'bb\'f3\'c5\'c2\'b0\'a1 \'b9\'df\'bb\'fd\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The DSP software can then trigger the corresponding DSP_EDMA channel manually (by setting the ESR) or by servicing the interrupt/event manually via reads and writes.\par
DSP \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b4\'c2 \'c7\'d8\'b4\'e7 DSP_EDMA \'c3\'a4\'b3\'ce\'c0\'bb \'bc\'f6\'b5\'bf\'c0\'b8\'b7\'ce \'c6\'ae\'b8\'ae\'b0\'c5 (ESR \'bc\'b3\'c1\'a4)\'c7\'cf\'b0\'c5\'b3\'aa \'c0\'d0\'b1\'e2 \'b9\'d7 \'be\'b2\'b1\'e2\'b8\'a6 \'c5\'eb\'c7\'d8 \'bc\'f6\'b5\'bf\'c0\'b8\'b7\'ce \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae / \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c3\'b3\'b8\'ae \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
For more details, refer to the Section 5.3.5.1.\par
\'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.5.1 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0\par
\par
5.3.3.4.4 DSP SYSTEM IRQWAKEEN registers\par
5.3.3.4.4 DSP \'bd\'c3\'bd\'ba\'c5\'db IRQWAKEEN \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\par
\par
The DSP_SYS_IRQWAKEEN0 / DSP_SYS_IRQWAKEEN1 masking bits must be appropriately set for\par
any valid interrupt mapped from device IRQ_CROSSBAR to the DSP subsystem boundary, to enable its path (passing through the DSP_SYSTEM wakeup logic) to the DSP local interrupt controller - DSP_INTC.\par
DSP_SYS_IRQWAKEEN0 / DSP_SYS_IRQWAKEEN1 \'b8\'b6\'bd\'ba\'c5\'b7 \'ba\'f1\'c6\'ae\'b4\'c2 \'c0\'e5\'c4\'a1 IRQ_CROSSBAR\'bf\'a1\'bc\'ad DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'b0\'e6\'b0\'e8\'b7\'ce \'b8\'c5\'c7\'ce \'b5\'c8 \'c0\'af\'c8\'bf\'c7\'d1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b0\'a1 DSP \'b7\'ce\'c4\'c3 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (DSP_INTC)\'b7\'ce \'c0\'fc\'b4\'de\'b5\'c7\'b5\'b5\'b7\'cf (DSP_SYSTEM \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'b3\'ed\'b8\'ae\'b8\'a6 \'c5\'eb\'b0\'fa) \'c0\'fb\'c0\'fd\'c8\'f7 \'bc\'b3\'c1\'a4\'b5\'c7\'be\'ee\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
CAUTION\par
In order for a given interrupt to be serviced by the DSP (even when the Idle Instruction is NOT being executed), the Interrupt must be enabled in the coresponding DSP_SYS_IRQWAKEEN0 or DSP_SYS_IRQWAKEEN1 register.\par
\'c1\'d6\'c0\'c7\par
\'c1\'d6\'be\'ee\'c1\'f8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b0\'a1 (Idle Instruction\'c0\'cc \'bd\'c7\'c7\'e0\'b5\'c7\'c1\'f6 \'be\'ca\'c0\'bb \'b6\'a7\'c1\'b6\'c2\'f7\'b5\'b5) DSP\'bf\'a1 \'c0\'c7\'c7\'d8 \'c3\'b3\'b8\'ae\'b5\'c7\'b1\'e2 \'c0\'a7\'c7\'d8\'bc\'ad\'b4\'c2 \'c7\'d8\'b4\'e7 DSP_SYS_IRQWAKEEN0 \'b6\'c7\'b4\'c2 DSP_SYS_IRQWAKEEN1 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1\'bc\'ad \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'c8\'b0\'bc\'ba\'c8\'ad\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.3.3.4.5 DSP Automatic Power Transition\par
5.3.3.4.5 DSP \'c0\'da\'b5\'bf \'c0\'fc\'b7\'c2 \'c0\'fc\'c8\'af\par
\par
This section provides register details for configuring the DSP1 subsystem in automatic power transition mode.\par
\'c0\'cc \'c0\'fd\'bf\'a1\'bc\'ad\'b4\'c2 \'c0\'da\'b5\'bf \'c0\'fc\'bf\'f8 \'c0\'fc\'c8\'af \'b8\'f0\'b5\'e5\'bf\'a1\'bc\'ad DSP1 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'bb \'b1\'b8\'bc\'ba\'c7\'cf\'b1\'e2\'c0\'a7\'c7\'d1 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'bc\'bc\'ba\'ce \'bb\'e7\'c7\'d7\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The same should be considered for DSP2 in corresponding PRCM and DSP2 related registers.\par
\'b4\'eb\'c0\'c0\'c7\'cf\'b4\'c2 PRCM \'b9\'d7 DSP2 \'b0\'fc\'b7\'c3 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1\'bc\'ad DSP2\'bf\'a1 \'b4\'eb\'c7\'d8\'bc\'ad\'b5\'b5 \'b5\'bf\'c0\'cf\'c7\'cf\'b0\'d4 \'b0\'ed\'b7\'c1\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The DSP1 module is supposed to be configured to automatic management in PRCM.DSP1_CM_CORE_AON via setting the register CM_DSP1_DSP1_CLKCTRL[1:0] MODULEMODE bitfield to 0x1.\par
DSP1 \'b8\'f0\'b5\'e2\'c0\'ba \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd CM_DSP1_DSP1_CLKCTRL [1 : 0] MODULEMODE \'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5\'b8\'a6 0x1\'b7\'ce \'bc\'b3\'c1\'a4\'c7\'d4\'c0\'b8\'b7\'ce\'bd\'e1 PRCM.DSP1_CM_CORE_AON\'bf\'a1\'bc\'ad \'c0\'da\'b5\'bf \'b0\'fc\'b8\'ae\'b7\'ce \'b1\'b8\'bc\'ba\'b5\'c7\'be\'ee\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
 The DSP1 clock domain is supposed to be configured in automatic "HW_AUTO" transition\par
(setting bitfield CM_DSP1_CLKSTCTRL[1:0] CLKTRCTRL=0x3).\par
DSP1 \'c5\'ac\'b7\'b0 \'b5\'b5\'b8\'de\'c0\'ce\'c0\'ba \'c0\'da\'b5\'bf "HW_AUTO"\'c0\'fc\'c8\'af\'c0\'b8\'b7\'ce \'b1\'b8\'bc\'ba\'b5\'cb\'b4\'cf\'b4\'d9 (\'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5 CM_DSP1_CLKSTCTRL [1 : 0] \'bc\'b3\'c1\'a4 CLKTRCTRL = 0x3).\par
\par
The power state (controls are in the PRCM.DSP1_PRM instance) to reach upon a sleep transition is configured in the PM_DSP1_PWRSTCTRL[1:0]POWERSTATE bitfield.\par
\par
PM_DSP1_PWRSTCTRL [1 : 0] POWERSTATE \'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5\'bf\'a1\'bc\'ad \'c0\'fd\'c0\'fc \'c0\'fc\'c8\'af\'bd\'c3 \'b5\'b5\'b4\'de \'c7\'d2 \'c0\'fc\'bf\'f8 \'bb\'f3\'c5\'c2 (PRCM.DSP1_PRM \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba\'bf\'a1\'c0\'d6\'b4\'c2 \'c4\'c1\'c6\'ae\'b7\'d1)\'b0\'a1 \'b1\'b8\'bc\'ba\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Figure 5-4. Extended Duration Sleep Software and Hardware Sequence\par
\'b1\'d7\'b8\'b2 5-4. \'c8\'ae\'c0\'e5 \'bd\'c3\'b0\'a3 \'c0\'fd\'c0\'fc \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'bf\'cd \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee \'bd\'c3\'c4\'f6\'bd\'ba\par
\par
5.3.4 DSP Interrupt Requests\par
5.3.4 DSP \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bf\'e4\'c3\'bb\par
\par
The DSP subsystem relies on the DSP C66x CorePac local interrupt controller - DSP_INTC for mapping the various input interrupts to the C66x CPU, that are :\par
DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'ba \'b4\'d9\'be\'e7\'c7\'d1 \'c0\'d4\'b7\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 C66x CPU\'bf\'a1 \'b8\'c5\'c7\'ce\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSP C66x CorePac \'b7\'ce\'c4\'c3 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af -DSP_INTC\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  generated outside the DSP, by the device intergated modules and subsystems\par
\bullet  \'c0\'e5\'c4\'a1 \'bf\'dc\'ba\'ce \'b8\'f0\'b5\'e2 \'b9\'d7 \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'bf\'a1 \'c0\'c7\'c7\'d8 DSP \'bf\'dc\'ba\'ce\'bf\'a1\'bc\'ad \'bb\'fd\'bc\'ba\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
\bullet  generated within the DSP subsystems but outside the DSP C66x CorePac\par
\bullet  DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'bf\'a1\'bc\'ad \'bb\'fd\'bc\'ba\'b5\'c7\'be\'fa\'c1\'f6\'b8\'b8 DSP C66x CorePac \'bf\'dc\'ba\'ce\'bf\'a1\'bc\'ad \'bb\'fd\'bc\'ba\'b5\'ca\par
\par
\bullet  generated by different components within the DSP C66x CorePac\par
DSP C66x CorePac \'b3\'bb\'c0\'c7 \'b4\'d9\'b8\'a5 \'b1\'b8\'bc\'ba \'bf\'e4\'bc\'d2\'bf\'a1 \'c0\'c7\'c7\'d8 \'bb\'fd\'bc\'ba\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
In addition, a non-maskable input interrupt, direct mapped on a C66x processor NMI input is implemented.\par
\'b6\'c7\'c7\'d1 C66x \'c7\'c1\'b7\'ce\'bc\'bc\'bc\'ad\'c0\'c7 NMI \'c0\'d4\'b7\'c2\'bf\'a1 \'c1\'f7\'c1\'a2 \'b8\'c5\'c7\'ce \'b5\'c8 non-maskab \'c0\'d4\'b7\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b0\'a1 \'b1\'b8\'c7\'f6\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
It is mapped via a register that resides within the device Control Module.\par
\'c0\'e5\'c4\'a1 \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2 \'b3\'bb\'bf\'a1 \'bb\'f3\'c1\'d6\'c7\'cf\'b4\'c2 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b8\'a6 \'c5\'eb\'c7\'d8 \'b8\'c5\'c7\'ce\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Both the maskable interrupts and the non-maskable interrupts are synchronized internally.\par
\'b8\'b6\'bd\'ba\'c5\'a9 \'b0\'a1\'b4\'c9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'bf\'cd \'b8\'b6\'bd\'ba\'c5\'a9 \'ba\'d2\'b0\'a1\'b4\'c9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b4\'c2 \'b3\'bb\'ba\'ce\'c0\'fb\'c0\'b8\'b7\'ce \'b5\'bf\'b1\'e2\'c8\'ad\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Part of the DSP subsystem module generated interrupts which are output as follows:\par
DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'b8\'f0\'b5\'e2\'c0\'c7 \'c0\'cf\'ba\'ce\'b0\'a1 \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'c0\'cc \'c3\'e2\'b7\'c2\'b5\'c7\'b4\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'df\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  DSP_EDMA interrupts\par
\bullet  DSP_EDMA \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\par
\par
\bullet  DSP_MMU0 and DSP_MMU1 interrupts\par
\bullet  DSP_MMU0 \'b9\'d7 DSP_MMU1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\par
\par
\bullet  Error interrupts\par
\bullet  \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bf\'c0\'b7\'f9\par
\par
Figure 5-5 shows how are the interrupt sources organized.\par
\'b1\'d7\'b8\'b2 5-5\'b4\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bc\'d2\'bd\'ba\'b8\'a6 \'be\'ee\'b6\'bb\'b0\'d4 \'b1\'b8\'bc\'ba\'c7\'cf\'b4\'c2\'c1\'f6 \'ba\'b8\'bf\'a9\'c1\'dd\'b4\'cf\'b4\'d9.\par
\par
 To manage and expand the interrupt\par
capabilities of the DSP C66x CorePac (internal and external interrupt requests), the DSP subsystem includes two levels of interrupt control :\par
DSP C66x CorePac (\'b3\'bb\'ba\'ce \'b9\'d7 \'bf\'dc\'ba\'ce \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bf\'e4\'c3\'bb)\'c0\'c7 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'b1\'e2\'b4\'c9\'c0\'bb \'b0\'fc\'b8\'ae \'b9\'d7 \'c8\'ae\'c0\'e5\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'bf\'a1\'b4\'c2 \'b5\'ce \'b0\'a1\'c1\'f6 \'bc\'f6\'c1\'d8\'c0\'c7 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c1\'a6\'be\'ee\'b0\'a1 \'c6\'f7\'c7\'d4\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
\bullet  The DSP C66x CorePac local Interrupt controller - DSP_INTC\par
\bullet  DSP C66x CorePac \'b7\'ce\'c4\'c3 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af - DSP_INTC\par
\par
\bullet  The System control logic - DSP_SYSTEM\par
\bullet  \'bd\'c3\'bd\'ba\'c5\'db \'c1\'a6\'be\'ee \'b7\'ce\'c1\'f7 - DSP_SYSTEM\par
\par
5.3.4.1 DSP Input Interrupts\par
5.3.4.1 DSP \'c0\'d4\'b7\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\par
\par
In summary, the DSP_INTC accepts up to 124 event inputs, and flexibly maps those down to 12 interrupt inputs to the DSP.\par
\'bf\'e4\'be\'e0\'c7\'cf\'b8\'e9, DSP_INTC\'b4\'c2 \'c3\'d6\'b4\'eb 124 \'b0\'b3\'c0\'c7 \'c0\'cc\'ba\'a5\'c6\'ae \'c0\'d4\'b7\'c2\'c0\'bb \'b9\'de\'be\'c6\'b5\'e9\'c0\'cc\'b0\'ed 12 \'b0\'b3\'c0\'c7 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c0\'d4\'b7\'c2\'c0\'bb DSP\'bf\'a1 \'c0\'af\'bf\'ac\'c7\'cf\'b0\'d4 \'b8\'c5\'c7\'ce\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The mapping can be 1:1 (input:output), or can use the event combiner to map multiple interrupts (within a 32-bit group) to one of the DSP interrupt inputs.\par
\'b8\'c5\'c7\'ce\'c0\'ba 1 : 1 (\'c0\'d4\'b7\'c2 : \'c3\'e2\'b7\'c2) \'c0\'cf \'bc\'f6 \'c0\'d6\'c0\'b8\'b8\'e7 \'c0\'cc\'ba\'a5\'c6\'ae \'b0\'e1\'c7\'d5\'b1\'e2\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 \'b4\'d9\'c1\'df \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae (32 \'ba\'f1\'c6\'ae \'b1\'d7\'b7\'ec \'b3\'bb)\'b8\'a6 DSP \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c0\'d4\'b7\'c2 \'c1\'df \'c7\'cf\'b3\'aa\'bf\'a1 \'b8\'c5\'c7\'ce \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
In general, many of the 124 interrupt controller inputs are collected within the DSP C66x CorePac, and are NOT available at the DSP C66x CorePac boundaries.\par
\'c0\'cf\'b9\'dd\'c0\'fb\'c0\'b8\'b7\'ce 124 \'b0\'b3\'c0\'c7 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'c0\'d4\'b7\'c2\'c0\'ba DSP C66x CorePac\'bf\'a1 \'bc\'f6\'c1\'fd\'b5\'c7\'b8\'e7 DSP C66x CorePac \'b0\'e6\'b0\'e8\'bf\'a1\'bc\'ad\'b4\'c2 \'bb\'e7\'bf\'eb\'c7\'d2 \'bc\'f6 \'be\'f8\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The C66x CPU dropped event is exported outside the C66x CorePac in DSP subsystem, and can be\par
enabled to trigger the ERRINT_IRQ aggregated interrupt output.\par
C66x CPU \'b5\'e5\'b7\'d3 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 C66x CorePac \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'b8\'e7 ERRINT_IRQ \'c1\'fd\'b0\'e8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'e2\'b7\'c2\'c0\'bb \'c6\'ae\'b8\'ae\'b0\'c5 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
 See also corresponding "INTERR" event listed in the Table 5-5.\par
\'c7\'a5 5-5\'bf\'a1 \'b3\'aa\'bf\'ad\'b5\'c8 \'c7\'d8\'b4\'e7 "INTERR"\'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: The dropped CPU event is not exported outside DSP subsystem.\par
\'c2\'fc\'b0\'ed : \'b5\'e5\'b7\'d3 \'b5\'c8 CPU \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
However it is merged (ORed) along with other error event sources within the DSP subsystem to produce a single ERRINT_IRQ interrupt exported outside the DSP subsystem.\par
\'b1\'d7\'b7\'af\'b3\'aa DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'bf\'a1\'bc\'ad \'b4\'d9\'b8\'a5 ERRINT_IRQ \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'c0\'c7 \'b4\'d9\'b8\'a5 \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae \'bc\'d2\'bd\'ba\'bf\'cd \'c7\'d4\'b2\'b2 \'ba\'b4\'c7\'d5 (ORed)\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
For more details on ERRINT_IRQ generation and asscoiated event registers at DSP_SYSTEM level, refer to the Section 5.3.4.2.2..\par
ERRINT_IRQ \'bb\'fd\'bc\'ba \'b9\'d7 DSP_SYSTEM \'b7\'b9\'ba\'a7\'c0\'c7 asscoiated \'c0\'cc\'ba\'a5\'c6\'ae \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.4.2.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
Part of the input interrupts, generated by DSP peripherals that are located outside the DSP C66x CorePac - DSP_EDMA (DSP_EDMA_CC, DSP_EDMA_TC0, DSP_EDMA_TC1) , DSP_MMU0, DSP_MMU1 and DSP_NoC, are also mapped to outputs at the DSP subsystem boundary, such that they can be exported to system hosts (MPU, etc.) via the device IRQ_CROSSBAR.\par
DSP \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'c0\'c7 \'c0\'cf\'ba\'ce\'b4\'c2 DSP C66x CorePac-DSP_EDMA (DSP_EDMA_CC, DSP_EDMA_TC0, DSP_EDMA_TC1), DSP_MMU0, DSP_MMU1 \'b9\'d7 DSP_NoC \'bf\'dc\'ba\'ce\'bf\'a1\'c0\'d6\'b4\'c2 DSP \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1\'bf\'a1 \'c0\'c7\'c7\'d8 \'bb\'fd\'bc\'ba\'b5\'c7\'b8\'e7 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b0\'e6\'b0\'e8\'c0\'c7 \'c3\'e2\'b7\'c2\'bf\'a1\'b5\'b5 \'b8\'c5\'c7\'ce\'b5\'cb\'b4\'cf\'b4\'d9. IRQ_CROSSBAR \'c0\'e5\'c4\'a1\'b8\'a6 \'c5\'eb\'c7\'d8 \'bd\'c3\'bd\'ba\'c5\'db \'c8\'a3\'bd\'ba\'c6\'ae (MPU \'b5\'ee)\'b7\'ce \'b3\'bb \'ba\'b8\'b3\'c0\'b4\'cf\'b4\'d9.\par
\par
Of particular interest, MMUs (DSP_MMU0 and DSP_MMU1) interrupts will typically be serviced by the device MPU instead of by the local DSP core.\par
\'c6\'af\'c8\'f7 MMU (DSP_MMU0 \'b9\'d7 DSP_MMU1) \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b4\'c2 \'b7\'ce\'c4\'c3 DSP \'c4\'da\'be\'ee \'b4\'eb\'bd\'c5 \'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba MPU\'bf\'a1 \'c0\'c7\'c7\'d8 \'c3\'b3\'b8\'ae\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Any interrupt input at DSP subsystem boundaries (i.e. excluding the DSP subsystem internal IRQ sources that reside in and outside the DSP C66x CorePac) can be used to wake-up the DSP subsystem from an IDLE state.\par
DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b0\'e6\'b0\'e8\'bf\'a1\'bc\'ad \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c0\'d4\'b7\'c2 (\'c1\'ef, DSP C66x CorePac \'b3\'bb\'ba\'ce \'b9\'d7 \'bf\'dc\'ba\'ce\'bf\'a1\'c0\'d6\'b4\'c2 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'ba\'ce IRQ \'bc\'d2\'bd\'ba \'c1\'a6\'bf\'dc)\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'cf\'bf\'a9 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'bb \'c0\'af\'c8\'de IDLE\'bf\'a1\'bc\'ad \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7\'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'d9.\par
\par
This is described in the Section 5.3.3.4.3 and is controlled by the DSP_SYSTEM logic register\par
DSP_SYS_SYSCONFIG [3:2] IDLEMODE bitfield along with the DSP_SYS_IRQWAKEEN0 / DSP_SYS_IRQWAKEEN1 registers.\par
\'c0\'cc\'b0\'cd\'c0\'ba 5.3.3.4.3 \'c0\'fd\'bf\'a1 \'bc\'b3\'b8\'ed\'b5\'c7\'be\'ee \'c0\'d6\'c0\'b8\'b8\'e7 DSP_SYSTEM \'b3\'ed\'b8\'ae \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'c0\'c7\'c7\'d8 \'c1\'a6\'be\'ee\'b5\'cb\'b4\'cf\'b4\'d9\par
DSP_SYS_SYSCONFIG [3 : 2] IDLEMODE \'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5\'b4\'c2 DSP_SYS_IRQWAKEEN0 / DSP_SYS_IRQWAKEEN1 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'cd \'c7\'d4\'b2\'b2 \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
CAUTION\par
The DSP_SYS_IRQWAKEEN0 / DSP_SYS_IRQWAKEEN1 bits MUST be enabled for externally mapped interrupts (DSP_INTC[95:32]) to be serviced by the DSP regardless of the DSP power state (IDLE or non-IDLE).\par
\'c1\'d6\'c0\'c7\par
DSP \'c0\'fc\'b7\'c2 \'bb\'f3\'c5\'c2 (IDLE \'b6\'c7\'b4\'c2 NON-IDLE \'bc\'d3)\'bf\'a1 \'b0\'fc\'b0\'e8\'be\'f8\'c0\'cc DSP\'b0\'a1 \'bc\'ad\'ba\'f1\'bd\'ba \'c7\'d2 \'bc\'f6 \'c0\'d6\'b5\'b5\'b7\'cf \'bf\'dc\'ba\'ce \'c0\'fb\'c0\'b8\'b7\'ce \'b8\'c5\'c7\'ce \'b5\'c8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae (DSP_INTC [95:32])\'b8\'a6 \'c0\'a7\'c7\'d8 DSP_SYS_IRQWAKEEN0 / DSP_SYS_IRQWAKEEN1 \'ba\'f1\'c6\'ae\'b8\'a6 \'c8\'b0\'bc\'ba\'c8\'ad\'c7\'d8\'be\'df\'c7\'d1\'b4\'d9.\par
\par
The DSP C66x CorePac DSP_INTC registers are NOT readable by any entity other than the C66x CPU,  because they are part of the DSP_ICFG C66x CorePac internal configuration space (see also the Section 5.3.10).\par
DSP C66x CorePac DSP_INTC \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 DSP_ICFG C66x CorePac \'b3\'bb\'ba\'ce \'b1\'b8\'bc\'ba \'b0\'f8\'b0\'a3 (5.3.10 \'c0\'fd \'c2\'fc\'c1\'b6)\'c0\'c7 \'c0\'cf\'ba\'ce\'c0\'cc\'b1\'e2 \'b6\'a7\'b9\'ae\'bf\'a1 C66x CPU \'c0\'cc\'bf\'dc\'c0\'c7 \'bf\'a3\'c6\'bc\'c6\'bc\'bf\'a1\'bc\'ad \'c0\'d0\'c0\'bb \'bc\'f6 \'be\'f8\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
Hereby, only the C66x itself is able to service these interrupt events.\par
\'b5\'fb\'b6\'f3\'bc\'ad C66x\'b8\'b8\'c0\'cc \'c0\'cc\'b7\'af\'c7\'d1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c3\'b3\'b8\'ae \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9\par
\par
The only way for these interrupts to be cleared is for the DSP CPU to clear the state in the EVTFLAGi (where i=0 to 3) register, or via reset assertion.\par
\'c0\'cc\'b7\'af\'c7\'d1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'c1\'f6\'bf\'ef \'bc\'f6\'c0\'d6\'b4\'c2 \'c0\'af\'c0\'cf\'c7\'d1 \'b9\'e6\'b9\'fd\'c0\'ba DSP CPU\'b0\'a1 EVTFLAGi (i = 0\'bf\'a1\'bc\'ad 3\'b1\'ee\'c1\'f6) \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'b6\'c7\'b4\'c2 \'b8\'ae\'bc\'c2 \'be\'ee\'bc\'b3 \'bc\'c7(\'c1\'d6\'c0\'e5)\'c0\'bb \'c5\'eb\'c7\'d8 \'bb\'f3\'c5\'c2\'b8\'a6 \'c1\'f6\'bf\'ec\'b4\'c2 \'b0\'cd\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
NOTE: For cases where the DSP maps an interrupt directly, the DSP is not strictly required to clear\par
the EVTFLAGi register.\par
\'c2\'fc\'b0\'ed : DSP\'b0\'a1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'c1\'f7\'c1\'a2 \'b8\'c5\'c7\'ce\'c7\'cf\'b4\'c2 \'b0\'e6\'bf\'ec DSP\'b4\'c2 EVTFLAGi \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b8\'a6 \'c1\'f6\'bf\'ec\'b5\'b5\'b7\'cf \'be\'f6\'b0\'dd\'c7\'cf\'b0\'d4 \'bf\'e4\'b1\'b8\'b5\'c7\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
User software must take the extra step of clearing the EVTFLAGi to cause the corresponding output interrupt to be cleared and re-asserted upon a new input event assertion.\par
\'bb\'e7\'bf\'eb\'c0\'da \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b4\'c2 EVTFLAGi\'b8\'a6 \'c1\'f6\'bf\'ec\'b4\'c2 \'c3\'df\'b0\'a1 \'b4\'dc\'b0\'e8\'b8\'a6 \'b0\'c5\'c3\'c4\'be\'df \'c7\'d8\'b4\'e7 \'c3\'e2\'b7\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'c1\'f6\'bf\'ec\'b0\'ed \'bb\'f5\'b7\'ce\'bf\'ee \'c0\'d4\'b7\'c2 \'c0\'cc\'ba\'a5\'c6\'ae \'be\'ee\'bc\'ad\'bc\'c7\'bd\'c3(\'c1\'d6\'c0\'e5) \'b4\'d9\'bd\'c3 \'be\'ee\'bc\'ad \'c6\'ae\'c7\'d8\'be\'df\'c7\'d1\'b4\'d9.\par
\par
5.3.4.1.1 DSP Non-maskable Interrupt Input\par
5.3.4.1.1 DSP \'ba\'f1 \'b8\'b6\'bd\'ba\'c5\'a9 \'b0\'a1\'b4\'c9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c0\'d4\'b7\'c2\par
\par
The device DSP also supports a non-maskable interrupt (NMI) directly mapped to the NMI input of the\par
C66x CPU.\par
\'b6\'c7\'c7\'d1 \'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba DSP\'b4\'c2 C66x CPU\'c0\'c7 NMI \'c0\'d4\'b7\'c2\'bf\'a1 \'c1\'f7\'c1\'a2 \'b8\'c5\'c7\'ce\'b5\'c7\'b4\'c2 NMI (Non-Maskable Interrupt)\'b8\'a6 \'c1\'f6\'bf\'f8\'c7\'d1\'b4\'d9.\par
\par
This line is also mapped to the NMEVT input of the DSP local INTC, and can be used as an exception signal, too.\par
\'b6\'c7\'c7\'d1\'c0\'cc \'b6\'f3\'c0\'ce\'c0\'ba DSP \'b7\'ce\'c4\'c3 INTC\'c0\'c7 NMEVT \'c0\'d4\'b7\'c2\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'c7\'b8\'e7 \'bf\'b9\'bf\'dc \'bd\'c5\'c8\'a3\'b7\'ce\'b5\'b5 \'bb\'e7\'bf\'eb\'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
At system level, the NMI interrupt mapping to the DSP_INTC is controlled via the device core Control Module register as follows:\par
 \'bd\'c3\'bd\'ba\'c5\'db \'b7\'b9\'ba\'a7\'bf\'a1\'bc\'ad DSP_INTC\'bf\'a1 \'b4\'eb\'c7\'d1 NMI \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'b8\'c5\'c7\'ce\'c0\'ba \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'c0\'cc \'c0\'e5\'c4\'a1 \'c4\'da\'be\'ee \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b8\'a6 \'c5\'eb\'c7\'d8 \'c1\'a6\'be\'ee\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
\bullet  CTRL_CORE_NMI_DESTINATION_2 [15:8] DSP1 = 0x1 enables the DSP1 to receive the NMI coming from the device nmin_dsp input.\par
\bullet  CTRL_CORE_NMI_DESTINATION_2 [15 : 8] DSP1 = 0x1\'c0\'ba DSP1\'c0\'cc \'c0\'e5\'c4\'a1 nmin_dsp \'c0\'d4\'b7\'c2\'bf\'a1\'bc\'ad \'bf\'c0\'b4\'c2 NMI\'b8\'a6 \'bc\'f6\'bd\'c5 \'c7\'d2 \'bc\'f6\'c0\'d6\'b0\'d4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  CTRL_CORE_NMI_DESTINATION_2 [23:26] DSP2 = 0x1 enables the DSP2 to receive the NMI coming from the device nmin_dsp input.\par
\bullet  CTRL_CORE_NMI_DESTINATION_2 [23:26] DSP2 = 0x1\'c0\'ba DSP2\'b0\'a1 \'c0\'e5\'c4\'a1 nmin_dsp \'c0\'d4\'b7\'c2\'bf\'a1\'bc\'ad \'bf\'c0\'b4\'c2 NMI\'b8\'a6 \'bc\'f6\'bd\'c5 \'c7\'d2 \'bc\'f6\'c0\'d6\'b0\'d4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
For more details on the NMI receive enable bit mapping, refer to the Section 18.5, Control Module  Register Manual in the chapter, Control Module.\par
NMI \'bc\'f6\'bd\'c5 \'c7\'e3\'bf\'eb \'ba\'f1\'c6\'ae \'b8\'ca\'c7\'ce\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'bc\'bd\'bc\'c7 18.5, \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2 \'c0\'e5\'c0\'c7 \'bc\'bd\'bc\'c7 18.5, \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'b8\'c5\'b4\'ba\'be\'f3\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.4.2 DSP Event and Interrupt Generation Outputs\par
5.3.4.2 DSP \'c0\'cc\'ba\'a5\'c6\'ae \'b9\'d7 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bb\'fd\'bc\'ba \'c3\'e2\'b7\'c2\par
\par
5.3.4.2.1 DSP MDMA and DSP EDMA Mflag Event Outputs\par
5.3.4.2.1 DSP MDMA\'bf\'cd DSP EDMA Mflag \'bb\'e7\'b0\'c7 \'bb\'ea\'c3\'e2\par
\par
The Mflag events generated by DSP subsystem EVTOUT bus are represented in the Figure 5-5.\par
DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db EVTOUT \'b9\'f6\'bd\'ba\'bf\'a1 \'c0\'c7\'c7\'d8 \'bb\'fd\'bc\'ba \'b5\'c8 Mflag \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 \'b1\'d7\'b8\'b2 5-5\'bf\'a1 \'b3\'aa\'bf\'cd \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
A couple of the DSP EVTOUT bus outputs - EVTOUT[31] and EVTOUT[30] are used for generation of\par
MFLAGs dedicated to the DSP MDMA and EDMA ports, respectively.\par
\'b5\'ce \'b0\'b3\'c0\'c7 DSP EVTOUT \'b9\'f6\'bd\'ba \'c3\'e2\'b7\'c2 - EVTOUT [31] \'b9\'d7 EVTOUT [30]\'c0\'ba \'b0\'a2\'b0\'a2 DSP MDMA \'b9\'d7 EDMA \'c6\'f7\'c6\'ae \'c0\'fc\'bf\'eb MFLAG \'bb\'fd\'bc\'ba\'bf\'a1 \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
DSP MFLAGs are connected directly to DMM and EMIF.\par
DSP MFLAG\'b4\'c2 DMM \'b9\'d7 EMIF\'bf\'a1 \'c1\'f7\'c1\'a2 \'bf\'ac\'b0\'e1\'b5\'cb\'b4\'cf\'b4\'d9\par
\par
The DSP MFLAGs participate in the DMM Emergency and EMIF MFLAG prioritization schemes.\par
DSP MFLAG\'b4\'c2 DMM Emergency \'b9\'d7 EMIF MFLAG \'bf\'ec\'bc\'b1 \'bc\'f8\'c0\'a7 \'c1\'f6\'c1\'a4 \'c3\'bc\'b0\'e8\'bf\'a1 \'c2\'fc\'bf\'a9\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
At the L3 Level Bandwidth regulators connected to the DSP MDMA and EDMA ports can be used to control DSP traffic versus other device traffic.\par
DSP MDMA \'b9\'d7 EDMA \'c6\'f7\'c6\'ae\'bf\'a1 \'bf\'ac\'b0\'e1\'b5\'c8 L3 \'b7\'b9\'ba\'a7 \'b4\'eb\'bf\'aa\'c6\'f8 \'b7\'b9\'b1\'d6\'b7\'b9\'c0\'cc\'c5\'cd\'b4\'c2 DSP \'c6\'ae\'b7\'a1\'c7\'c8 \'b4\'eb \'b4\'d9\'b8\'a5 \'c0\'e5\'c4\'a1 \'c6\'ae\'b7\'a1\'c7\'c8\'c0\'bb \'c1\'a6\'be\'ee\'c7\'cf\'b4\'c2 \u8203?\u8203?\'b5\'a5 \'bb\'e7\'bf\'eb\'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The device DSP subsystem is able to generate the 2 output Mflag events via the following DSP_SYSTEM\par
module located registers :\par
\'c0\'e5\'c4\'a1 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'ba \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'c0\'a7\'c4\'a1\'c7\'d1 \'b4\'d9\'c0\'bd DSP_SYSTEM \'b8\'f0\'b5\'e2\'c0\'bb \'c5\'eb\'c7\'d8 2 \'b0\'b3\'c0\'c7 \'c3\'e2\'b7\'c2 Mflag \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  DSP_SYS_EVTOUT_SET[31:30]\par
\par
\bullet  DSP_SYS_EVTOUT_CLR[31:30]\par
\par
The current state of the outputs can be detected by reading any of these "pseudo" register bits.\par
\'c3\'e2\'b7\'c2\'c0\'c7 \'c7\'f6\'c0\'e7 \'bb\'f3\'c5\'c2\'b4\'c2 \'c0\'cc\'b7\'af\'c7\'d1 "pseudo(\'c0\'c7\'bb\'e7)"\'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'ba\'f1\'c6\'ae \'c1\'df \'c7\'cf\'b3\'aa\'b8\'a6 \'c0\'d0\'c0\'bd\'c0\'b8\'b7\'ce\'bd\'e1 \'b0\'a8\'c1\'f6 \'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
NOTE: Only EVTOUT[31:30] outputs are implemented in the device, hence only bits [31:30] of the\par
mentioned DSP_SYS_EVTOUT_x registers are used.\par
\'c2\'fc\'b0\'ed : EVTOUT [31:30] \'c3\'e2\'b7\'c2 \'b8\'b8 \'c0\'e5\'c4\'a1\'bf\'a1 \'b1\'b8\'c7\'f6\'b5\'c7\'b9\'c7\'b7\'ce \'be\'f0\'b1\'de \'b5\'c8 DSP_SYS_EVTOUT_x \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'ba\'f1\'c6\'ae [31:30] \'b8\'b8 \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The DSP_SYS_EVTOUT_SET register unconditionally drives the corresponding output event to '1'.\par
DSP_SYS_EVTOUT_SET \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 \'b9\'ab\'c1\'b6\'b0\'c7 \'c7\'d8\'b4\'e7 \'c3\'e2\'b7\'c2 \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 '1'\'b7\'ce \'b1\'b8\'b5\'bf\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The DSP_SYS_EVTOUT_CLR register unconditionally drives the corresponding output event to a '0'.\par
DSP_SYS_EVTOUT_CLR \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 \'b9\'ab\'c1\'b6\'b0\'c7 \'c7\'d8\'b4\'e7 \'c3\'e2\'b7\'c2 \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 '0'\'c0\'b8\'b7\'ce \'b1\'b8\'b5\'bf\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.3.4.2.2 DSP Aggregated Error Interrupt Output\par
5.3.4.2.2 DSP \'c1\'fd\'b0\'e8 \'b5\'c8 \'bf\'c0\'b7\'f9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'e2\'b7\'c2\par
\par
The aggregated error interrupt of the DSP subsystem is shown in the Figure 5-5.\par
DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'c1\'fd\'b0\'e8 \'b5\'c8 \'bf\'a1\'b7\'af \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b0\'a1 \'b1\'d7\'b8\'b2 5-5\'bf\'a1 \'b3\'aa\'c5\'b8\'b3\'aa\'c0\'d6\'b4\'d9.\par
\par
The subset of those events that correspond to: DSP C66x CorePac generated error events, DSP_EDMA error interrupts and L2 DSP_NoC interconnect error interrupt, is reduced by an ORschematic to a single ERRINT_IRQ output interrupt which is made available on DSP subsystem boundary.\par
DSP CARD CorePac \'bb\'fd\'bc\'ba \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae, DSP_EDMA \'bf\'c0\'b7\'f9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'b9\'d7 L2 DSP_NoC \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 \'bf\'c0\'b7\'f9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b4\'c2 ORschematic\'bf\'a1 \'c0\'c7\'c7\'d8 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'b0\'e6\'b0\'e8\'bf\'a1\'bc\'ad \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9\'c7\'d1 \'b4\'dc\'c0\'cf ERRINT_IRQ \'c3\'e2\'b7\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b7\'ce \'b0\'a8\'bc\'d2\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
It is expected that one of the DSP system hosts monitors the interrupts/error conditions in safety\par
conscious systems.\par
DSP \'bd\'c3\'bd\'ba\'c5\'db \'c8\'a3\'bd\'ba\'c6\'ae \'c1\'df \'c7\'cf\'b3\'aa\'b0\'a1 \'be\'c8\'c0\'fc \'c0\'c7\'bd\'c4\'c0\'cc\'c0\'d6\'b4\'c2 \'bd\'c3\'bd\'ba\'c5\'db\'bf\'a1\'bc\'ad \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae / \'bf\'c0\'b7\'f9 \'bb\'f3\'c5\'c2\'b8\'a6 \'b8\'f0\'b4\'cf\'c5\'cd \'c7\'d2 \'b0\'cd\'c0\'b8\'b7\'ce \'bf\'b9\'bb\'f3\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Figure 5-6 shows a functional representation of the DSP error interrupt "OR"-reduction logic.\par
\'b1\'d7\'b8\'b2 5-6\'c0\'ba DSP \'bf\'c0\'b7\'f9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae "OR"- \'b0\'a8\'bc\'e2 \'b7\'ce\'c1\'f7\'c0\'c7 \'b1\'e2\'b4\'c9\'c0\'fb \'c7\'a5\'c7\'f6\'c0\'bb \'ba\'b8\'bf\'a9\'c1\'dd\'b4\'cf\'b4\'d9.\par
\par
In summary, there exists an unmasked status (DSP_SYS_ERRINT_IRQSTATUS_RAW) register, two complementary\par
enable bit-vector registers (DSP_SYS_ERRINT_IRQENABLE_SET / DSP_SYS_ERRINT_IRQENABLE_CLR), and a masked status register (DSP_SYS_ERRINT_IRQSTATUS).\par
\'bf\'e4\'be\'e0\'c7\'cf\'b8\'e9, \'b8\'b6\'bd\'ba\'c5\'a9\'b5\'c7\'c1\'f6 \'be\'ca\'c0\'ba \'bb\'f3\'c5\'c2 (DSP_SYS_ERRINT_IRQSTATUS_RAW) \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd 2 \'b0\'b3\'c0\'c7 \'bb\'f3\'c8\'a3\'ba\'b8\'bf\'cf\'c0\'fb \'c0\'ce \'bf\'a1\'c0\'cc\'ba\'ed \'ba\'f1\'c6\'ae \'ba\'a4\'c5\'cd \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd (DSP_SYS_ERRINT_IRQENABLE_SET / DSP_SYS_ERRINT_IRQENABLE_CLR) \'b9\'d7 \'b8\'b6\'bd\'ba\'c5\'a9 \'b5\'c8 \'bb\'f3\'c5\'c2 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd (DSP_SYS_ERRINT_IRQSTATUS)\'b0\'a1 \'c1\'b8\'c0\'e7\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The ERRINT event is asserted when any enabled error interrupt input is asserted.\par
ERRINT \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9\'c7\'d1 \'bf\'c0\'b7\'f9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c0\'d4\'b7\'c2\'c0\'cc \'be\'ee\'bc\'b3 \'bc\'c7 \'b5\'c9 \'b6\'a7 \'be\'ee\'bc\'b3\'c6\'ae\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
NOTE: The ERRINT_IRQ output can be programmatically mapped as the DSPi_IRQ_TPCC_ERR (where i=1 to 2) interrupt to all device (dsp hosts) interrupt controllers via the device IRQ_CROSSBAR.\par
\'c2\'fc\'b0\'ed : ERRINT_IRQ \'c3\'e2\'b7\'c2\'c0\'ba \'c0\'e5\'c4\'a1 IRQ_CROSSBAR\'c0\'bb \'c5\'eb\'c7\'d8 \'b8\'f0\'b5\'e7 \'c0\'e5\'c4\'a1 (dsp \'c8\'a3\'bd\'ba\'c6\'ae) \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'bf\'a1 \'b4\'eb\'c7\'d1 DSPi_IRQ_TPCC_ERR (i = 1 ~ 2) \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b7\'ce \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a1\'b9\'d6 \'b9\'e6\'bd\'c4\'c0\'b8\'b7\'ce \'b8\'c5\'c7\'ce \'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
For more information on the IRQ_CROSSBAR module, see Section 18.4.6.4, IRQ_CROSSBAR Module Functional Description, in Chapter 18, Control Module.\par
IRQ_CROSSBAR \'b8\'f0\'b5\'e2\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 18 \'c0\'e5, \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2\'c0\'c7 18.4.6.4 \'c0\'fd, IRQ_CROSSBAR \'b8\'f0\'b5\'e2 \'b1\'e2\'b4\'c9 \'bc\'b3\'b8\'ed\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
For more information about the device interrupt controllers, see Chapter 17, Interrupt\par
Controllers.\par
\'c0\'e5\'c4\'a1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 17 \'c0\'e5, \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
The Table 5-6 details the mapping of error event output sources to the bit positions within the following\par
DSP error event related registers :\par
\'c7\'a5 5-5\'b4\'c2 \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae \'c3\'e2\'b7\'c2 \'bc\'d2\'bd\'ba\'b8\'a6 \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'c0\'ba \'ba\'f1\'c6\'ae \'c0\'a7\'c4\'a1\'bf\'a1 \'b8\'c5\'c7\'ce\'c7\'cf\'b4\'c2 \'b9\'e6\'b9\'fd\'c0\'bb \'c0\'da\'bc\'bc\'c8\'f7 \'bc\'b3\'b8\'ed\'c7\'d5\'b4\'cf\'b4\'d9\par
DSP \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae \'b0\'fc\'b7\'c3 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd :\par
\par
\bullet  DSP_SYS_ERRINT_IRQSTATUS_RAW\par
\par
\bullet  DSP_SYS_ERRINT_IRQSTATUS\par
\par
\bullet  DSP_SYS_ERRINT_IRQENABLE_SET\par
\par
\bullet  DSP_SYS_ERRINT_IRQENABLE_CLR\par
\par
Following functional descriptions are valid for the above registers :\par
\'b4\'d9\'c0\'bd \'c7\'d4\'bc\'f6 \'bc\'b3\'b8\'ed\'c0\'ba \'c0\'a7\'c0\'c7 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'c0\'af\'c8\'bf\'c7\'d5\'b4\'cf\'b4\'d9\par
\par
\bullet  IRQ status raw register - This register provides a per-event raw interrupt status vector.\par
\bullet  IRQ \'bb\'f3\'c5\'c2 \'bf\'f8\'bd\'c3 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd -\'c0\'cc \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 \'c0\'cc\'ba\'a5\'c6\'ae \'ba\'b0 \'bf\'f8\'bd\'c3 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bb\'f3\'c5\'c2 \'ba\'a4\'c5\'cd\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The Raw status is set even if the corresponding event is not enabled.\par
\'bf\'f8\'bd\'c3 \'bb\'f3\'c5\'c2\'b4\'c2 \'c7\'d8\'b4\'e7 \'c0\'cc\'ba\'a5\'c6\'ae\'b0\'a1 \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9\'c7\'cf\'c1\'f6 \'be\'ca\'c0\'ba \'b0\'e6\'bf\'ec\'bf\'a1\'b5\'b5 \'bc\'b3\'c1\'a4\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
 Software can write '1' to set the (raw) status for debug purposes.\par
\'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b4\'c2 \'b5\'f0\'b9\'f6\'b1\'d7 \'b8\'f1\'c0\'fb\'c0\'bb \'c0\'a7\'c7\'d8 (\'bf\'f8\'bd\'c3) \'bb\'f3\'c5\'c2\'b8\'a6 \'bc\'b3\'c1\'a4\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 '1'\'c0\'bb \'be\'b5 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  IRQ status register - This register provides a per-event enabled interrupt status vector.\par
\bullet  IRQ \'bb\'f3\'c5\'c2 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd -\'c0\'cc \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 \'c0\'cc\'ba\'a5\'c6\'ae \'ba\'b0 \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bb\'f3\'c5\'c2 \'ba\'a4\'c5\'cd\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The Enabled status is set if the corresponding event is enabled and the raw status is set.\par
\'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9 \'bb\'f3\'c5\'c2\'b4\'c2 \'c7\'d8\'b4\'e7 \'c0\'cc\'ba\'a5\'c6\'ae\'b0\'a1 \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9\'c7\'cf\'b0\'ed \'bf\'f8\'bd\'c3 \'bb\'f3\'c5\'c2\'b0\'a1 \'bc\'b3\'c1\'a4\'b5\'c8 \'b0\'e6\'bf\'ec \'bc\'b3\'c1\'a4\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Software can write 1 to clear the (raw) status after the interrupt has been serviced.\par
\'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b4\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b0\'a1 \'c3\'b3\'b8\'ae \'b5\'c8 \'c8\'c4 (\'bf\'f8\'bd\'c3) \'bb\'f3\'c5\'c2\'b8\'a6 \'c1\'f6\'bf\'ec\'b1\'e2 \'c0\'a7\'c7\'d8 1\'c0\'bb \'be\'b5 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The clear takes effect even if the interrupt is not enabled.\par
\'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b0\'a1 \'c8\'b0\'bc\'ba\'c8\'ad\'b5\'c7\'c1\'f6 \'be\'ca\'c0\'ba \'b0\'e6\'bf\'ec\'bf\'a1\'b5\'b5 \'c1\'f6\'bf\'ec\'b1\'e2\'b0\'a1 \'c0\'fb\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
\bullet  IRQ enable register - This register provides a per-event interrupt enable bit vector.\par
\bullet  IRQ \'c8\'b0\'bc\'ba\'c8\'ad \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd -\'c0\'cc \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 \'c0\'cc\'ba\'a5\'c6\'ae \'ba\'b0 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c8\'b0\'bc\'ba\'c8\'ad \'ba\'f1\'c6\'ae \'ba\'a4\'c5\'cd\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Software can write 1 to set (i.e., enable the corresponding interrupt).\par
\'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b4\'c2 \'bc\'bc\'c6\'ae\'bf\'a1 1\'c0\'bb \'b1\'e2\'b7\'cf \'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'d9 (\'c1\'ef, \'b4\'eb\'c0\'c0\'c7\'cf\'b4\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'c0\'ce \'bf\'a1\'c0\'cc\'ba\'ed\'c7\'d1\'b4\'d9).\par
\par
Reads of this register return the actual state of the enable register (and is the same as reading the corresponding "IRQ Clear" - register)\par
\'c0\'cc \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'c0\'d0\'b1\'e2\'b4\'c2 \'c8\'b0\'bc\'ba\'c8\'ad \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'bd\'c7\'c1\'a6 \'bb\'f3\'c5\'c2\'b8\'a6 \'b9\'dd\'c8\'af\'c7\'d5\'b4\'cf\'b4\'d9 (\'c7\'d8\'b4\'e7 "IRQ Clear"\'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'c0\'d0\'b1\'e2\'bf\'cd \'b5\'bf\'c0\'cf)\par
\par
\bullet  IRQ clear register - This register provides a per-event interrupt enable bit vector.\par
\bullet  IRQ \'c5\'ac\'b8\'ae\'be\'ee \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd -\'c0\'cc \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 \'c0\'cc\'ba\'a5\'c6\'ae \'ba\'b0 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c8\'b0\'bc\'ba\'c8\'ad \'ba\'f1\'c6\'ae \'ba\'a4\'c5\'cd\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Software can write 1 to clear (i.e., disable the corresponding interrupt).\par
\'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b4\'c2 1\'c0\'bb \'c5\'ac\'b8\'ae\'be\'ee (\'c1\'ef, \'b4\'eb\'c0\'c0\'c7\'cf\'b4\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'b5\'f0\'bd\'ba \'bf\'a1\'c0\'cc\'ba\'ed) \'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'d9.\par
\par
Reads of this register return the actual state of the enable register (and is the same as reading the corresponding "IRQ Set" register)\par
\'c0\'cc \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'c0\'d0\'b1\'e2\'b4\'c2 \'c8\'b0\'bc\'ba\'c8\'ad \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'bd\'c7\'c1\'a6 \'bb\'f3\'c5\'c2\'b8\'a6 \'b9\'dd\'c8\'af\'c7\'d5\'b4\'cf\'b4\'d9 (\'c7\'d8\'b4\'e7 "IRQ Set"\'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b8\'a6 \'c0\'d0\'b4\'c2 \'b0\'cd\'b0\'fa \'b0\'b0\'bd\'c0\'b4\'cf\'b4\'d9)\par
\par
NOTE: A DSP_SYS_ERRINT_IRQSTATUS_RAW bit is set even if the corresponding event is NOT enabled in the DSP_SYS_ERRINT_IRQENABLE_SET.\par
\'c2\'fc\'b0\'ed : \'c7\'d8\'b4\'e7 \'c0\'cc\'ba\'a5\'c6\'ae\'b0\'a1 NOT \'c0\'cf\'c1\'f6\'b6\'f3\'b5\'b5 DSP_SYS_ERRINT_IRQSTATUS_RAW \'ba\'f1\'c6\'ae\'b0\'a1 \'bc\'b3\'c1\'a4\'b5\'cb\'b4\'cf\'b4\'d9.\par
DSP_SYS_ERRINT_IRQENABLE_SET\'bf\'a1\'bc\'ad \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Note that neither of the events, listed in Table 5-5 , is exported as a separate hardware interrupt off the\par
DSP boundary.\par
\'c7\'a5 5-6\'bf\'a1 \'b3\'aa\'bf\'ad\'b5\'c8 \'c0\'cc\'ba\'a5\'c6\'ae \'c1\'df \'be\'ee\'b4\'c0 \'b0\'cd\'b5\'b5 DSP \'b0\'e6\'b0\'e8\'bf\'a1\'bc\'ad \'ba\'d0\'b8\'ae \'b5\'c8 \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
5.3.4.2.3 Non-DSP C66x CorePac Generated Peripheral Interrupt Outputs\par
5.3.4.2.3 \'b3\'ed- DSP C66x CorePac \'bb\'fd\'bc\'ba \'b5\'c8 \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'e2\'b7\'c2\par
\par
The non-DSP C66x CorePac interrupts generated by peripherals within the DSP subsystem are also\par
summarized in the Figure 5-5.\par
DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'c0\'c7 \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1\'bf\'a1 \'c0\'c7\'c7\'d8 \'bb\'fd\'bc\'ba \'b5\'c8 \'ba\'f1 DSP C66x CorePac \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b5\'b5 \'b1\'d7\'b8\'b2 5-5\'bf\'a1 \'bf\'e4\'be\'e0\'b5\'c7\'be\'ee\'c0\'d6\'b4\'d9.\par
\par
Besides the aggregated error event ERRINT_IRQ interrupts \endash  DSPi_IRQ_TPCC_ERR (where i=1 to 2),  interrupts (see also Figure 5-5) generated individually by DSPSS peripherals located outside the DSP  C66x CorePac, are mapped as separate IRQ outputs at DSP boundaries.\par
\'c1\'fd\'b0\'e8 \'b5\'c8 \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae ERRINT_IRQ \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c0\'ce DSPi_IRQ_TPCC_ERR (i = 1 ~ 2), DSP C66x CorePac \'bf\'dc\'ba\'ce\'bf\'a1\'c0\'d6\'b4\'c2 DSPSS \'b4\'c2 \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1\'bf\'a1 \'c0\'c7\'c7\'d8 \'b0\'b3\'ba\'b0\'c0\'fb\'c0\'b8\'b7\'ce \'bb\'fd\'bc\'ba \'b5\'c8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae DSP \'b0\'e6\'b0\'e8\'bf\'a1\'bc\'ad \'ba\'b0\'b5\'b5\'c0\'c7 IRQ \'c3\'e2\'b7\'c2\'c0\'b8\'b7\'ce \'b8\'c5\'c7\'ce\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
They are sourced by the DSP_EDMA_CC, DSP_EDMA_TC0, DSP_EDMA_TC1, DSP_MMU0, DSP_MMU1 and DSP_NoC and\par
exported to other host INTCs via the device IRQ_CROSSBAR.\par
\'c0\'cc\'b5\'e9\'c0\'ba DSP_EDMA_CC, DSP_EDMA_TC0, DSP_EDMA_TC1, DSP_MMU0, DSP_MMU1 \'b9\'d7 DSP_NoC\'bf\'a1 \'c0\'c7\'c7\'d8 \'bc\'d2\'bd\'ba\'b5\'c7\'b8\'e7 IRQ_CROSSBAR \'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba\'b8\'a6 \'c5\'eb\'c7\'d8 \'b4\'d9\'b8\'a5 \'c8\'a3\'bd\'ba\'c6\'ae INTC\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'fd\'b4\'cf\'b4\'d9.\par
\par
Refer to the Section 5.2, for moreinformation on these DSP interrupt outputs mapping.\par
\'c0\'cc\'b7\'af\'c7\'d1 DSP \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'e2\'b7\'c2 \'b8\'c5\'c7\'ce\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'bc\'bd\'bc\'c7 5.2\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.5 DSP DMA Requests\par
5.3.5 DSP DMA \'bf\'e4\'c3\'bb\par
\par
The DSP_EDMA_CC (channel controller) supports 64 hardware event inputs, that can be used to synchronize the 64 DMA channels.\par
DSP_EDMA_CC (\'c3\'a4\'b3\'ce \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af)\'b4\'c2 64 \'b0\'b3\'c0\'c7 \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee \'c0\'cc\'ba\'a5\'c6\'ae \'c0\'d4\'b7\'c2\'c0\'bb \'c1\'f6\'bf\'f8\'c7\'cf\'b8\'e7 64 \'b0\'b3\'c0\'c7 DMA \'c3\'a4\'b3\'ce\'c0\'bb \'b5\'bf\'b1\'e2\'c8\'ad\'c7\'cf\'b4\'c2 \'b5\'a5 \'bb\'e7\'bf\'eb\'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
These event inputs are provided at the DSP subsystem boundary via the device DMA_CROSSBAR and can be mapped to sources within the device.\par
\'c0\'cc \'c0\'cc\'ba\'a5\'c6\'ae \'c0\'d4\'b7\'c2\'c0\'ba \'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba DMA_CROSSBAR\'b8\'a6 \'c5\'eb\'c7\'d8 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b0\'e6\'b0\'e8\'bf\'a1\'bc\'ad \'c1\'a6\'b0\'f8\'b5\'c7\'b8\'e7 \'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba \'b3\'bb\'c0\'c7 \'bc\'d2\'bd\'ba\'bf\'a1 \'b8\'ca\'c7\'ce \'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The DSP subsystem receives DMA requests from certain peripherals, such as the McASP modules.\par
DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'ba McASP \'b8\'f0\'b5\'e2\'b0\'fa \'b0\'b0\'c0\'ba \'c6\'af\'c1\'a4 \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1\'b7\'ce\'ba\'ce\'c5\'cd DMA \'bf\'e4\'c3\'bb\'c0\'bb \'bc\'f6\'bd\'c5\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The DMA requests path through the DSP logic is shown in Figure 5-7.\par
\'b1\'d7\'b8\'b2 5-7\'c0\'ba DSP \'b7\'ce\'c1\'f7\'c0\'bb \'c5\'eb\'c7\'d1 DMA \'bf\'e4\'c3\'bb \'b0\'e6\'b7\'ce\'b8\'a6 \'ba\'b8\'bf\'a9\'c1\'dd\'b4\'cf\'b4\'d9.\par
\par
Similar to the interrupts received at DSP subsystem boundary, the DSP EDMA requests are first routed\par
through the wakeup generation logic of the DSP_SYSTEM module, hence, each DMA request received by\par
the DSP subsystem can wakeup the system from DSP low power modes (including wakeup from DSP\par
OFF mode).\par
DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b0\'e6\'b0\'e8\'bf\'a1\'bc\'ad \'bc\'f6\'bd\'c5 \'b5\'c8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'bf\'cd \'c0\'af\'bb\'e7\'c7\'cf\'b0\'d4, DSP EDMA \'bf\'e4\'c3\'bb\'c0\'ba \'b8\'d5\'c0\'fa DSP_SYSTEM \'b8\'f0\'b5\'e2\'c0\'c7 \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'bb\'fd\'bc\'ba \'b7\'ce\'c1\'f7\'c0\'bb \'c5\'eb\'c7\'d8 \'b6\'f3\'bf\'ec\'c6\'c3\'b5\'c7\'b9\'c7\'b7\'ce DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'cc \'bc\'f6\'bd\'c5 \'c7\'d1 \'b0\'a2 DMA \'bf\'e4\'c3\'bb\'c0\'ba DSP \'c0\'fa\'c0\'fc\'b7\'c2 \'b8\'f0\'b5\'e5 (\'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7\'c0\'bb \'c6\'f7\'c7\'d4\'c7\'cf\'bf\'a9 DSP OFF \'b8\'f0\'b5\'e5).\par
\par
To enable the DMA requests mapped via the DMA_CROSSBAR to DSP_EDMA_CC [19:0] inputs, corresponding bits in range [19:0] of the register DSP_SYS_DMAWAKEEN0 must be enabled in software.\par
DMA_CROSSBAR\'b8\'a6 \'c5\'eb\'c7\'d8 DSP_EDMA_CC [19 : 0] \'c0\'d4\'b7\'c2\'bf\'a1 \'b8\'c5\'c7\'ce \'b5\'c8 DMA \'bf\'e4\'c3\'bb\'c0\'bb \'c8\'b0\'bc\'ba\'c8\'ad\'c7\'cf\'b7\'c1\'b8\'e9 DSP_SYS_DMAWAKEEN0 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'b9\'fc\'c0\'a7 [19 : 0]\'bf\'a1\'c0\'d6\'b4\'c2 \'c7\'d8\'b4\'e7 \'ba\'f1\'c6\'ae\'b0\'a1 \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'bf\'a1\'bc\'ad \'c8\'b0\'bc\'ba\'c8\'ad\'b5\'c7\'be\'ee\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9..\par
\par
CAUTION\par
The DMA request corresponding DSP_SYS_DMAWAKEEN0 / DSP_SYS_DMAWAKEEN1 MUST be enabled, for the DMA requests to be serviced by the DSP regardless of the DSP being in IDLE or active state.\par
\'c1\'d6\'c0\'c7\par
DSP\'b0\'a1 IDLE \'b6\'c7\'b4\'c2 \'c8\'b0\'bc\'ba \'bb\'f3\'c5\'c2\'bf\'a1 \'b0\'fc\'b0\'e8\'be\'f8\'c0\'cc DMA \'bf\'e4\'c3\'bb\'c0\'bb \'c3\'b3\'b8\'ae\'c7\'cf\'b7\'c1\'b8\'e9 \'c7\'d8\'b4\'e7 DSP_SYS_DMAWAKEEN0 / DSP_SYS_DMAWAKEEN1\'bf\'a1 \'c7\'d8\'b4\'e7\'c7\'cf\'b4\'c2 DMA \'bf\'e4\'c3\'bb\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9 (MUST).\par
\par
Table 5-6 and Table 5-7 list the default DMA sources for the DSP1_EDMA and DSP2_EDMA controllers.\par
\'c7\'a5 5-6 \'b9\'d7 \'c7\'a5 5-7\'bf\'a1\'b4\'c2 DSP1_EDMA \'b9\'d7 DSP2_EDMA \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'c0\'c7 \'b1\'e2\'ba\'bb DMA \'bc\'d2\'bd\'ba\'b0\'a1 \'b3\'aa\'bf\'ad\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
In addition, DSP1_EDMA / DSP2_EDMA inputs (DMA_DSP1_DREQ_[19:0] / DMA_DSP2_DREQ_[19:0]) can alternatively be sourced through the associated DMA_CROSSBAR from one of the 256 multiplexed device DMA sources listed in Table 16-6.\par
\'b6\'c7\'c7\'d1 DSP1_EDMA / DSP2_EDMA \'c0\'d4\'b7\'c2 (DMA_DSP1_DREQ_ [19 : 0] / DMA_DSP2_DREQ_ [19 : 0])\'c0\'ba \'c7\'a5 16-6\'bf\'a1 \'b3\'aa\'bf\'ad\'b5\'c8 256 \'b0\'b3\'c0\'c7 \'b8\'d6\'c6\'bc\'c7\'c3\'b7\'ba\'bd\'cc \'c0\'e5\'c4\'a1 DMA \'bc\'d2\'bd\'ba \'c1\'df \'c7\'cf\'b3\'aa\'bf\'a1\'bc\'ad \'bf\'ac\'b0\'fc\'b5\'c8 DMA_CROSSBAR\'b8\'a6 \'c5\'eb\'c7\'d8 \'bc\'b1\'c5\'c3\'c7\'d2 \'bc\'f6\'b5\'b5 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The CTRL_CORE_DMA_DSP1_DREQ_y_z / CTRL_CORE_DMA_DSP2_DREQ_y_z registers (where y and z are indexes of DSP1_EDMA / DSP2_EDMA input lines) in the Control Module are used to select between the default DMA sources and the multiplexed DMA sources.\par
\'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2\'c0\'c7 CTRL_CORE_DMA_DSP1_DREQ_y_z / CTRL_CORE_DMA_DSP2_DREQ_y_z \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd (y \'b9\'d7 z\'b4\'c2 DSP1_EDMA / DSP2_EDMA \'c0\'d4\'b7\'c2 \'b6\'f3\'c0\'ce\'c0\'c7 \'c0\'ce\'b5\'a6\'bd\'ba \'c0\'d3)\'b4\'c2 \'b1\'e2\'ba\'bb DMA \'bc\'d2\'bd\'ba\'bf\'cd \'b4\'d9\'c1\'df\'c8\'ad \'b5\'c8 DMA \'bc\'d2\'bd\'ba\'b8\'a6 \'bc\'b1\'c5\'c3\'c7\'cf\'b4\'c2 \'b5\'a5 \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9\par
\par
For more details on the device DMA_CROSSBAR multiplexing registers structure, refer to Section 18.4.6.5, DMA_CROSSBAR Module Functional Description of chapter, Control Module.\par
\'c0\'e5\'c4\'a1 DMA_CROSSBAR \'b4\'d9\'c1\'df\'c8\'ad \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'b1\'b8\'c1\'b6\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'bc\'bd\'bc\'c7 18.4.6.5, DMA_CROSSBAR \'b8\'f0\'b5\'e2 \'b1\'e2\'b4\'c9 \'bc\'b3\'b8\'ed \'c0\'e5, \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.5.1 DSP EDMA Wakeup Interrupt\par
5.3.5.1 DSP EDMA \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\par
\par
This section provides description of the registers used for the EDMA wakeup interrupt functionality,\par
including the EDMA_WAKE_INT IRQ status and enable fields.\par
\'c0\'cc \'c0\'fd\'bf\'a1\'bc\'ad\'b4\'c2 EDMA_WAKE_INT IRQ \'bb\'f3\'c5\'c2 \'b9\'d7 \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9 \'c7\'ca\'b5\'e5\'b8\'a6 \'c6\'f7\'c7\'d4\'c7\'cf\'bf\'a9 EDMA \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'b1\'e2\'b4\'c9\'bf\'a1 \'bb\'e7\'bf\'eb\'b5\'c7\'b4\'c2 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d8 \'bc\'b3\'b8\'ed\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The EDMA Wakeup Interrupt allows incoming EDMA events to be latched and an interrupt sent to the DSP (if enabled).\par
EDMA \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b4\'c2 \'b5\'e9\'be\'ee\'bf\'c0\'b4\'c2 EDMA \'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'b7\'a1\'c4\'a1\'c7\'cf\'b0\'ed \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 DSP\'b7\'ce \'ba\'b8\'b3\'c0\'b4\'cf\'b4\'d9 (\'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9\'c7\'d1 \'b0\'e6\'bf\'ec).\par
\par
This interrupt is generated in the DSP_SYSTEM as an single "OR-ed" output of all external DMA requests latched in DSP subsystem.\par
\'c0\'cc \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b4\'c2 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'bf\'a1 \'b7\'a1\'c4\'a1 \'b5\'c8 \'b8\'f0\'b5\'e7 \'bf\'dc\'ba\'ce DMA \'bf\'e4\'c3\'bb\'c0\'c7 \'b4\'dc\'c0\'cf "OR-ed"\'c3\'e2\'b7\'c2\'c0\'b8\'b7\'ce DSP_SYSTEM\'bf\'a1\'bc\'ad \'bb\'fd\'bc\'ba\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
This output is further synchronized to DSP_FCLK and mapped as the EDMA_WAKE_INT event to the DSP_IRQ_31 input of the C66x DSP CorePac DSP_INTC.\par
\'c0\'cc \'c3\'e2\'b7\'c2\'c0\'ba DSP_FCLK\'b7\'ce \'b4\'f5 \'b5\'bf\'b1\'e2\'c8\'ad\'b5\'c7\'b0\'ed EDMA_WAKE_INT \'c0\'cc\'ba\'a5\'c6\'ae\'b7\'ce C66x DSP CorePac DSP_INTC\'c0\'c7 DSP_IRQ_31 \'c0\'d4\'b7\'c2\'c0\'b8\'b7\'ce \'b8\'c5\'c7\'ce\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
 The C66x CPU is expected to service the interrupt by triggering the corresponding EDMA channel manually, or by servicing the request via normal reads and writes (instead of using the EDMA).\par
 C66x CPU\'b4\'c2 \'c7\'d8\'b4\'e7 EDMA \'c3\'a4\'b3\'ce\'c0\'bb \'bc\'f6\'b5\'bf\'c0\'b8\'b7\'ce \'c6\'ae\'b8\'ae\'b0\'c5\'c7\'cf\'b0\'c5\'b3\'aa (EDMA \'b4\'eb\'bd\'c5) \'c0\'cf\'b9\'dd \'c0\'d0\'b1\'e2 \'b9\'d7 \'be\'b2\'b1\'e2\'b8\'a6 \'c5\'eb\'c7\'d8 \'bf\'e4\'c3\'bb\'c0\'bb \'c3\'b3\'b8\'ae\'c7\'cf\'bf\'a9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'c3\'b3\'b8\'ae\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
 This functionality is required since the EDMA is not capable of following the smart wakeup protocol.\par
EDMA\'b0\'a1 \'bd\'ba\'b8\'b6\'c6\'ae \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'c7\'c1\'b7\'ce\'c5\'e4\'c4\'dd\'c0\'bb \'b5\'fb\'b8\'a3\'c1\'f6 \'b8\'f8\'c7\'cf\'b1\'e2 \'b6\'a7\'b9\'ae\'bf\'a1\'c0\'cc \'b1\'e2\'b4\'c9\'c0\'cc \'c7\'ca\'bf\'e4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
NOTE: The DSP_SYS_DMAWAKEEN0 / DSP_SYS_DMAWAKEEN1 registers are used for enabling the assertion of the 'Mwakeup' asynchronous wakeup request to the device PRCM upon DMA requests reception.\par
\'c2\'fc\'b0\'ed : DSP_SYS_DMAWAKEEN0 / DSP_SYS_DMAWAKEEN1 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 DMA \'bf\'e4\'c3\'bb \'bc\'f6\'bd\'c5\'bd\'c3 \'c0\'e5\'c4\'a1 PRCM\'bf\'a1 \'b4\'eb\'c7\'d1 'Mwakeup'\'ba\'f1\'b5\'bf\'b1\'e2\'bd\'c4 \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7 \'bf\'e4\'c3\'bb\'c0\'c7 \'be\'ee\'bc\'b3 \'bc\'c7\'c0\'bb \'c8\'b0\'bc\'ba\'c8\'ad\'c7\'cf\'b4\'c2 \'b5\'a5 \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The interrupt functionality of the registers:\par
DSP_SYS_EDMAWAKE0_x covered in this subsection is specifically for generating an wake interrupt to the DSP.\par
\'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'b1\'e2\'b4\'c9 :\par
\'c0\'cc \'bc\'ad\'ba\'ea \'bc\'bd\'bc\'c7\'bf\'a1\'bc\'ad \'b4\'d9\'b7\'e7\'b4\'c2 DSP_SYS_EDMAWAKE0_x\'b4\'c2 DSP\'bf\'a1 \'b4\'eb\'c7\'d1 \'c8\'c4\'b7\'f9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'cf\'b1\'e2\'c0\'a7\'c7\'d1 \'b0\'cd\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
 In most cases, the enable mask for the two sets of registers should be set to the same value.\par
\'b4\'eb\'ba\'ce\'ba\'d0\'c0\'c7 \'b0\'e6\'bf\'ec \'b5\'ce \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'bc\'bc\'c6\'ae\'c0\'c7 \'c8\'b0\'bc\'ba\'c8\'ad \'b8\'b6\'bd\'ba\'c5\'a9\'b4\'c2 \'b0\'b0\'c0\'ba \'b0\'aa\'c0\'b8\'b7\'ce \'bc\'b3\'c1\'a4\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The EDMAWAKE0 registers corresponding to the EDMA Events 19 thru 0 (msbit to lsbit) are as follows:\par
EDMA \'c0\'cc\'ba\'a5\'c6\'ae 19 ~ 0 (msbit\'bf\'a1\'bc\'ad lsbit)\'bf\'a1 \'c7\'d8\'b4\'e7\'c7\'cf\'b4\'c2 EDMAWAKE0 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  DSP_SYS_EDMAWAKE0_IRQSTATUS_RAW[19:0]\par
\par
\bullet  DSP_SYS_EDMAWAKE0_IRQSTATUS[19:0]\par
\par
\bullet  DSP_SYS_EDMAWAKE0_IRQENABLE_SET[19:0]\par
\par
\bullet  DSP_SYS_EDMAWAKE0_IRQENABLE_CLR[19:0]\par
\par
Following functional descriptions are valid for the above registers :\par
\'b4\'d9\'c0\'bd \'c7\'d4\'bc\'f6 \'bc\'b3\'b8\'ed\'c0\'ba \'c0\'a7\'c0\'c7 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'c0\'af\'c8\'bf\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  IRQ status raw register - This register provides a per-event raw interrupt status vector.\par
\bullet  IRQ \'bb\'f3\'c5\'c2 \'bf\'f8\'bd\'c3 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd -\'c0\'cc \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 \'c0\'cc\'ba\'a5\'c6\'ae \'ba\'b0 \'bf\'f8\'bd\'c3 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bb\'f3\'c5\'c2 \'ba\'a4\'c5\'cd\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The Raw status is set even if the corresponding event is not enabled. Software can write '1' to set the (raw) status for debug purposes.\par
\'bf\'f8\'bd\'c3(Raw) \'bb\'f3\'c5\'c2\'b4\'c2 \'c7\'d8\'b4\'e7 \'c0\'cc\'ba\'a5\'c6\'ae\'b0\'a1 \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9\'c7\'cf\'c1\'f6 \'be\'ca\'c0\'ba \'b0\'e6\'bf\'ec\'bf\'a1\'b5\'b5 \'bc\'b3\'c1\'a4\'b5\'cb\'b4\'cf\'b4\'d9. \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b4\'c2 \'b5\'f0\'b9\'f6\'b1\'d7 \'b8\'f1\'c0\'fb\'c0\'bb \'c0\'a7\'c7\'d8 (\'bf\'f8\'bd\'c3) \'bb\'f3\'c5\'c2\'b8\'a6 \'bc\'b3\'c1\'a4\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 '1'\'c0\'bb \'be\'b5 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  IRQ status register - This register provides a per-event enabled interrupt status vector.\par
\bullet  IRQ \'bb\'f3\'c5\'c2 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd -\'c0\'cc \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 \'c0\'cc\'ba\'a5\'c6\'ae \'ba\'b0 \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'bb\'f3\'c5\'c2 \'ba\'a4\'c5\'cd\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The Enabled status is set if the corresponding event is enabled and the raw status is set.\par
\'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9 \'bb\'f3\'c5\'c2\'b4\'c2 \'c7\'d8\'b4\'e7 \'c0\'cc\'ba\'a5\'c6\'ae\'b0\'a1 \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9\'c7\'cf\'b0\'ed \'bf\'f8\'bd\'c3 \'bb\'f3\'c5\'c2\'b0\'a1 \'bc\'b3\'c1\'a4\'b5\'c8 \'b0\'e6\'bf\'ec \'bc\'b3\'c1\'a4\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Software can write 1 to clear the (raw) status after the interrupt has been serviced.\par
\'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b4\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b0\'a1 \'c3\'b3\'b8\'ae \'b5\'c8 \'c8\'c4 (\'bf\'f8\'bd\'c3) \'bb\'f3\'c5\'c2\'b8\'a6 \'c1\'f6\'bf\'ec\'b1\'e2 \'c0\'a7\'c7\'d8 1\'c0\'bb \'be\'b5 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The clear takes effect even if the interrupt is not enabled.\par
\'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b0\'a1 \'c8\'b0\'bc\'ba\'c8\'ad\'b5\'c7\'c1\'f6 \'be\'ca\'c0\'ba \'b0\'e6\'bf\'ec\'bf\'a1\'b5\'b5 \'c1\'f6\'bf\'ec\'b1\'e2\'b0\'a1 \'c0\'fb\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
\bullet  IRQ enable register - This register provides a per-event interrupt enable bit vector.\par
\bullet  IRQ \'c8\'b0\'bc\'ba\'c8\'ad \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd -\'c0\'cc \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 \'c0\'cc\'ba\'a5\'c6\'ae \'ba\'b0 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c8\'b0\'bc\'ba\'c8\'ad \'ba\'f1\'c6\'ae \'ba\'a4\'c5\'cd\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Software can write 1 to set (i.e., enable the corresponding interrupt).\par
\'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b4\'c2 \'bc\'bc\'c6\'ae\'bf\'a1 1\'c0\'bb \'b1\'e2\'b7\'cf \'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'d9 (\'c1\'ef, \'b4\'eb\'c0\'c0\'c7\'cf\'b4\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'c0\'ce \'bf\'a1\'c0\'cc\'ba\'ed\'c7\'d1\'b4\'d9).\par
\par
Reads of this register return the actual state of the enable register (and is the same as reading the corresponding "IRQ Clear" - register)\par
\'c0\'cc \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'c0\'d0\'b1\'e2\'b4\'c2 \'c8\'b0\'bc\'ba\'c8\'ad \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'bd\'c7\'c1\'a6 \'bb\'f3\'c5\'c2\'b8\'a6 \'b9\'dd\'c8\'af\'c7\'d5\'b4\'cf\'b4\'d9 (\'c7\'d8\'b4\'e7 "IRQ Clear"\'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'c0\'d0\'b1\'e2\'bf\'cd \'b5\'bf\'c0\'cf)\par
\par
\bullet  IRQ clear register - This register provides a per-event interrupt enable bit vector.\par
\bullet  IRQ \'c5\'ac\'b8\'ae\'be\'ee \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd -\'c0\'cc \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 \'c0\'cc\'ba\'a5\'c6\'ae \'ba\'b0 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c8\'b0\'bc\'ba\'c8\'ad \'ba\'f1\'c6\'ae \'ba\'a4\'c5\'cd\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Software can write 1 to clear (i.e., disable the corresponding interrupt).\par
\'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b4\'c2 1\'c0\'bb \'c5\'ac\'b8\'ae\'be\'ee (\'c1\'ef, \'b4\'eb\'c0\'c0\'c7\'cf\'b4\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'b5\'f0\'bd\'ba \'bf\'a1\'c0\'cc\'ba\'ed) \'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'d9.\par
\par
Reads of this register return the actual state of the enable register (and is the same as reading the corresponding "IRQ Set" register)\par
\'c0\'cc \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'c0\'d0\'b1\'e2\'b4\'c2 \'c8\'b0\'bc\'ba\'c8\'ad \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'bd\'c7\'c1\'a6 \'bb\'f3\'c5\'c2\'b8\'a6 \'b9\'dd\'c8\'af\'c7\'d5\'b4\'cf\'b4\'d9 (\'c7\'d8\'b4\'e7 "IRQ Set"\'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b8\'a6 \'c0\'d0\'b4\'c2 \'b0\'cd\'b0\'fa \'b0\'b0\'bd\'c0\'b4\'cf\'b4\'d9)\par
\par
NOTE: A DSP_SYS_EDMAWAKE0_IRQSTATUS_RAW bit is set even if the corresponding event is NOT enabled in the DSP_SYS_EDMAWAKE0_IRQENABLE_SET[19:0].\par
\'c2\'fc\'b0\'ed : \'c7\'d8\'b4\'e7 \'c0\'cc\'ba\'a5\'c6\'ae\'b0\'a1 DSP_SYS_EDMAWAKE0_IRQENABLE_SET [19 : 0]\'bf\'a1\'bc\'ad \'c8\'b0\'bc\'ba\'c8\'ad\'b5\'c7\'c1\'f6 \'be\'ca\'c0\'ba \'b0\'e6\'bf\'ec\'bf\'a1\'b5\'b5 DSP_SYS_EDMAWAKE0_IRQSTATUS_RAW \'ba\'f1\'c6\'ae\'b0\'a1 \'bc\'b3\'c1\'a4\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
5.3.6 DSP Intergated Memory Management Units\par
5.3.6 DSP \'c5\'eb\'c7\'d5 \'b8\'de\'b8\'f0\'b8\'ae \'b0\'fc\'b8\'ae \'c0\'e5\'c4\'a1\par
\par
5.3.6.1 DSP MMUs Overview.\par
5.3.6.1 DSP MMUs \'b0\'b3\'b0\'fc\par
\par
A standalone memory management unit (DSP_MMU0) is included within the DSP1 (DSP1_MMU0) and DSP2 (DSP2_MMU0) subsystems boundaries.\par
\'b5\'b6\'b8\'b3\'c7\'fc \'b8\'de\'b8\'f0\'b8\'ae \'b0\'fc\'b8\'ae \'c0\'e5\'c4\'a1 (DSP_MMU0)\'b4\'c2 DSP1 (DSP1_MMU0) \'b9\'d7 DSP2 (DSP2_MMU0) \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b0\'e6\'b0\'e8\'bf\'a1 \'c6\'f7\'c7\'d4\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The DSP_MMU0 is integrated on the C66x CPU MDMA path to the device L3_MAIN interconnect.\par
DSP_MMU0\'c0\'ba \'c0\'e5\'c4\'a1 L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1\'bf\'a1 \'b4\'eb\'c7\'d1 C66x CPU MDMA \'b0\'e6\'b7\'ce\'bf\'a1 \'c5\'eb\'c7\'d5\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
This provides several benefits including protection of the system memories from corruption by DSP1 and DSP2 accidental accesses.\par
\'c0\'cc\'b4\'c2 DSP1 \'b9\'d7 DSP2 \'bf\'ec\'b9\'df\'c0\'fb \'c0\'ce \'be\'d7\'bc\'bc\'bd\'ba\'bf\'a1 \'c0\'c7\'c7\'d1 \'bd\'c3\'bd\'ba\'c5\'db \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7 \'bc\'d5\'bb\'f3\'c0\'b8\'b7\'ce\'ba\'ce\'c5\'cd \'ba\'b8\'c8\'a3\'c7\'cf\'b4\'c2 \'b0\'cd\'c0\'bb \'c6\'f7\'c7\'d4\'c7\'cf\'bf\'a9 \'bf\'a9\'b7\'af \'b0\'a1\'c1\'f6 \'c0\'cc\'c1\'a1\'c0\'bb \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Both DSP MMUs generate interrupts which are internally mapped to the DSP C66x CorePac DSP_INTC and output to the device IRQ_CROSSBAR.\par
\'b5\'ce \'b0\'b3\'c0\'c7 DSP MMU \'b8\'f0\'b5\'ce \'b3\'bb\'ba\'ce\'c0\'fb\'c0\'b8\'b7\'ce DSP C66x CorePac DSP_INTC\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'c7\'b0\'ed IRQ_CROSSBAR \'c0\'e5\'c4\'a1\'b7\'ce \'c3\'e2\'b7\'c2\'b5\'c7\'b4\'c2 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
 See also the Section 5.2 and Section 5.3.4.\par
5.2 \'c0\'fd\'b0\'fa 5.3.4 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
CAUTION\par
In the case of a page fault, a DSP C66x CorePac CPU is unable to service it\rquote s own DSP_MMU0 and DSP_MMU1 interrupts .\par
\'c1\'d6\'c0\'c7\par
\'c6\'e4\'c0\'cc\'c1\'f6 \'c6\'fa\'c6\'ae\'c0\'c7 \'b0\'e6\'bf\'ec, DSP C66x CorePac CPU\'b4\'c2 \'c0\'da\'bd\'c5\'c0\'c7 DSP_MMU0 \'b9\'d7 DSP_MMU1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'c3\'b3\'b8\'ae \'c7\'d2 \'bc\'f6 \u8203?\u8203?\'be\'f8\'b4\'d9.\par
\par
The device MPU (Cortex- A15) is expected to manage any TLB patches as necessary.\par
\'c0\'e5\'c4\'a1 MPU (Cortex-A15)\'b4\'c2 \'c7\'ca\'bf\'e4\'bf\'a1 \'b5\'fb\'b6\'f3 \'b8\'f0\'b5\'e7 TLB \'c6\'d0\'c4\'a1\'b8\'a6 \'b0\'fc\'b8\'ae\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Both DSP MMUs (on MDMA and EDMA paths respectively) have identical functionalities.\par
\'b5\'ce \'b0\'b3\'c0\'c7 DSP MMU (\'b0\'a2\'b0\'a2 MDMA \'b9\'d7 EDMA \'b0\'e6\'b7\'ce\'bf\'a1 \'c0\'d6\'c0\'bd)\'b4\'c2 \'b5\'bf\'c0\'cf\'c7\'d1 \'b1\'e2\'b4\'c9\'c0\'bb\'b0\'a1\'c1\'fd\'b4\'cf\'b4\'d9.\par
\par
\bullet  32-bit input and ouput address width (to match L3_MAIN address width)\par
\bullet  32 \'ba\'f1\'c6\'ae \'c0\'d4\'b7\'c2 \'b9\'d7 \'c3\'e2\'b7\'c2 \'c1\'d6\'bc\'d2 \'b3\'ca\'ba\'f1 (L3_MAIN \'c1\'d6\'bc\'d2 \'b3\'ca\'ba\'f1\'bf\'cd \'c0\'cf\'c4\'a1\'bd\'c3\'c5\'b0\'b1\'e2 \'c0\'a7\'c7\'d8)\par
\par
\bullet  32 TLB cache entries\par
\bullet  32 \'b0\'b3\'c0\'c7 TLB \'c4\'b3\'bd\'c3 \'bf\'a3\'c6\'ae\'b8\'ae\par
\par
\bullet  32 + 1 tags\par
\bullet  32 + 1 \'c5\'c2\'b1\'d7\par
\par
\bullet  128-bit data bus for MDMA and EDMA\par
\bullet  MDMA \'b9\'d7 EDMA\'b8\'a6\'c0\'a7\'c7\'d1 128 \'ba\'f1\'c6\'ae \'b5\'a5\'c0\'cc\'c5\'cd \'b9\'f6\'bd\'ba\par
\par
5.3.6.2 Routing MDMA Traffic through DSP MMU0\par
5.3.6.2 DSP\'b8\'a6 \'c5\'eb\'c7\'d1 MDMA \'c6\'ae\'b7\'a1\'c7\'c8 \'b6\'f3\'bf\'ec\'c6\'c3 MMU0\par
\par
DSP C66x CPU traffic initiated on the DSP MDMA port can be optionally routed through the DSP_MMU0\par
on the 32-bit MDMA address path.\par
DSP MDMA \'c6\'f7\'c6\'ae\'bf\'a1\'bc\'ad \'bd\'c3\'c0\'db\'b5\'c8 DSP C66x CPU \'c6\'ae\'b7\'a1\'c7\'c8\'c0\'ba 32 \'ba\'f1\'c6\'ae MDMA \'c1\'d6\'bc\'d2 \'b0\'e6\'b7\'ce\'bf\'a1 \'c0\'d6\'b4\'c2 DSP_MMU0\'c0\'bb \'c5\'eb\'c7\'d8 \'bc\'b1\'c5\'c3\'c0\'fb\'c0\'b8\'b7\'ce \'b6\'f3\'bf\'ec\'c6\'c3 \'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
This is controlled in two levels :\par
\'c0\'cc\'b0\'cd\'c0\'ba \'b5\'ce \'b4\'dc\'b0\'e8\'b7\'ce \'c1\'a6\'be\'ee\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
\bullet  global by the DSP_SYSTEM register DSP_SYS_MMU_CONFIG [0] MMU0_EN bit.\par
\bullet  DSP_SYSTEM \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'c0\'c7\'c7\'d8 \'c0\'fc\'bf\'aa DSP_SYS_MMU_CONFIG [0] MMU0_EN \'ba\'f1\'c6\'ae.\par
\par
 This bit acts as a mux-select : setting it to 0b1 enables requests to use the DSP_MMU0; clearing this bit to 0b0 disables MMU table lookup and causes accesses to use the non-translated address (MMU bypass).\par
\'c0\'cc \'ba\'f1\'c6\'ae\'b4\'c2 mux-select\'b7\'ce \'c0\'db\'bf\'eb\'c7\'d5\'b4\'cf\'b4\'d9 : 0b1\'b7\'ce \'bc\'b3\'c1\'a4\'c7\'cf\'b8\'e9 DSP_MMU0; \'c0\'cc \'ba\'f1\'c6\'ae\'b8\'a6 0b0\'c0\'b8\'b7\'ce \'c1\'f6\'bf\'ef\'b0\'e6\'bf\'ec MMU \'c5\'d7\'c0\'cc\'ba\'ed \'b0\'cb\'bb\'f6\'c0\'cc \'ba\'f1\'c8\'b0\'bc\'ba\'c8\'ad\'b5\'c7\'b0\'ed \'be\'d7\'bc\'bc\'bd\'ba\'b0\'a1 \'ba\'f1 \'b9\'f8\'bf\'aa \'c1\'d6\'bc\'d2 (MMU \'b9\'d9\'c0\'cc \'c6\'d0\'bd\'ba)\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'cf\'b0\'d4\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
By default the DSP_MMU0 is disabled in DSP_SYSTEM and MDMA port traffic bypasses the DSP_MMU0.\par
\'b1\'e2\'ba\'bb\'c0\'fb\'c0\'b8\'b7\'ce DSP_SYSTEM\'bf\'a1\'bc\'ad\'b4\'c2 DSP_MMU0\'c0\'cc \'ba\'f1\'c8\'b0\'bc\'ba\'c8\'ad\'b5\'c7\'b0\'ed MDMA \'c6\'f7\'c6\'ae \'c6\'ae\'b7\'a1\'c7\'c8\'c0\'ba DSP_MMU0\'c0\'bb \'b9\'d9\'c0\'cc \'c6\'d0\'bd\'ba\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
\bullet  local by MMU enable control in a dedicated DSP_MMU0 memory mapped register.\par
\bullet  local by MMU\'b4\'c2 \'c0\'fc\'bf\'eb DSP_MMU0 \'b8\'de\'b8\'f0\'b8\'ae \'b8\'ca\'c7\'ce \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1\'bc\'ad \'c1\'a6\'be\'ee\'b8\'a6 \'c8\'b0\'bc\'ba\'c8\'ad\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
It is used to enable the MMU functionality after the page tables are programmed for MMU operation.\par
For details, refer to the Chapter 20, Memory Management Units.\par
MMU \'c0\'db\'b5\'bf\'c0\'bb \'c0\'a7\'c7\'d8 \'c6\'e4\'c0\'cc\'c1\'f6 \'c5\'d7\'c0\'cc\'ba\'ed\'c0\'cc \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a1\'b9\'d6 \'b5\'c8 \'c8\'c4 MMU \'b1\'e2\'b4\'c9\'c0\'bb \'c8\'b0\'bc\'ba\'c8\'ad\'c7\'cf\'b4\'c2 \'b5\'a5 \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 20 \'c0\'e5, \'b8\'de\'b8\'f0\'b8\'ae \'b0\'fc\'b8\'ae \'c0\'e5\'c4\'a1\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: For the DSP_MMU0 to operate, SW should enable it both at the DSP_SYSTEM global level\par
and DSP_MMU0 local register level.\par
\'c2\'fc\'b0\'ed : DSP_MMU0\'c0\'cc \'c0\'db\'b5\'bf\'c7\'cf\'b7\'c1\'b8\'e9 SW\'b0\'a1 DSP_SYSTEM \'c0\'fc\'bf\'aa \'bc\'f6\'c1\'d8\'b0\'fa DSP_MMU0 \'b7\'ce\'c4\'c3 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'bc\'f6\'c1\'d8\'bf\'a1\'bc\'ad DSP\'b8\'a6 \'c8\'b0\'bc\'ba\'c8\'ad\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
When enabling the DSP_MMU0, software must take care that no transactions are in flight through that MMU.\par
DSP_MMU0\'c0\'bb \'c8\'b0\'bc\'ba\'c8\'ad \'c7\'d2 \'b6\'a7, \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b4\'c2 \'c7\'d8\'b4\'e7 MMU\'b8\'a6 \'c5\'eb\'c7\'d8 \'ba\'f1\'c7\'e0\'c1\'df\'c0\'ce \'c6\'ae\'b7\'a3\'c0\'e8\'bc\'c7\'c0\'cc \'be\'f8\'b5\'b5\'b7\'cf\'c1\'d6\'c0\'c7\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
This is typically handled by issueing a DSP "MFENCE" instruction operation.\par
\'c0\'cc\'b0\'cd\'c0\'ba \'c0\'cf\'b9\'dd\'c0\'fb\'c0\'b8\'b7\'ce DSP "MFENCE"\'b8\'ed\'b7\'c9 \'c0\'db\'be\'f7\'c0\'bb \'b9\'df\'c7\'e0\'c7\'cf\'bf\'a9 \'c3\'b3\'b8\'ae\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Note that the local enable bit inside the DSP_MMU0 must be configured as normal (refer to the Chapter 20, Memory Management Units.)\par
\'b3\'eb\'c6\'ae: DSP_MMU0 \'b3\'bb\'ba\'ce\'c0\'c7 \'b7\'ce\'c4\'c3 \'c0\'ce \'bf\'a1\'c0\'cc\'ba\'ed \'ba\'f1\'c6\'ae\'b4\'c2 \'c1\'a4\'bb\'f3\'c0\'fb\'c0\'b8\'b7\'ce \'b1\'b8\'bc\'ba\'b5\'c7\'be\'ee\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9 (20 \'c0\'e5, \'b8\'de\'b8\'f0\'b8\'ae \'b0\'fc\'b8\'ae \'c0\'af\'b4\'d6 \'c2\'fc\'c1\'b6).\par
\par
For more information on the MFENCE operation, refer to the section, C66x CPU Instruction\par
Set of the TMS320C66x DSP CPU and Instruction Set ).\par
MFENCE \'b5\'bf\'c0\'db\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba "TMS320C66x DSP\'c0\'c7 CPU\'bf\'cd \'b8\'ed\'b7\'c9\'be\'ee \'bc\'bc\'c6\'ae\'c0\'c7 C66x CPU \'b8\'ed\'b7\'c9\'be\'ee \'bc\'bc\'c6\'ae"\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
In addition, the DSP_MMU0 traffic can be aborted in case of a lockup via the DSP_SYS_MMU_CONFIG [8] MMU0_ABORT bit.\par
\'b6\'c7\'c7\'d1 DSP_SYS_MMU_CONFIG [8] MMU0_ABORT \'ba\'f1\'c6\'ae\'b8\'a6 \'c5\'eb\'c7\'d8 \'c0\'e1\'b1\'dd\'c0\'cc \'b9\'df\'bb\'fd\'c7\'d2 \'b0\'e6\'bf\'ec DSP_MMU0 \'c6\'ae\'b7\'a1\'c7\'c8\'c0\'bb \'c1\'df\'b4\'dc \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
In other words, this bit can be used to clear a hang condition that may occur if the DSP_MMU0 encounters a page fault that cannot be serviced.\par
\'c1\'ef,\'c0\'cc \'ba\'f1\'c6\'ae\'b4\'c2 DSP_MMU0\'c0\'cc \'bc\'ad\'ba\'f1\'bd\'ba \'c7\'d2 \'bc\'f6\'be\'f8\'b4\'c2 \'c6\'e4\'c0\'cc\'c1\'f6 \'c6\'fa\'c6\'ae\'b8\'a6 \'b8\'b8\'b3\'aa\'b4\'c2 \'b0\'e6\'bf\'ec \'b9\'df\'bb\'fd\'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'c2 \'c1\'df\'b4\'dc \'c1\'b6\'b0\'c7\'c0\'bb \'c1\'a6\'b0\'c5\'c7\'cf\'b4\'c2 \'b5\'a5 \'bb\'e7\'bf\'eb\'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
For more information on device DSP_MMU0 functionality and register settings, refer to the Section 20.3, MMU Functional Description and Section 20.5, MMU Register Manual, in the chapter, Memory Management Units, respectively.\par
\'c0\'e5\'c4\'a1 DSP_MMU0 \'b1\'e2\'b4\'c9\'b0\'fa \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'bc\'b3\'c1\'a4\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'c1\'a6 20.3 \'c7\'d7 "MMU \'b1\'e2\'b4\'c9 \'bc\'b3\'b8\'ed"\'b9\'d7 \'c1\'a6 20.5 \'c7\'d7 "MMU \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'bc\'b3\'b8\'ed\'bc\'ad"\'c0\'c7 "\'b8\'de\'b8\'f0\'b8\'ae \'b0\'fc\'b8\'ae \'c0\'af\'b4\'d6"\'c0\'e5\'c0\'bb \'b0\'a2\'b0\'a2 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.7 DSP Integrated EDMA Subsystem\par
5.3.7 DSP \'c5\'eb\'c7\'d5 EDMA \'c7\'cf\'ba\'ce \'c1\'b6\'c1\'f7\par
\par
This section represents an overview of the DSP integrated EDMA functionalities, as well as the subsystem level and device related register controls.\par
\'c0\'cc \'bc\'bd\'bc\'c7\'bf\'a1\'bc\'ad\'b4\'c2 DSP \'c5\'eb\'c7\'d5 EDMA \'b1\'e2\'b4\'c9\'c0\'c7 \'b0\'b3\'bf\'e4\'bf\'cd \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b7\'b9\'ba\'a7 \'b9\'d7 \'c0\'e5\'c4\'a1 \'b0\'fc\'b7\'c3 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'c1\'a6\'be\'ee\'bf\'a1 \'b4\'eb\'c7\'d8 \'bc\'b3\'b8\'ed\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
 For more details on the EDMA functionalities and programming registers, refer to the Section 16.2, Enhanced DMA.\par
EDMA \'b1\'e2\'b4\'c9 \'b9\'d7 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a1\'b9\'d6 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'bc\'bd\'bc\'c7 16.2, \'c7\'e2\'bb\'f3\'b5\'c8 DMA\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.7.1 DSP EDMA Overview\par
5.3.7.1 DSP EDMA \'b0\'b3\'b0\'fc\par
\par
The enhanced-DMA subsystem which is part of the DSP1 (DSP1_EDMA) and the DSP2 (DSP2_EDMA)\par
subsystems is the primary DMA engine for transfers between system memory (DDR and/or L3_MAIN\par
SRAM) and DSP internal memories (L1s and L2).\par
DSP1 (DSP1_EDMA) \'b9\'d7 DSP2 (DSP2_EDMA) \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'c0\'cf\'ba\'ce\'c0\'ce \'c7\'e2\'bb\'f3\'b5\'c8 DMA \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'ba \'bd\'c3\'bd\'ba\'c5\'db \'b8\'de\'b8\'f0\'b8\'ae (DDR \'b9\'d7 / \'b6\'c7\'b4\'c2 L3_MAIN SRAM)\'bf\'cd DSP \'b3\'bb\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae (L1 \'b9\'d7 L2) \'b0\'a3\'c0\'c7 \'c0\'fc\'bc\'db\'c0\'bb\'c0\'a7\'c7\'d1 \'b1\'e2\'ba\'bb DMA \'bf\'a3\'c1\'f8\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
The Channel Controller - DSP_EDMA_CC serves as the \ldblquote user interface\rdblquote  of the DSP_EDMA.\par
\'c3\'a4\'b3\'ce \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af - DSP_EDMA_CC\'b4\'c2 DSP_EDMA\'c0\'c7 "\'bb\'e7\'bf\'eb\'c0\'da \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba"\'bf\'aa\'c7\'d2\'c0\'bb\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The two Transfer Controllers - DSP_EDMA_TC0 and DSP_EDMA_TC1 serve as the data transfer engines of the\par
DSP_EDMA.\par
\'b5\'ce \'b0\'b3\'c0\'c7 \'c0\'fc\'bc\'db \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (DSP_EDMA_TC0 \'b9\'d7 DSP_EDMA_TC1)\'b4\'c2 DSP_EDMA\'c0\'c7 \'b5\'a5\'c0\'cc\'c5\'cd \'c0\'fc\'bc\'db \'bf\'a3\'c1\'f8\'c0\'b8\'b7\'ce \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The C66x CPU tipically programs the Channel Controller, which in turn submits Transfer Requests (TR) to the appropriate Transfer Controller. Interrupts are posted in the DSP_EDMA_CC upon transfer completion (if requested), and signaled to the C66x.\par
C66x CPU\'b4\'c2 \'c3\'a4\'b3\'ce \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b8\'a6 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5\'c7\'cf\'bf\'a9 \'c3\'a4\'b3\'ce \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b0\'a1 \'c0\'fc\'bc\'db \'bf\'e4\'c3\'bb (TR)\'c0\'bb \'c0\'fb\'c0\'fd\'c7\'d1 \'c0\'fc\'bc\'db \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af\'b7\'ce \'c0\'fc\'bc\'db\'c7\'d5\'b4\'cf\'b4\'d9. \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b4\'c2 \'c0\'fc\'bc\'db \'bf\'cf\'b7\'e1\'bd\'c3 (\'bf\'e4\'c3\'bb \'b5\'c8 \'b0\'e6\'bf\'ec) DSP_EDMA_CC\'bf\'a1 \'b0\'d4\'bd\'c3\'b5\'c7\'b0\'ed C66x\'bf\'a1 \'bd\'c5\'c8\'a3\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The EDMA TC completion interrupt is not supported/connected.\par
EDMA TC \'bf\'cf\'b7\'e1 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b4\'c2 \'c1\'f6\'bf\'f8 / \'bf\'ac\'b0\'e1\'b5\'c7\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The DSP_EDMA is primarily used to perform block transfers between DSP C66x CorePac memories (mostly L2 memory) and system memory (mostly DDR or L3 SRAM).\par
DSP_EDMA\'b4\'c2 \'c1\'d6\'b7\'ce DSP C66x CorePac \'b8\'de\'b8\'f0\'b8\'ae (\'c1\'d6\'b7\'ce L2 \'b8\'de\'b8\'f0\'b8\'ae)\'bf\'cd \'bd\'c3\'bd\'ba\'c5\'db \'b8\'de\'b8\'f0\'b8\'ae (\'c1\'d6\'b7\'ce DDR \'b6\'c7\'b4\'c2 L3 SRAM) \'b0\'a3\'c0\'c7 \'ba\'ed\'b7\'cf \'c0\'fc\'bc\'db\'c0\'bb \'bc\'f6\'c7\'e0\'c7\'cf\'b4\'c2 \'b5\'a5 \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The DSP_EDMA is configured with 2 Queues (in the CC).\par
DSP_EDMA\'b4\'c2 CC\'bf\'a1\'bc\'ad 2 \'b0\'b3\'c0\'c7 \'c5\'a5\'b7\'ce \'b1\'b8\'bc\'ba\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Two DSP_EDMA traffic controllers (TC) offer high performance and preemptability of transfers.\par
\'b5\'ce \'b0\'b3\'c0\'c7 DSP_EDMA \'c6\'ae\'b7\'a1\'c7\'c8 \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af (TC)\'b4\'c2 \'b3\'f4\'c0\'ba \'bc\'ba\'b4\'c9\'b0\'fa \'c0\'fc\'bc\'db \'bf\'ec\'bc\'b1 \'bc\'f8\'c0\'a7\'b8\'a6 \'c1\'a6\'b0\'f8\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
For typical use cases, it is expected that low latency/small payload transfers ) use Queue0/TC0 and high bandwidth/large payload transfers (e.g., DDR on L3_MAIN or DSP local L2 SRAM) will use Queue1/TC1.\par
\'c0\'cf\'b9\'dd\'c0\'fb\'c0\'ce \'bb\'e7\'bf\'eb\'c0\'c7 \'b0\'e6\'bf\'ec Queue0 / TC0 \'b9\'d7 \'b3\'f4\'c0\'ba \'b4\'eb\'bf\'aa\'c6\'f8 / \'b4\'eb\'bf\'eb\'b7\'ae \'c6\'e4\'c0\'cc\'b7\'ce\'b5\'e5 \'c0\'fc\'bc\'db (\'bf\'b9 : L3_MAIN \'b6\'c7\'b4\'c2 DSP \'b7\'ce\'c4\'c3 L2 SRAM\'c0\'c7 DDR)\'c0\'ba Queue1 / TC1\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'cf\'b9\'c7\'b7\'ce \'b4\'eb\'b1\'e2 \'bd\'c3\'b0\'a3\'c0\'cc \'c0\'db\'b0\'c5\'b3\'aa \'c6\'e4\'c0\'cc\'b7\'ce\'b5\'e5 \'c0\'fc\'bc\'db\'c0\'cc \'c0\'fb\'c0\'bb \'b0\'cd\'c0\'b8\'b7\'ce \'bf\'b9\'bb\'f3\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
DSP_EDMA_CC configuration in the device features :\par
\'c0\'e5\'c4\'a1\'c0\'c7 DSP_EDMA_CC \'b1\'b8\'bc\'ba :\par
\par
\bullet  64x EDMA channels\par
\bullet  64x EDMA \'c3\'a4\'b3\'ce\par
\par
\bullet  8x QDMA channels\par
\bullet  8x QDMA \'c3\'a4\'b3\'ce\par
\par
\bullet  64x interrupt channels\par
\bullet  64x \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'a4\'b3\'ce\par
\par
\bullet  128x PaRAM entries\par
\bullet  128x PaRAM \'c7\'d7\'b8\'f1\par
\par
\bullet  2x Event Queues\par
\bullet  2x \'c0\'cc\'ba\'a5\'c6\'ae \'b4\'eb\'b1\'e2\'bf\'ad\par
\par
\bullet  2x Traffic controllers\par
\bullet  \'c6\'ae\'b7\'a1\'c7\'c8 \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af 2 \'b0\'b3\par
\par
\bullet memory protection support\par
\bullet  \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'c1\'f6\'bf\'f8\par
\par
\bullet channel mapping capability\par
\bullet  \'c3\'a4\'b3\'ce \'b8\'c5\'c7\'ce \'b1\'e2\'b4\'c9\par
\par
\bullet 8x memory protected and Shadow Regions\par
\bullet  8x \'b8\'de\'b8\'f0\'b8\'ae \'ba\'b8\'c8\'a3 \'b9\'d7 \'b1\'d7\'b8\'b2\'c0\'da \'bf\'b5\'bf\'aa\par
\par
DSP_EDMA_TC0/TC1 configuration in the device features :\par
\'c0\'e5\'c4\'a1\'c0\'c7 DSP_EDMA_TC0 / TC1 \'b1\'b8\'bc\'ba \'b1\'e2\'b4\'c9 :\par
\par
\bullet  2048 Byte FIFO support\par
\bullet  2048 \'b9\'d9\'c0\'cc\'c6\'ae FIFO \'c1\'f6\'bf\'f8\par
\par
\bullet  multitag support\par
\bullet  \'b8\'d6\'c6\'bc \'c5\'c2\'b1\'eb \'c1\'f6\'bf\'f8\par
\par
\bullet  16-bit data bus\par
\bullet  16 \'ba\'f1\'c6\'ae \'b5\'a5\'c0\'cc\'c5\'cd \'b9\'f6\'bd\'ba\par
\par
\bullet  4-level destination register depth\par
\bullet  4 \'b7\'b9\'ba\'a7 \'b4\'eb\'bb\'f3 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'b1\'ed\'c0\'cc\par
\par
\bullet  7-bit address for internal FIFOs\par
\bullet  \'b3\'bb\'ba\'ce FIFO \'bf\'eb 7 \'ba\'f1\'c6\'ae \'c1\'d6\'bc\'d2\par
\par
\bullet  16 IDs for Read commands\par
\bullet  \'c0\'d0\'b1\'e2 \'b8\'ed\'b7\'c9\'c0\'c7 ID 16 \'b0\'b3\par
\par
\bullet  16 IDs for Write commands\par
\bullet  \'be\'b2\'b1\'e2 \'b8\'ed\'b7\'c9\'bf\'a1 \'b4\'eb\'c7\'d1 16 \'b0\'b3\'c0\'c7 ID\par
\par
NOTE: The device DSP integrated EDMA controller instances (DSP_EDMA_CC, DSP_EDMA_TC0 and DSP_EDMA_TC1) are functionally identical with the device EDMA controller instances (EDMA_TPCC, EDMA_TPTC0 and EDMA_TPTC1).\par
\'c2\'fc\'b0\'ed : \'c0\'e5\'c4\'a1 DSP \'c5\'eb\'c7\'d5 EDMA \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba (DSP_EDMA_CC, DSP_EDMA_TC0 \'b9\'d7 DSP_EDMA_TC1)\'b4\'c2 \'c0\'e5\'c4\'a1 EDMA \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba (EDMA_TPCC, EDMA_TPTC0 \'b9\'d7 EDMA_TPTC1)\'bf\'cd \'b1\'e2\'b4\'c9\'c0\'fb\'c0\'b8\'b7\'ce \'b5\'bf\'c0\'cf\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The only difference is that the DSP_EDMA instances are located at different physical addresses.\par
\'c0\'af\'c0\'cf\'c7\'d1 \'c2\'f7\'c0\'cc\'c1\'a1\'c0\'ba DSP_EDMA \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba\'b0\'a1 \'b4\'d9\'b8\'a5 \'b9\'b0\'b8\'ae\'c0\'fb \'c1\'d6\'bc\'d2\'bf\'a1 \'c0\'a7\'c4\'a1\'c7\'d1\'b4\'d9\'b4\'c2 \'b0\'cd\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
For more details on the DSP_EDMA_CC, DSP_EDMA_TC0 and DSP_EDMA_TC1 controllers functionalities, refer to Section 16.2.5, EDMA Controller Functional Description, in Section 16.2, Enhanced DMA.\par
DSP_EDMA_CC, DSP_EDMA_TC0 \'b9\'d7 DSP_EDMA_TC1 \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'b1\'e2\'b4\'c9\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'bc\'bd\'bc\'c7 16.2, \'c7\'e2\'bb\'f3\'b5\'c8 DMA\'c0\'c7 \'bc\'bd\'bc\'c7 16.2.5, EDMA \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'b1\'e2\'b4\'c9 \'bc\'b3\'b8\'ed\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
The DSP_EDMA instances, their corresponding registers summary and descriptions are covered in the Section 16.2.8, EDMA Register Manual of the Section 16.2, Enhanced DMA.\par
DSP_EDMA \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba, \'c7\'d8\'b4\'e7 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'bf\'e4\'be\'e0 \'b9\'d7 \'bc\'b3\'b8\'ed\'c0\'ba \'bc\'bd\'bc\'c7 16.2, \'c7\'e2\'bb\'f3\'b5\'c8 DMA\'c0\'c7 \'bc\'bd\'bc\'c7 16.2.8, EDMA \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'bc\'b3\'b8\'ed\'bc\'ad\'bf\'a1\'bc\'ad \'b4\'d9\'b7\'ec\'b4\'cf\'b4\'d9.\par
\par
5.3.7.2 DSP System and Device Level Settings of DSP EDMA\par
5.3.7.2 DSP EDMA\'c0\'c7 DSP \'bd\'c3\'bd\'ba\'c5\'db \'b9\'d7 \'c0\'e5\'c4\'a1 \'b7\'b9\'ba\'a7 \'bc\'b3\'c1\'a4\par
\par
DSP_EDMA traffic TC0 and TC1 controllers "Active" or "Idle" status: can be monitored in\par
DSP_SYSTEM located :\par
DSP_EDMA \'c6\'ae\'b7\'a1\'c7\'c8 TC0 \'b9\'d7 TC1 \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af "Active"\'b6\'c7\'b4\'c2 "Idle"\'bb\'f3\'c5\'c2 : DSP_SYSTEM \'c0\'a7\'c4\'a1\'bf\'a1\'bc\'ad \'b8\'f0\'b4\'cf\'c5\'cd\'b8\'b5 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  DSP_SYS_STAT[1] TC0_STAT bit\par
\par
\bullet  DSP_SYS_STAT[2] TC1_STAT bit\par
\par
The default burst size for both the DSP_EDMA_TC0 and DSP_EDMA_TC1 can be defined in DSP_SYSTEM register.\par
DSP_EDMA_TC0 \'b9\'d7 DSP_EDMA_TC1\'c0\'c7 \'b1\'e2\'ba\'bb \'b9\'f6\'bd\'ba\'c6\'ae \'c5\'a9\'b1\'e2\'b4\'c2 DSP_SYSTEM \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'c1\'a4\'c0\'c7 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\'c0\'cc\'b0\'cd\'c0\'ba \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a1\'b9\'d6\'c0\'bb \'c5\'eb\'c7\'d8 \'b4\'de\'bc\'ba\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
This is achieved via programming :\par
\'c0\'cc\'b0\'cd\'c0\'ba \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a1\'b9\'d6\'c0\'bb \'c5\'eb\'c7\'d8 \'b4\'de\'bc\'ba\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
\bullet  DSP_SYS_BUS_CONFIG [1:0] TC0_DBS\par
\par
\bullet  DSP_SYS_BUS_CONFIG [5:4] TC1_DBS\par
\par
There are also other DSP_EDMA controls associated with DSP_NoC interconnect pressure settings.\par
For more details, refer to the Section 5.3.8.\par
DSP_NoC \'c0\'ce\'c5\'cd\'c4\'bf\'b3\'d8\'c6\'ae \'be\'d0\'b7\'c2 \'bc\'b3\'c1\'a4\'b0\'fa \'b0\'fc\'b7\'c3\'b5\'c8 \'b4\'d9\'b8\'a5 DSP_EDMA \'c4\'c1\'c6\'ae\'b7\'d1\'b5\'b5 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.8 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
The 3 error events associated with the DSP_EDMA_CC, DSP_EDMA_TC0 and DSP_EDMA_TC1 are exported outside the DSP C66x CorePac in the subsystem, and are able to trigger the ERRINT_IRQ aggregated interrupt output.\par
DSP_EDMA_CC, DSP_EDMA_TC0 \'b9\'d7 DSP_EDMA_TC1\'b0\'fa \'b0\'fc\'b7\'c3\'b5\'c8 3 \'b0\'a1\'c1\'f6 \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 DSP C66x CorePac \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'b0\'ed ERRINT_IRQ \'c1\'fd\'b0\'e8 \'b5\'c8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'e2\'b7\'c2\'c0\'bb \'c6\'ae\'b8\'ae\'b0\'c5 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
See also corresponding "tpcc_errint_level", "tptc_errint0_level" and "tptc_errint1_level" events, respectively in the Table 5-5.\par
\'b6\'c7\'c7\'d1 \'c7\'a5 5-5\'c0\'c7 \'c7\'d8\'b4\'e7 "tpcc_errint_level", "tptc_errint0_level"\'b9\'d7 "tptc_errint1_level"\'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: The DSP_EDMA_CC, DSP_EDMA_TC0 and DSP_EDMA_TC1 events are NOT exported outside DSP subsystem.\par
\'c2\'fc\'b0\'ed : DSP_EDMA_CC, DSP_EDMA_TC0 \'b9\'d7 DSP_EDMA_TC1 \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
 However they are merged (OR-ed) along with other error event sources within the DSP subsystem to produce a single ERRINT_IRQ interrupt exported outside the DSP subsystem.\par
\'b1\'d7\'b7\'af\'b3\'aa \'c0\'cc\'b5\'e9\'c0\'ba DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'bf\'a1\'bc\'ad \'b4\'d9\'b8\'a5 ERRINT_IRQ \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'c0\'c7 \'b4\'d9\'b8\'a5 \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae \'bc\'d2\'bd\'ba\'bf\'cd \'c7\'d4\'b2\'b2 \'ba\'b4\'c7\'d5 (OR-ed)\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
For more details on ERRINT_IRQ generation and asscoiated event registers at DSP_SYSTEM level, refer to the Section 5.3.4.2.2.\par
ERRINT_IRQ \'bb\'fd\'bc\'ba \'b9\'d7 DSP_SYSTEM \'b7\'b9\'ba\'a7\'c0\'c7 asscoiated \'c0\'cc\'ba\'a5\'c6\'ae \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.4.2.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
The DSP_SYSTEM logic is assigned to route the external DMA requests to the EDMA hardware request\par
inputs.\par
DSP_SYSTEM \'b7\'ce\'c1\'f7\'c0\'ba \'bf\'dc\'ba\'ce DMA \'bf\'e4\'c3\'bb\'c0\'bb EDMA \'c7\'cf\'b5\'e5\'bf\'fe\'be\'ee \'bf\'e4\'c3\'bb \'c0\'d4\'b7\'c2\'c0\'b8\'b7\'ce \'b6\'f3\'bf\'ec\'c6\'c3\'c7\'cf\'b5\'b5\'b7\'cf \'c1\'f6\'c1\'a4\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
Additionally, EDMA events can conditionally wake-up the DSP system from a low power mode, via\par
software enabling DSP_SYSTEM MWakeup handshake with the device PRCM.\par
\'b6\'c7\'c7\'d1, EDMA \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 DSP PROM\'bf\'a1\'bc\'ad DSP_SYSTEM MWakeup \'c7\'da\'b5\'e5 \'bc\'ce\'c0\'cc\'c5\'a9\'b8\'a6 \'c8\'b0\'bc\'ba\'c8\'ad\'c7\'cf\'b4\'c2 \'bc\'d2\'c7\'c1\'c6\'ae\'bf\'fe\'be\'ee\'b8\'a6 \'c5\'eb\'c7\'d8 DSP \'bd\'c3\'bd\'ba\'c5\'db\'c0\'bb \'c0\'fa\'c0\'fc\'b7\'c2 \'b8\'f0\'b5\'e5\'bf\'a1\'bc\'ad \'c1\'b6\'b0\'c7\'ba\'ce\'b7\'ce \'bf\'fe\'c0\'cc\'c5\'a9 \'be\'f7\'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
 This mechanism is described in the Section 5.3.5.\par
\'c0\'cc \'b8\'de\'c4\'bf\'b4\'cf\'c1\'f2\'c0\'ba 5.3.5 \'c0\'fd\'bf\'a1 \'bc\'b3\'b8\'ed\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The programmable muxing of various external DMA request sources to the DSP EDMA.\par
\'b4\'d9\'be\'e7\'c7\'d1 EDMA \'bf\'e4\'c3\'bb \'bc\'d2\'bd\'ba\'b8\'a6 DSP EDMA\'bf\'a1 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a1\'b9\'d6 \'b0\'a1\'b4\'c9\'c7\'cf\'b0\'d4 \'b4\'d9\'c1\'df\'c8\'ad\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
DMA_DSP1_DREQ_x and DMA_DSP2_DREQ_x input lines (where x=0 to 19) is covered in the Section 18.4.6.5, DMA_CROSSBAR Module Functional Description, of the Chapter 18, Control Module.\par
DMA_DSP1_DREQ_x \'b9\'d7 DMA_DSP2_DREQ_x \'c0\'d4\'b7\'c2 \'b6\'f3\'c0\'ce (x = 0-19)\'c0\'ba 18 \'c0\'e5, \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2\'c0\'c7 18.4.6.5 \'c0\'fd, DMA_CROSSBAR \'b8\'f0\'b5\'e2 \'b1\'e2\'b4\'c9 \'bc\'b3\'b8\'ed\'bf\'a1\'bc\'ad \'b4\'d9\'b7\'ec\'b4\'cf\'b4\'d9.\par
\par
DSP1/DSP2 subsystem external DMA request sources : For the default DSP1 / DSP2 external DMA request sources, routed via the device DMA_CROSSBAR to the DSP1_EDMA / DSP2_EDMA channel controller inputs (DMA_DSP1_DREQ_i / DMA_DSP2_DREQ_i), respectively, refer to the Section 5.3.5.\par
DSP1 / DSP2 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce DMA \'bf\'e4\'c3\'bb \'bc\'d2\'bd\'ba : \'c0\'e5\'c4\'a1 DMA_CROSSBAR\'b8\'a6 \'c5\'eb\'c7\'d8 DSP1_EDMA / DSP2_EDMA \'c3\'a4\'b3\'ce \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'c0\'d4\'b7\'c2 (DMA_DSP1_DREQ_i / DMA_DSP2_DREQ_i)\'c0\'b8\'b7\'ce \'b0\'a2\'b0\'a2 \'b6\'f3\'bf\'ec\'c6\'c3\'b5\'c7\'b4\'c2 \'b1\'e2\'ba\'bb DSP1 / DSP2 \'bf\'dc\'ba\'ce DMA \'bf\'e4\'c3\'bb \'bc\'d2\'bd\'ba\'c0\'c7 \'b0\'e6\'bf\'ec \'bc\'bd\'bc\'c7 5.3.5\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.8 DSP L2 interconnect Network\par
5.3.8 DSP L2 \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 \'b3\'d7\'c6\'ae\'bf\'f6\'c5\'a9\par
\par
A 128-bit level 2 (L2) Interconnect from Arteris - FlexNoC \'a2\'e7 is instantiated in the DSP subsystem, outside the DSP C66x CorePac.\par
Arteris\'c0\'c7 128 \'ba\'f1\'c6\'ae L2 (Level 2) \'c0\'ce\'c5\'cd\'c4\'bf\'b3\'d8\'c6\'ae - FlexNoC \'a2\'e7\'b4\'c2 DSP C66x CorePac \'bf\'dc\'ba\'ce\'c0\'c7 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'bf\'a1\'bc\'ad \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba\'c8\'ad\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
It is signified as "DSP_NoC" throughout this chapter.\par
\'c0\'cc \'c0\'e5 \'c0\'fc\'c3\'bc\'bf\'a1\'bc\'ad "DSP_NoC"\'b7\'ce \'c7\'a5\'bd\'c3\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
NOTE: The C66x master MDMA data does NOT flow through the DSP_NoC.\par
\'c2\'fc\'b0\'ed : C66x \'b8\'b6\'bd\'ba\'c5\'cd MDMA \'b5\'a5\'c0\'cc\'c5\'cd\'b4\'c2 DSP_NoC\'b8\'a6 \'c5\'eb\'c7\'d8 \'c8\'e5\'b8\'a3\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The system and local initiators on DSP_NoC are as follows :\par
DSP_NoC\'c0\'c7 \'bd\'c3\'bd\'ba\'c5\'db \'b9\'d7 \'b7\'ce\'c4\'c3 \'c3\'ca\'b1\'e2\'c8\'ad \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5\'c0\'ba \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  local C66x CPU 32-bit CFG master port which traffic is split via DSP_NoC fabric into several\par
configuration target traffics inside and outside the DSP subsystem.\par
\bullet  \'b7\'ce\'c4\'c3 C66x CPU 32 \'ba\'f1\'c6\'ae CFG \'b8\'b6\'bd\'ba\'c5\'cd \'c6\'f7\'c6\'ae. \'c6\'ae\'b7\'a1\'c7\'c8\'c0\'ba DSP_NoC \'c6\'d0\'ba\'ea\'b8\'af\'c0\'bb \'c5\'eb\'c7\'d8 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'ba\'ce \'b9\'d7 \'bf\'dc\'ba\'ce\'c0\'c7 \'bf\'a9\'b7\'af \'b1\'b8\'bc\'ba \'b4\'eb\'bb\'f3 \'c6\'ae\'b7\'a1\'c7\'c8\'c0\'b8\'b7\'ce \'ba\'d0\'c7\'d2\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
\bullet  SDMA initiator port on DSP_NoC which conveys accesses towards DSP Memories and memory- mapped registers initiated outside the DSP subsystem via the L3_MAIN interconnect.\par
\bullet  DSP_NoC\'c0\'c7 SDMA \'c3\'ca \'b1\'e2\'c0\'da \'c6\'f7\'c6\'ae \'b4\'c2 L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1\'c0\'bb \'c5\'eb\'c7\'d8 DSP subsystem \'bf\'dc\'ba\'ce\'bf\'a1\'bc\'ad \'bd\'c3\'c0\'db\'b5\'c8 DSP \'b8\'de\'b8\'f0\'b8\'ae \'b9\'d7 \'b8\'de\'b8\'f0\'b8\'ae \'b8\'ca \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b7\'ce\'c0\'c7 \'be\'d7\'bc\'bc\'bd\'ba\'b8\'a6 \'c0\'fc\'b4\'de\'c7\'d1\'b4\'d9.\par
\par
\bullet  EDMA traffic controllers - TC0 read / write initiator ports\par
\bullet  EDMA \'c6\'ae\'b7\'a1\'c7\'c8 \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af - TC0 \'c0\'d0\'b1\'e2 / \'be\'b2\'b1\'e2 \'b0\'b3\'bd\'c3 \'c0\'da \'c6\'f7\'c6\'ae\par
\par
\bullet  EDMA traffic controllers - TC1 read / write initiator ports\par
\bullet  EDMA \'c6\'ae\'b7\'a1\'c7\'c8 \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af - TC1 \'c0\'d0\'b1\'e2 / \'be\'b2\'b1\'e2 \'b0\'b3\'bd\'c3 \'c0\'da \'c6\'f7\'c6\'ae\par
\par
NOTE: The DSP_ICFG space is not visible to SDMA initiators (DSP_EDMA or DSP hosts on\par
L3_MAIN ) with CFG traffic.\par
\'c2\'fc\'b0\'ed : DSP_ICFG \'b0\'f8\'b0\'a3\'c0\'ba CFG \'c6\'ae\'b7\'a1\'c7\'c8\'c0\'cc\'c0\'d6\'b4\'c2 SDMA \'c3\'ca\'b1\'e2\'c8\'ad \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 (DSP_EDMA \'b6\'c7\'b4\'c2 L3_MAIN\'c0\'c7 DSP \'c8\'a3\'bd\'ba\'c6\'ae)\'bf\'a1\'bc\'ad \'ba\'bc \'bc\'f6 \'be\'f8\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
The targets on the DSP_NoC are as follows :\par
DSP_NoC\'c0\'c7 \'c5\'b8\'b0\'d9\'c0\'ba \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  DSP C66x CorePac SDMA port\par
\bullet  DSP C66x CorePac SDMA \'c6\'f7\'c6\'ae\par
\par
\bullet  Internal CFG targets on the DSP_NoC :\par
\bullet  DSP_NoC\'c0\'c7 \'b3\'bb\'ba\'ce CFG \'c5\'b8\'b0\'d9 :\par
\par
\endash  DSP_MMU0 Cfg\par
\par
\endash  DSP_MMU1 Cfg\par
\par
\endash  DSP_SYSTEM Cfg\par
\par
\endash  DSP_EDMA_CC Cfg\par
\par
\endash  DSP_EDMA_TC0 Cfg\par
\par
\endash  DSP_EDMA_TC1 Cfg\par
\par
\bullet  32-bit CFG port on L3_MAIN (it acts as master on the L3_MAIN)\par
\bullet  L3_MAIN\'c0\'c7 32 \'ba\'f1\'c6\'ae CFG \'c6\'f7\'c6\'ae (L3_MAIN\'bf\'a1\'bc\'ad \'b8\'b6\'bd\'ba\'c5\'cd \'bf\'aa\'c7\'d2\'c0\'bb \'c7\'d4)\par
\par
\bullet  EDMA Target port which conveys EDMA bidi transfers outside the DSP (through or bypassing\par
DSP_MMU1).\par
EDMA bidi\'b8\'a6 DSP \'bf\'dc\'ba\'ce\'b7\'ce \'c0\'fc\'b4\'de\'c7\'cf\'b4\'c2 EDMA Target \'c6\'f7\'c6\'ae (DSP_MMU1\'c0\'bb \'c5\'eb\'b0\'fa\'c7\'cf\'b0\'c5\'b3\'aa \'bf\'ec\'c8\'b8).\par
\par
The Table 5-8 summarizes the interconnections which can be established between DSP initiators and targets over the L2 DSP_NoC in the device.\par
\'c7\'a5 5-8\'c0\'ba \'c0\'e5\'c4\'a1\'c0\'c7 L2 DSP_NoC\'b8\'a6 \'c5\'eb\'c7\'d8 DSP \'c0\'cc\'b4\'cf\'bd\'c3\'bf\'a1\'c0\'cc\'c5\'cd\'bf\'cd \'c5\'b8\'b1\'ea \'bb\'e7\'c0\'cc\'bf\'a1 \'bc\'b3\'c1\'a4 \'b5\'c9 \'bc\'f6\'c0\'d6\'b4\'c2 \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1\'c0\'bb \'bf\'e4\'be\'e0 \'c7\'d1 \'b0\'cd\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
 In this table HW implemented interconnections are marked with an asterics.\par
\'c0\'cc \'c7\'a5\'bf\'a1\'bc\'ad HW \'b1\'b8\'c7\'f6 \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1\'c0\'ba asterics\'b7\'ce \'c7\'a5\'bd\'c3\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
A DSP_NoC error event (combination of several local to the interconnect events) is exported outside the DSP C66x CorePac in the subsystem, and can be enabled to trigger the ERRINT_IRQ aggregated interrupt output.\par
DSP_NoC \'bf\'c0\'b7\'f9 \'c0\'cc\'ba\'a5\'c6\'ae (\'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 \'c0\'cc\'ba\'a5\'c6\'ae\'bf\'a1 \'b4\'eb\'c7\'d8 \'b7\'ce\'c4\'c3\'bf\'a1\'c0\'d6\'b4\'c2 \'bf\'a9\'b7\'af \'b0\'b3\'c0\'c7 \'c1\'b6\'c7\'d5)\'b0\'a1 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 DSP C66x CorePac \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'b8\'e7 ERRINT_IRQ \'c1\'fd\'b0\'e8 \'b5\'c8 \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae \'c3\'e2\'b7\'c2\'c0\'bb \'c6\'ae\'b8\'ae\'b0\'c5 \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
See also corresponding "noc_errint_level" event in the Table 5-5.NOTE: The DSP_NoC event is NOT exported outside DSP subsystem.\par
\'c7\'a5 5-5\'c0\'c7 \'c7\'d8\'b4\'e7 "noc_errint_level"\'c0\'cc\'ba\'a5\'c6\'ae\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0. \'c2\'fc\'b0\'ed : DSP_NoC \'c0\'cc\'ba\'a5\'c6\'ae\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'bf\'dc\'ba\'ce\'b7\'ce \'b3\'bb\'ba\'b8\'b3\'bb\'c1\'f6\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
However it is merged (OR- ed) along with other error event sources within the DSP subsystem to produce a single ERRINT_IRQ interrupt exported outside the DSP subsystem.\par
\'b1\'d7\'b7\'af\'b3\'aa DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'ba\'ce\'bf\'a1\'bc\'ad \'b4\'d9\'b8\'a5 ERRINT_IRQ \'c0\'ce\'c5\'cd\'b7\'b4\'c6\'ae\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'c0\'c7 \'b4\'d9\'b8\'a5 \'bf\'a1\'b7\'af \'c0\'cc\'ba\'a5\'c6\'ae \'bc\'d2\'bd\'ba\'bf\'cd \'c7\'d4\'b2\'b2 \'ba\'b4\'c7\'d5 (OR)\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
For more details on ERRINT_IRQ generation and asscoiated event registers at DSP_SYSTEM level, refer to the Section 5.3.4.2.2.\par
ERRINT_IRQ \'bb\'fd\'bc\'ba \'b9\'d7 DSP_SYSTEM \'b7\'b9\'ba\'a7\'c0\'c7 asscoiated \'c0\'cc\'ba\'a5\'c6\'ae \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.4.2.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.8.1 DSP Public Firewall Settings\par
5.3.8.1 DSP \'b0\'f8\'b0\'b3 \'b9\'e6\'c8\'ad\'ba\'ae \'bc\'b3\'c1\'a4\par
\par
The DSP1 and DSP2 L2 Interconnect (DSP1_NoC and DSP2_NoC, respectively) implements two firewalls \endash  dsp firewall0 (DSP_FW0) is used to protect DSP_MMU0\rquote s configuration space (which includes the TLB) and dsp firewall1 is used to protect DSP_MMU1\rquote s configuration space (which includes the TLB).\par
DSP_MMU0\'c0\'c7 \'b1\'b8\'bc\'ba \'b0\'f8\'b0\'a3 (TLB\'b8\'a6 \'c6\'f7\'c7\'d4)\'b8\'a6 \'ba\'b8\'c8\'a3\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 dsp firewall0 (DSP_FW0)\'b0\'a1 \'bb\'e7\'bf\'eb\'b5\'c7\'b8\'e7 DSP_MMU1\'c0\'c7 \'b1\'b8\'bc\'ba \'b0\'f8\'b0\'a3 (TLB\'b8\'a6 \'c6\'f7\'c7\'d4)\'b8\'a6 \'ba\'b8\'c8\'a3\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 dsp firewall1\'b0\'a1 \'bb\'e7\'bf\'eb\'b5\'c7\'b0\'ed \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9 (DSP1_NoC \'b9\'d7 DSP2_NoC )).\par
\par
Access permission is based on the privilege level, domain, ConnID, and access types of a request.\par
\'be\'d7\'bc\'bc\'bd\'ba \'b1\'c7\'c7\'d1\'c0\'ba \'b1\'c7\'c7\'d1 \'bc\'f6\'c1\'d8, \'b5\'b5\'b8\'de\'c0\'ce, ConnID \'b9\'d7 \'bf\'e4\'c3\'bb\'c0\'c7 \'be\'d7\'bc\'bc\'bd\'ba \'c0\'af\'c7\'fc\'c0\'bb \'b1\'e2\'b9\'dd\'c0\'b8\'b7\'ce\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The default value of 0xFFFF_FFFF in the MRM region 0 permission registers:\par
MRM \'bf\'b5\'bf\'aa 0 \'b1\'c7\'c7\'d1 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'b1\'e2\'ba\'bb\'b0\'aa 0xFFFF_FFFF\'b4\'c2 \'b4\'d9\'c0\'bd\'b0\'fa \'b0\'b0\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
\bullet  L3_DSPSS_INIT_OCP_MMU0_CTRL_TARG_OCP_FW_503000_MRM_PERMISSION_REGION_LO W_0\par
\par
\bullet  L3_DSPSS_INIT_OCP_MMU0_CTRL_TARG_OCP_FW_503000_MRM_PERMISSION_REGION_HIG H_0\par
\par
\bullet  L3_DSPSS_INIT_OCP_MMU1_CTRL_TARG_OCP_FW_504000_MRM_PERMISSION_REGION_LO W_0\par
\par
\bullet  L3_DSPSS_INIT_OCP_MMU1_CTRL_TARG_OCP_FW_504000_MRM_PERMISSION_REGION_HIG H_0\par
\par
permits any requestor to access the DSP_MMU0 and DSP_MMU1 configuration space.\par
\'b8\'f0\'b5\'e7 \'bf\'e4\'c3\'bb\'c0\'da\'b0\'a1 DSP_MMU0 \'b9\'d7 DSP_MMU1 \'b1\'b8\'bc\'ba \'b0\'f8\'b0\'a3\'bf\'a1 \'be\'d7\'bc\'bc\'bd\'ba \'c7\'d2 \'bc\'f6\'c0\'d6\'b0\'d4\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
For more information on the access region definitions, public privilege access, public user access and\par
initiator permission settings, which are identical between DSP_NoC firewalls and L3_MAIN interconnect\par
firewalls, refer to the Section 14.2.3.7.3, L3_MAIN Firewall Functionality, in the, Section 14.2, L3_MAIN Interconnect.\par
DSP_NoC \'b9\'e6\'c8\'ad\'ba\'ae\'b0\'fa L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 \'b9\'e6\'c8\'ad\'ba\'ae\'b0\'a3\'bf\'a1 \'b5\'bf\'c0\'cf\'c7\'d1 \'be\'d7\'bc\'bc\'bd\'ba \'bf\'b5\'bf\'aa \'c1\'a4\'c0\'c7, \'b0\'f8\'bf\'eb \'b1\'c7\'c7\'d1 \'be\'d7\'bc\'bc\'bd\'ba, \'b0\'f8\'b0\'b3 \'bb\'e7\'bf\'eb\'c0\'da \'be\'d7\'bc\'bc\'bd\'ba \'b9\'d7 \'c3\'ca\'b1\'e2\'c8\'ad \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'bb\'e7\'bf\'eb \'b1\'c7\'c7\'d1 \'bc\'b3\'c1\'a4\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'bc\'bd\'bc\'c7 14.2.3.7.3, L3_MAIN \'b9\'e6\'c8\'ad\'ba\'ae \'b1\'e2\'b4\'c9 \'bc\'bd\'bc\'c7\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0. 14.2, L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1\par
\par
There are also several other DSP_NoC registers - 3_DSPSS_INIT_OCP_MMU0_CTRL_TARG_OCP_FW_503000_LOGICAL_ADDR_ERRLOG_0, L3_DSPSS_INIT_OCP_MMU0_CTRL_TARG_OCP_FW_503000_REGUPDATE_CONTROL used for error handling, firewall reset and other purposes. These are functionally identical with the corresponding L3_MAIN interconnect registers, described in the Section 14.2.3.8, L3_MAIN Interconnect Error Handling, in the Section 14.2, L3_MAIN Interconnect.\par
\'b6\'c7\'c7\'d1 \'bf\'c0\'b7\'f9 \'c3\'b3\'b8\'ae, \'b9\'e6\'c8\'ad\'ba\'ae \'c0\'e7\'bc\'b3\'c1\'a4 \'b9\'d7 \'b4\'d9\'b8\'a5 \'bf\'eb\'b5\'b5\'b7\'ce \'bb\'e7\'bf\'eb\'b5\'c7\'b4\'c2 3_DSPSS_INIT_OCP_MMU0_CTRL_TARG_OCP_FW_503000_LOGICAL_ADDR_ERRLOG_0, L3_DSPSS_INIT_OCP_MMU0_CTRL_TARG_OCP_FW_503000_REGUPDATE_CONTROL \'b5\'ee\'c0\'c7 \'b4\'d9\'b8\'a5 DSP_NoC \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b0\'a1 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9. \'c0\'cc\'b0\'cd\'b5\'e9\'c0\'ba 14.2 \'c0\'fd L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 \'bf\'c0\'b7\'f9 \'c3\'b3\'b8\'ae \'bc\'bd\'bc\'c7 14.2.3.8, L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1\'bf\'a1\'bc\'ad \'bc\'b3\'b8\'ed\'c7\'cf\'b4\'c2 \'c7\'d8\'b4\'e7 L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'cd \'b1\'e2\'b4\'c9\'bb\'f3 \'b5\'bf\'c0\'cf\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
The various firewall access control registers are part of the C66x CPU local accessible - DSP_FW_L2_NOC_CFG address space, and L3_MAIN initiators accessible DSP1/2_FW_L2_NOC_CFG configuration space.\par
\'b4\'d9\'be\'e7\'c7\'d1 \'b9\'e6\'c8\'ad\'ba\'ae \'be\'d7\'bc\'bc\'bd\'ba \'c1\'a6\'be\'ee \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 C66x CPU \'b7\'ce\'c4\'c3 \'be\'d7\'bc\'bc\'bd\'ba \'b0\'a1\'b4\'c9 \'ba\'ce\'ba\'d0 \'c0\'ce DSP_FW_L2_NOC_CFG \'c1\'d6\'bc\'d2 \'b0\'f8\'b0\'a3\'b0\'fa L3_MAIN \'c3\'ca\'b1\'e2\'c8\'ad \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'be\'d7\'bc\'bc\'bd\'ba \'b0\'a1\'b4\'c9 SDP1 / 2_FW_L2_NOC_CFG \'b1\'b8\'bc\'ba \'b0\'f8\'b0\'a3\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
 The corresponding MMU0 and MMU1 configuration space firewall registers ( DSP_FW0 starting at offset 0x0000_0000 , and DSP_FW1 starting at offset 0x0000_1000 ) are summarized and described in the Section 5.4.4.\par
\'c7\'d8\'b4\'e7 MMU0 \'b9\'d7 MMU1 \'b1\'b8\'bc\'ba \'b0\'f8\'b0\'a3 \'b9\'e6\'c8\'ad\'ba\'ae \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd (\'bf\'c0\'c7\'c1\'bc\'c2 0x0000_0000\'bf\'a1\'bc\'ad \'bd\'c3\'c0\'db\'c7\'cf\'b4\'c2 DSP_FW0 \'b9\'d7 \'bf\'c0\'c7\'c1\'bc\'c2 0x0000_1000\'bf\'a1\'bc\'ad \'bd\'c3\'c0\'db\'c7\'cf\'b4\'c2 DSP_FW1)\'b0\'a1 5.4.4 \'c0\'fd\'bf\'a1 \'bf\'e4\'be\'e0\'b5\'c7\'be\'ee \'bc\'b3\'b8\'ed\'b5\'c7\'be\'ee \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
5.3.8.2 DSP NoC Flag Mux and Error Log Registers\par
5.3.8.2 DSP NoC \'c7\'c3\'b7\'a1\'b1\'d7 \'b8\'d6\'c6\'bc\'c7\'c3\'b7\'ba\'bc\'ad \'b9\'d7 \'bf\'a1\'b7\'af \'b7\'ce\'b1\'d7 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\par
\par
The DSP_NoC registers (starting at offset >= 0x0000_4000) are used for error logging and flag muxing\par
purposes.\par
DSP_NoC \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd (offset> = 0x0000_4000\'bf\'a1\'bc\'ad \'bd\'c3\'c0\'db)\'b4\'c2 \'bf\'c0\'b7\'f9 \'b7\'ce\'b1\'eb \'b9\'d7 \'c7\'c3\'b7\'a1\'b1\'d7 \'b4\'d9\'c1\'df\'c8\'ad \'b8\'f1\'c0\'fb\'c0\'b8\'b7\'ce \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The status information stored in there can be used for example to resolve issues related to DSP_NoC access conflicts, for debug purposes, etc.\par
\'b0\'c5\'b1\'e2\'bf\'a1 \'c0\'fa\'c0\'e5\'b5\'c8 \'bb\'f3\'c5\'c2 \'c1\'a4\'ba\'b8\'b4\'c2 \'bf\'b9\'b8\'a6 \'b5\'e9\'be\'ee \'b5\'f0\'b9\'f6\'b1\'d7 \'b8\'f1\'c0\'fb\'c0\'b8\'b7\'ce DSP_NoC \'be\'d7\'bc\'bc\'bd\'ba \'c3\'e6\'b5\'b9\'b0\'fa \'b0\'fc\'b7\'c3\'b5\'c8 \'b9\'ae\'c1\'a6\'b8\'a6 \'c7\'d8\'b0\'e1\'c7\'cf\'b4\'c2 \'b5\'a5 \'bb\'e7\'bf\'eb\'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
For more information, refer to the Section 14.2.3.5, Flag Muxing, in the Section 14.2, L3_MAIN\par
Interconnect.\par
\'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'bc\'bd\'bc\'c7 14.2, L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1\'c0\'c7 14.2.3.5 \'c0\'fd, \'c7\'c3\'b7\'a1\'b1\'d7 \'b4\'d9\'c1\'df\'c8\'ad\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.8.3 DSP NoC Arbitration\par
5.3.8.3 DSP NoC \'c1\'df\'c0\'e7\par
\par
A pressure based arbitration is implemented for the DSP_NoC interconnect.\par
\'be\'d0\'b7\'c2 \'b1\'e2\'b9\'dd \'c1\'df\'c0\'e7\'b4\'c2 DSP_NoC \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1\'bf\'a1 \'b4\'eb\'c7\'d8 \'b1\'b8\'c7\'f6\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
A DSP_NoC local MFlag mechanism is used but it is SW controlled in the DSP_SYSTEM configuration\par
space.\par
DSP_NoC \'b7\'ce\'c4\'c3 MFlag \'b8\'de\'c4\'bf\'b4\'cf\'c1\'f2\'c0\'cc \'bb\'e7\'bf\'eb\'b5\'c7\'c1\'f6\'b8\'b8 DSP_SYSTEM \'b1\'b8\'bc\'ba \'b0\'f8\'b0\'a3\'bf\'a1\'bc\'ad SW\'b7\'ce \'c1\'a6\'be\'ee\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
This is done via the register DSP_SYS_BUS_CONFIG bitfields :\par
\'c0\'cc\'b4\'c2 DSP_SYS_BUS_CONFIG \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 bitfields\'b8\'a6 \'c5\'eb\'c7\'d8 \'bc\'f6\'c7\'e0\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
\bullet  TC0_L2PRES - for DSP_EDMA_TC0 pressure control\par
\par
\bullet  TC1_L2PRES - for DSP_EDMA_TC1 pressure control\par
\par
\bullet  CFG_L2PRES - for the DSP C66x CorePac 32-bit CFG pressure control\par
\par
\bullet  SDMA_L2PRES - for pressure control of the DSP system and L3_MAIN accesses targetting the DSP\par
C66x CorePac SDMA slave port The pressure for each port is signaled on a MFlag[1:0] bus and conveys a value of 0 (lowest), 1 (medium), or 3 (highest). A value of 0x2 is reserved/undefined.\par
\bullet  SDMA_L2PRES - DSP \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 \'be\'d0\'b7\'c2 \'c1\'a6\'be\'ee \'b9\'d7 DSP C66x CorePac SDMA \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea \'c6\'f7\'c6\'ae\'b8\'a6 \'b4\'eb\'bb\'f3\'c0\'b8\'b7\'ce\'c7\'cf\'b4\'c2 L3_MAIN \'be\'d7\'bc\'bc\'bd\'ba \'b0\'a2\'b0\'a2\'c0\'c7 \'c6\'f7\'c6\'ae\'bf\'a1 \'b4\'eb\'c7\'d1 \'be\'d0\'b7\'c2\'c0\'ba MFlag [1 : 0] \'b9\'f6\'bd\'ba\'bf\'a1\'bc\'ad \'bd\'c5\'c8\'a3\'b5\'c7\'b0\'ed 0 (\'c3\'d6\'c0\'fa), 1 (\'c1\'df\'b0\'a3 ) \'b6\'c7\'b4\'c2 3 (\'b0\'a1\'c0\'e5 \'b3\'f4\'c0\'bd)\'c0\'d4\'b4\'cf\'b4\'d9.\par
0x2 \'b0\'aa\'c0\'ba \'bf\'b9\'be\'e0 \'b5\'ca / \'c1\'a4\'c0\'c7\'b5\'c7\'c1\'f6 \'be\'ca\'c0\'bd\'c0\'d4\'b4\'cf\'b4\'d9.\par
\par
NOTE: The default pressure level for all ports is 0x0 and is recommended for most systems.\par
This results in round-robin arbitration across active requests.\par
\'c2\'fc\'b0\'ed : \'b8\'f0\'b5\'e7 \'c6\'f7\'c6\'ae\'c0\'c7 \'b1\'e2\'ba\'bb \'be\'d0\'b7\'c2 \'bc\'f6\'c1\'d8\'c0\'ba 0x0\'c0\'cc\'b8\'e7 \'b4\'eb\'ba\'ce\'ba\'d0\'c0\'c7 \'bd\'c3\'bd\'ba\'c5\'db\'bf\'a1\'bc\'ad \'b1\'c7\'c0\'e5\'b5\'cb\'b4\'cf\'b4\'d9.\par
\'c0\'cc\'b7\'ce \'c0\'ce\'c7\'d8 \'c8\'b0\'bc\'ba \'bf\'e4\'c3\'bb\'b0\'a3\'bf\'a1 \'b6\'f3\'bf\'ee\'b5\'e5 \'b7\'ce\'ba\'f3 \'c1\'df\'c0\'e7\'b0\'a1 \'b9\'df\'bb\'fd\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.3.9 DSP Boot Configuration\par
5.3.9 DSP \'ba\'ce\'c6\'c3 \'bc\'b3\'c1\'a4\par
\par
DSP1 subsystem boot vector input which defines the 22-bit DSP1 Boot Address is mapped to the device\par
core control module register CTRL_CORE_CONTROL_DSP1_RST_VECT[21:0] DSP1_RST_VECT bitfield.\par
22 \'ba\'f1\'c6\'ae DSP1 \'ba\'ce\'c6\'ae \'c1\'d6\'bc\'d2\'b8\'a6 \'c1\'a4\'c0\'c7\'c7\'cf\'b4\'c2 DSP1 \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'ba\'ce\'c6\'ae \'ba\'a4\'c5\'cd \'c0\'d4\'b7\'c2\'c0\'cc \'b5\'f0\'b9\'d9\'c0\'cc\'bd\'ba\'bf\'a1 \'b8\'ca\'c7\'ce \'b5\'ca\par
\'c4\'da\'be\'ee \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2\'c0\'ba CTRL_CORE_CONTROL_DSP1_RST_VECT [21 : 0] DSP1_RST_VECT \'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5\'b8\'a6 \'b5\'ee\'b7\'cf\'c7\'d1\'b4\'d9.\par
\par
DSP2 subsystem boot vector input which defines the 22-bit DSP2 Boot Address is mapped to the\par
device core control module register CTRL_CORE_CONTROL_DSP2_RST_VECT[21:0] DSP2_RST_VECT bitfield.\par
22 \'ba\'f1\'c6\'ae DSP2 \'ba\'ce\'c6\'c3 \'c1\'d6\'bc\'d2\'b8\'a6 \'c1\'a4\'c0\'c7\'c7\'cf\'b4\'c2 DSP2 \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'ba\'ce\'c6\'c3 \'ba\'a4\'c5\'cd \'c0\'d4\'b7\'c2\'c0\'ba \'c0\'e5\'c4\'a1 \'c4\'da\'be\'ee \'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd CTRL_CORE_CONTROL_DSP2_RST_VECT [21 : 0] DSP2_RST_VECT \'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
In general, the device MPU (Cortex-A15) host loads code to a given address location in the device system memory, sets the DSP1_RST_VECT / DSP2_RST_VECT bitfield to the address value, and then release the DSP1 / DSP2 from reset.\par
\'c0\'cf\'b9\'dd\'c0\'fb\'c0\'b8\'b7\'ce \'c0\'e5\'c4\'a1 MPU (Cortex-A15) \'c8\'a3\'bd\'ba\'c6\'ae\'b4\'c2 \'c0\'e5\'c4\'a1 \'bd\'c3\'bd\'ba\'c5\'db \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7 \'c1\'f6\'c1\'a4\'b5\'c8 \'c1\'d6\'bc\'d2 \'c0\'a7\'c4\'a1\'bf\'a1 \'c4\'da\'b5\'e5\'b8\'a6\'b7\'ce\'b5\'e5\'c7\'cf\'b0\'ed DSP1_RST_VECT / DSP2_RST_VECT \'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5\'b8\'a6 \'c1\'d6\'bc\'d2 \'b0\'aa\'c0\'b8\'b7\'ce \'bc\'b3\'c1\'a4 \'c7\'d1 \'b4\'d9\'c0\'bd DSP1 / DSP2\'b8\'a6 \'b8\'ae\'bc\'c2\'bf\'a1\'bc\'ad \'c7\'d8\'c1\'a6\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
At that point, the DSP1 / DSP2 will begin fetching code from that location.\par
\'c0\'cc \'bd\'c3\'c1\'a1\'bf\'a1\'bc\'ad DSP1 / DSP2\'b4\'c2 \'c7\'d8\'b4\'e7 \'c0\'a7\'c4\'a1\'bf\'a1\'bc\'ad \'c4\'da\'b5\'e5\'b8\'a6 \'b0\'a1\'c1\'ae \'bf\'c0\'b1\'e2 \'bd\'c3\'c0\'db\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
NOTE: If the values of the control core module CTRL_CORE_CONTROL_DSP1_RST_VECT[21:0] / CTRL_CORE_CONTROL_DSP2_RST_VECT [21:0] register change, the values will be taken into account by DSP upon the next reset.\par
\'c2\'fc\'b0\'ed : \'c1\'a6\'be\'ee \'c4\'da\'be\'ee \'b8\'f0\'b5\'e2 CTRL_CORE_CONTROL_DSP1_RST_VECT [21 : 0] / CTRL_CORE_CONTROL_DSP2_RST_VECT [21 : 0] \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'b0\'aa\'c0\'cc \'ba\'af\'b0\'e6\'b5\'c7\'b8\'e9 \'b4\'d9\'c0\'bd \'c0\'e7\'bc\'b3\'c1\'a4\'bd\'c3 \'b0\'aa\'c0\'cc DSP\'bf\'a1\'bc\'ad \'b0\'ed\'b7\'c1\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
NOTE: Upon device boot time (a power-on reset applied), the device "sysboot15" input latched in\par
the Control Module bootstrap register defines the value of DSP functional clock divider (2 or 3).\par
\'c2\'fc\'b0\'ed : \'c0\'e5\'c4\'a1 \'ba\'ce\'c6\'c3 \'bd\'c3\'b0\'a3 (\'c0\'fc\'bf\'f8 \'c4\'d1\'b1\'e2 \'c0\'e7\'bc\'b3\'c1\'a4 \'c0\'fb\'bf\'eb)\'bf\'a1\'bc\'ad \'c0\'e5\'c4\'a1 "sysboot15"\'c0\'d4\'b7\'c2\'c0\'ba \'b7\'a1\'c4\'a1\'b5\'cb\'b4\'cf\'b4\'d9.\par
\'c1\'a6\'be\'ee \'b8\'f0\'b5\'e2 \'ba\'ce\'c6\'ae \'bd\'ba\'c6\'ae\'b7\'a6 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 DSP \'b1\'e2\'b4\'c9 \'c5\'ac\'b7\'b0 \'ba\'d0\'b9\'e8\'b1\'e2 (2 \'b6\'c7\'b4\'c2 3)\'c0\'c7 \'b0\'aa\'c0\'bb \'c1\'a4\'c0\'c7\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
For more details, refer to the Section 5.3.3.1\par
\'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba 5.3.3.1 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.10 DSP Internal and External Memory Views\par
5.3.10 DSP \'b3\'bb\'ba\'ce \'b9\'d7 \'bf\'dc\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae \'ba\'e4\par
\par
5.3.10.1 C66x CPU View of the Address Space\par
5.3.10.1 C66x CPU\'c0\'c7 \'c1\'d6\'bc\'d2 \'b0\'f8\'b0\'a3\'ba\'b8\'b1\'e2\par
\par
The C66x CPU View represents the view from the DSP, which result from program fetches, or load / store\par
instructions.\par
C66x CPU View\'b4\'c2 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5 \'b0\'a1\'c1\'ae \'bf\'c0\'b1\'e2 \'b6\'c7\'b4\'c2\'b7\'ce\'b5\'e5 / \'c0\'fa\'c0\'e5 \'b8\'ed\'b7\'c9\'be\'ee\'b7\'ce \'c0\'ce\'c7\'d8 DSP\'bf\'a1\'bc\'ad \'ba\'e4\'b8\'a6 \'b3\'aa\'c5\'b8\'b3\'c0\'b4\'cf\'b4\'d9.\par
\par
Accesses to DSP memories (L1P, L1D, L2) and to DSP Internal configuration space (DSP_ICFG ) are intercepted within the DSP C66x CorePac (whether using local or global addresses).\par
DSP \'b8\'de\'b8\'f0\'b8\'ae (L1P, L1D, L2) \'b9\'d7 DSP\'bf\'a1 \'b4\'eb\'c7\'d1 \'be\'d7\'bc\'bc\'bd\'ba \'b3\'bb\'ba\'ce \'b1\'b8\'bc\'ba \'b0\'f8\'b0\'a3 (DSP_ICFG)\'c0\'ba DSP C66x CorePac (\'b7\'ce\'c4\'c3 \'b6\'c7\'b4\'c2 \'b1\'db\'b7\'ce\'b9\'fa \'c1\'d6\'bc\'d2 \'bb\'e7\'bf\'eb \'bf\'a9\'ba\'ce)\'bf\'a1\'bc\'ad \'c0\'ce\'c5\'cd\'bc\'c1\'c6\'ae\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
The DSP C66x CorePac CFG (C66x CPU 32-bit master port) interface is strictly for non-cacheable loads\par
and stores, and is intended to be used for I/O space or memory mapped registers (MMR) space.\par
DSP C66x CorePac CFG (C66x CPU 32 \'ba\'f1\'c6\'ae \'b8\'b6\'bd\'ba\'c5\'cd \'c6\'f7\'c6\'ae) \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b4\'c2 \'c4\'b3\'bd\'c3 \'ba\'d2\'b0\'a1\'b4\'c9\'c7\'d1\'b7\'ce\'b5\'e5 \'b9\'d7 \'c0\'fa\'c0\'e5\'c0\'bb\'c0\'a7\'c7\'d1 \'b0\'cd\'c0\'cc\'b8\'e7 I / O \'b0\'f8\'b0\'a3 \'b6\'c7\'b4\'c2 \'b8\'de\'b8\'f0\'b8\'ae \'b8\'c5\'c7\'ce \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd (MMR) \'b0\'f8\'b0\'a3 \'bf\'eb\'c0\'b8\'b7\'ce \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
DSP C66x CorePac CFG accesses are routed / arbitrated by the DSP_NoC L2 inteconnect.\par
DSP C66x CorePac CFG \'be\'d7\'bc\'bc\'bd\'ba\'b4\'c2 DSP_NoC L2 inteconnect\'bf\'a1 \'c0\'c7\'c7\'d8 \'b6\'f3\'bf\'ec\'c6\'ae / \'c1\'b6\'c1\'a4\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
DSP C66x CorePac CFG accesses are mapped between 0x01C0_0000 and 0x0FFF_FFFF.\par
DSP C66x CorePac CFG \'be\'d7\'bc\'bc\'bd\'ba\'b4\'c2 0x01C0_0000\'b0\'fa 0x0FFF_FFFF \'bb\'e7\'c0\'cc\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
NOTE: The DSP C66x CorePac CFG initiator interface is strictly for non-cacheable loads and stores\par
within MMR and I/O spaces.\par
\'c2\'fc\'b0\'ed : DSP C66x CorePac CFG \'c3\'ca\'b1\'e2 \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b4\'c2 MMR \'b9\'d7 I / O \'b0\'f8\'b0\'a3\'c0\'c7 \'c4\'b3\'bd\'c3 \'ba\'d2\'b0\'a1\'b4\'c9\'c7\'d1 \'ba\'d2\'b7\'af\'bf\'c0\'b1\'e2 \'b9\'d7 \'c0\'fa\'c0\'e5\'bf\'a1 \'be\'f6\'b0\'dd\'c7\'d1 \'b1\'e2\'c1\'d8\'c0\'b8\'b7\'ce\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
DSP configuration accesses to external to DSP subsystem peripherals can be issued on either the DSP\par
subsystem CFG Master port which is mapped to the device L3_MAIN or DSP 32-bit CFG "system" interface is connected to the chip level L3_MAIN interconnect and used to access L3_MAIN addressses that are mapped between 0x01C0_0000 and 0x0FFF_FFFF.\par
DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1\'bf\'a1 \'b4\'eb\'c7\'d1 DSP \'b1\'b8\'bc\'ba \'be\'d7\'bc\'bc\'bd\'ba\'b4\'c2 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b6\'c7\'b4\'c2 \'c0\'e5\'c4\'a1 L3_MAIN \'b6\'c7\'b4\'c2 DSP 32 \'ba\'f1\'c6\'ae CFG "\'bd\'c3\'bd\'ba\'c5\'db"\'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'bf\'a1 \'b8\'c5\'c7\'ce \'b5\'c8 CFG \'b8\'b6\'bd\'ba\'c5\'cd \'c6\'f7\'c6\'ae\'b0\'a1 \'c4\'a8 \'b7\'b9\'ba\'a7 L3_MAIN \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1\'bf\'a1 \'bf\'ac\'b0\'e1\'b5\'c7\'b0\'ed L3_MAIN\'bf\'a1 \'be\'d7\'bc\'bc\'bd\'ba\'c7\'cf\'b4\'c2 \'b5\'a5 \'bb\'e7\'bf\'eb\'b5\'cb\'b4\'cf\'b4\'d9 \'c1\'d6\'bc\'d2\'b4\'c2 0x01C0_0000\'b0\'fa 0x0FFF_FFFF \'bb\'e7\'c0\'cc\'bf\'a1 \'b8\'c5\'c7\'ce\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
DSP accesses (to non-DSP memories like SDRAM on L3_MAIN) for addresses above 0x1000_0000 are handled via the DSP (XMC) MDMA 128-bit master interface and are routed to the DSP subsystem MDMA Initiator port either through DSP_ MMU0 or bypassing MMU.\par
0x1000_0000 \'c0\'cc\'bb\'f3\'c0\'c7 \'c1\'d6\'bc\'d2\'bf\'a1 \'b4\'eb\'c7\'d1 DSP \'be\'d7\'bc\'bc\'bd\'ba (L3_MAIN\'c0\'c7 SDRAM\'b0\'fa \'b0\'b0\'c0\'ba \'ba\'f1 DSP \'b8\'de\'b8\'f0\'b8\'ae\'b7\'ce)\'b4\'c2 DSP (XMC) MDMA 128 \'ba\'f1\'c6\'ae \'b8\'b6\'bd\'ba\'c5\'cd \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 \'c5\'eb\'c7\'d8 \'c3\'b3\'b8\'ae\'b5\'c7\'b8\'e7 DSP_ MMU0 \'b6\'c7\'b4\'c2 \'bf\'ec\'c8\'b8 MMU\'b8\'a6 \'c5\'eb\'c7\'d8 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db MDMA \'c3\'ca\'b1\'e2 \'c0\'da \'c6\'f7\'c6\'ae\'b7\'ce \'b6\'f3\'bf\'ec\'c6\'c3\'b5\'cb\'b4\'cf\'b4\'d9.\par
\par
NOTE: In some cases, L3_MAIN peripherals may be mapped to both the MDMA bus and the CFG bus.\par
\'c2\'fc\'b0\'ed : \'b0\'e6\'bf\'ec\'bf\'a1 \'b5\'fb\'b6\'f3 L3_MAIN \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1\'b0\'a1 MDMA \'b9\'f6\'bd\'ba\'bf\'cd CFG \'b9\'f6\'bd\'ba\'bf\'a1 \'b8\'f0\'b5\'ce \'b8\'c5\'c7\'ce \'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
In that case, there may be a latency advantage of using the CFG address for those peripherals Table 5-9 shows the DSP C66x CPU memory view of the various DSP C66x CorePac internal and external resources.\par
\'c0\'cc \'b0\'e6\'bf\'ec \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1\'bf\'a1 CFG \'c1\'d6\'bc\'d2\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'cf\'b8\'e9 \'b4\'eb\'b1\'e2 \'bd\'c3\'b0\'a3 \'c0\'cc\'c1\'a1\'c0\'cc\'c0\'d6\'c0\'bb \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9. \'c7\'a5 5-9\'b4\'c2 \'b4\'d9\'be\'e7\'c7\'d1 DSP C66x CorePac \'b3\'bb\'ba\'ce \'b9\'d7 \'bf\'dc\'ba\'ce \'b8\'ae\'bc\'d2\'bd\'ba\'c0\'c7 DSP C66x CPU \'b8\'de\'b8\'f0\'b8\'ae\'ba\'b8\'b1\'e2\'b8\'a6 \'ba\'b8\'bf\'a9\'c1\'dd\'b4\'cf\'b4\'d9.\par
\par
Refer to the Section 2.2, L3_MAIN Memory Space Mapping, in the chapter, Memory Mapping, for the addresses of the L3_MAIN space memory-mapped registers.\par
L3_MAIN \'b0\'f8\'b0\'a3 \'b8\'de\'b8\'f0\'b8\'ae \'b8\'ca \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'c1\'d6\'bc\'d2\'b4\'c2 \'b8\'de\'b8\'f0\'b8\'ae \'b8\'ca\'c7\'ce \'c0\'e5\'c0\'c7 L3_MAIN \'b8\'de\'b8\'f0\'b8\'ae \'b0\'f8\'b0\'a3 \'b8\'ca\'c7\'ce 2.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
Refer to the Section 2.6, DSP Subsystem Memory Space Mapping in the same chapter for a description of the DSP1 and DSP2 internal memory, additional memory, and peripherals that the DSP1 and DSP2 have access to.\par
DSP1 \'b9\'d7 DSP2 \'b3\'bb\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae, \'c3\'df\'b0\'a1 \'b8\'de\'b8\'f0\'b8\'ae \'b9\'d7 DSP1 \'b9\'d7 DSP2\'b0\'a1 \'be\'d7\'bc\'bc\'bd\'ba \'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'c2 \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1\'bf\'a1 \'b4\'eb\'c7\'d1 \'bc\'b3\'b8\'ed\'c0\'ba \'bc\'bd\'bc\'c7 2.6, DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b8\'de\'b8\'f0\'b8\'ae \'b0\'f8\'b0\'a3 \'b8\'c5\'c7\'ce\'c0\'bb \'b5\'bf\'c0\'cf\'c7\'d1 \'c0\'e5\'bf\'a1\'bc\'ad \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.3.10.3 L3_MAIN View of the DSP Address Space\par
5.3.10.3 DSP \'c1\'d6\'bc\'d2 \'b0\'f8\'b0\'a3\'c0\'c7 L3_MAIN\'ba\'b8\'b1\'e2\par
\par
System initiated accesses (i.e. external-to-DSP accesses over device L3_MAIN) to DSP are issued over\par
the DSP SDMA target port.\par
DSP\'bf\'a1 \'b4\'eb\'c7\'d1 \'bd\'c3\'bd\'ba\'c5\'db \'b0\'b3\'bd\'c3 \'be\'d7\'bc\'bc\'bd\'ba (\'c1\'ef, \'c0\'e5\'c4\'a1 L3_MAIN\'c0\'bb \'c5\'eb\'c7\'d1 \'bf\'dc\'ba\'ce - DSP \'be\'d7\'bc\'bc\'bd\'ba)\'b4\'c2 DSP SDMA \'c5\'b8\'b0\'d9 \'c6\'f7\'c6\'ae\'b8\'a6 \'c5\'eb\'c7\'d8 \'b9\'df\'c7\'e0\'b5\'c8\'b4\'d9.\par
\par
NOTE: The MSB-bits of the address are truncated to only provide an 8 MiB view of the memory map\par
within the DSP subsystem.\par
\'c2\'fc\'b0\'ed : \'c1\'d6\'bc\'d2\'c0\'c7 MSB \'ba\'f1\'c6\'ae\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'b3\'bb\'bf\'a1\'bc\'ad \'b8\'de\'b8\'f0\'b8\'ae \'b8\'ca\'c0\'c7 8 MiB\'ba\'b8\'b1\'e2 \'b8\'b8 \'c1\'a6\'b0\'f8\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 \'c0\'df\'b8\'b3\'b4\'cf\'b4\'d9.\par
\par
 Notice that the relative offsets of the DSP CFG space is different for the OCP SDMA target port relative to the DSP internal initiators.\par
 DSP CFG \'b0\'f8\'b0\'a3\'c0\'c7 \'bb\'f3\'b4\'eb\'c0\'fb \'bf\'c0\'c7\'c1\'bc\'c2\'c0\'ba DSP \'b3\'bb\'ba\'ce \'c0\'cc\'b4\'cf\'bd\'c3\'bf\'a1\'c0\'cc\'c5\'cd\'b8\'a6 \'b1\'e2\'c1\'d8\'c0\'b8\'b7\'ce OCP SDMA \'b4\'eb\'bb\'f3 \'c6\'f7\'c6\'ae\'bf\'a1 \'b5\'fb\'b6\'f3 \'b4\'d9\'b8\'a8\'b4\'cf\'b4\'d9.\par
\par
The SDMA target bus is able to access internal subsystem address space (such as DSP_EDMA,\par
DSP_MMU0, DPS_MMU1, etc.), or the DSP local memory address space.\par
SDMA \'b4\'eb\'bb\'f3 \'b9\'f6\'bd\'ba\'b4\'c2 \'b3\'bb\'ba\'ce \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'c1\'d6\'bc\'d2 \'b0\'f8\'b0\'a3 (\'bf\'b9 : DSP_EDMA, DSP_MMU0, DPS_MMU1 \'b5\'ee) \'b6\'c7\'b4\'c2 DSP \'b7\'ce\'c4\'c3 \'b8\'de\'b8\'f0\'b8\'ae \'c1\'d6\'bc\'d2 \'b0\'f8\'b0\'a3\'bf\'a1 \'be\'d7\'bc\'bc\'bd\'ba \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
 The SDMA target bus is NOT able to access the DSP ICFG space (such as DSP_INTC, DSP_BWM, etc) or the other initiator ports on the DSP subsystem boundary (i.e., accesses cannot go through DSPSS to get to the DSP_EDMA initiator port, L3_MAIN CFG initiator port ).\par
SDMA \'b4\'eb\'bb\'f3 \'b9\'f6\'bd\'ba\'b4\'c2 DSP_INTC, DSP_BWM \'b5\'ee\'b0\'fa \'b0\'b0\'c0\'ba DSP ICFG \'b0\'f8\'b0\'a3 \'b6\'c7\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db \'b0\'e6\'b0\'e8\'c0\'c7 \'b4\'d9\'b8\'a5 \'c0\'cc\'b4\'cf\'bd\'c3\'bf\'a1\'c0\'cc\'c5\'cd \'c6\'f7\'c6\'ae\'bf\'a1 \'be\'d7\'bc\'bc\'bd\'ba \'c7\'d2 \'bc\'f6 \'be\'f8\'bd\'c0\'b4\'cf\'b4\'d9 (\'c1\'ef, DSP_EDMA \'b0\'b3\'bd\'c3 \'c0\'da \'c6\'f7\'c6\'ae, L3_MAIN CFG\'bf\'a1 \'be\'d7\'bc\'bc\'bd\'ba\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 DSPSS\'b8\'a6 \'c5\'eb\'b0\'fa \'c7\'d2 \'bc\'f6 \'be\'f8\'c0\'bd) \'b0\'b3\'bd\'c3 \'c0\'da \'c6\'f7\'c6\'ae).\par
\par
The DSP slave DMA port memory map - Table 5-11 shows an 8 MiB window (23-bit address) both from\par
the SDMA Target bus (0x0000_0000 through 0x007F_FFFF), as well as the EDMA (0x0080_0000 through\par
0x00FF_FFFF).\par
DSP \'bd\'bd\'b7\'b9\'c0\'cc\'ba\'ea DMA \'c6\'f7\'c6\'ae \'b8\'de\'b8\'f0\'b8\'ae \'b8\'ca - \'c7\'a5 5-11\'c0\'ba SDMA \'b4\'eb\'bb\'f3 \'b9\'f6\'bd\'ba (0x0000_0000 ~ 0x007F_FFFF)\'bf\'cd EDMA (0x0080_0000 ~ 0x00FF_FFFF) \'b8\'f0\'b5\'ce\'bf\'a1\'bc\'ad 8 MiB \'c3\'a2 (23 \'ba\'f1\'c6\'ae \'c1\'d6\'bc\'d2)\'c0\'bb \'ba\'b8\'bf\'a9\'c1\'dd\'b4\'cf\'b4\'d9.\par
\par
 The DSP C66x CorePac internally views itself as a 16 MiB window where 0x0000_0000 through 0x007F_FFFF is reserved, L2 SRAM starts at 0x0080_0000, L1P SRAM starts at 0x00E0_0000, and L1D SRAM starts at 0x00F0_0000).\par
DSP C66x CorePac\'c0\'ba \'b3\'bb\'ba\'ce\'c0\'fb\'c0\'b8\'b7\'ce 0x0000_0000\'bf\'a1\'bc\'ad 0x007F_FFFF\'b1\'ee\'c1\'f6 \'bf\'b9\'be\'e0\'b5\'c7\'b0\'ed L2 SRAM\'c0\'ba 0x0080_0000\'bf\'a1\'bc\'ad \'bd\'c3\'c0\'db\'c7\'cf\'b8\'e7 L1P SRAM\'c0\'ba 0x00E0_0000\'bf\'a1\'bc\'ad \'bd\'c3\'c0\'db\'c7\'cf\'b0\'ed L1D SRAM\'c0\'ba 0x00F0_0000\'bf\'a1\'bc\'ad \'bd\'c3\'c0\'db\'c7\'cf\'b4\'c2 16 MiB \'c3\'a2\'c0\'b8\'b7\'ce \'b3\'bb\'ba\'ce\'c0\'fb\'c0\'b8\'b7\'ce \'b0\'a3\'c1\'d6\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
Refer to the Section 2.2, L3_MAIN Memory Space Mapping, in the chapter, Memory Mapping, for the\par
addresses of the L3_MAIN space memory-mapped registers.\par
L3_MAIN \'b0\'f8\'b0\'a3 \'b8\'de\'b8\'f0\'b8\'ae \'b8\'ca \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'c1\'d6\'bc\'d2\'b4\'c2 \'b8\'de\'b8\'f0\'b8\'ae \'b8\'ca\'c7\'ce \'c0\'e5\'c0\'c7 L3_MAIN \'b8\'de\'b8\'f0\'b8\'ae \'b0\'f8\'b0\'a3 \'b8\'ca\'c7\'ce 2.2 \'c0\'fd\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
Refer to the Section 2.6, DSP Subsystem Memory Space Mapping in the same chapter for a description of the DSP1 and DSP2 internal memory, additional memory, and peripherals that the DSP1 and DSP2 have access to.\par
DSP1 \'b9\'d7 DSP2 \'b3\'bb\'ba\'ce \'b8\'de\'b8\'f0\'b8\'ae, \'c3\'df\'b0\'a1 \'b8\'de\'b8\'f0\'b8\'ae \'b9\'d7 DSP1 \'b9\'d7 DSP2\'b0\'a1 \'be\'d7\'bc\'bc\'bd\'ba \'c7\'d2 \'bc\'f6\'c0\'d6\'b4\'c2 \'c1\'d6\'ba\'af \'c0\'e5\'c4\'a1\'bf\'a1 \'b4\'eb\'c7\'d1 \'bc\'b3\'b8\'ed\'c0\'ba \'bc\'bd\'bc\'c7 2.6, DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b8\'de\'b8\'f0\'b8\'ae \'b0\'f8\'b0\'a3 \'b8\'c5\'c7\'ce\'c0\'bb \'b5\'bf\'c0\'cf\'c7\'d1 \'c0\'e5\'bf\'a1\'bc\'ad \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.4 DSP Subsystem Register Manual\par
5.4 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'b8\'c5\'b4\'ba\'be\'f3\par
\par
This section describes the DSP Subsystem instances registers.\par
\'c0\'cc \'c0\'fd\'bf\'a1\'bc\'ad\'b4\'c2 DSP \'bc\'ad\'ba\'ea \'bd\'c3\'bd\'ba\'c5\'db \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d8 \'bc\'b3\'b8\'ed\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.4.1 DSP Subsystem Instance Summary\par
5.4.1 DSP \'c7\'cf\'ba\'ce \'c1\'b6\'c1\'f7 \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba \'bf\'e4\'be\'e0\par
\par
NOTE: For more details on the DSP_MMU0 and DSP_MMU1 registers, as well as their :\par
\'c2\'fc\'b0\'ed : DSP_MMU0 \'b9\'d7 DSP_MMU1 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'b9\'b0\'b7\'d0 :\par
\par
\bullet DSP_MMU0CFG and DSP_MMU1CFG physical addresses accesible only by DSP_C0 CPU core in the DSP subsystem\par
\bullet  DSP_MMU0CFG \'b9\'d7 DSP_MMU1CFG \'b9\'b0\'b8\'ae \'c1\'d6\'bc\'d2\'b4\'c2 DSP \'c7\'cf\'c0\'a7 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7 DSP_C0 CPU \'c4\'da\'be\'ee\'bf\'a1\'bc\'ad\'b8\'b8 \'be\'d7\'bc\'bc\'bd\'ba \'b0\'a1\'b4\'c9\par
\par
\bullet DSP1_MMU0CFG and DSP1_MMU1CFG physical addresses visible on L3_MAIN\par
\bullet  L3_MAIN\'bf\'a1\'bc\'ad \'ba\'bc \'bc\'f6\'c0\'d6\'b4\'c2 DSP1_MMU0CFG \'b9\'d7 DSP1_MMU1CFG \'b9\'b0\'b8\'ae\'c0\'fb \'c1\'d6\'bc\'d2\par
\par
\bullet DSP2_MMU0CFG and DSP2_MMU1CFG physical addresses visible on L3_MAIN\par
\bullet  L3_MAIN\'bf\'a1\'bc\'ad \'ba\'bc \'bc\'f6\'c0\'d6\'b4\'c2 DSP2_MMU0CFG \'b9\'d7 DSP2_MMU1CFG \'b9\'b0\'b8\'ae\'c0\'fb \'c1\'d6\'bc\'d2\par
\par
refer to Section 20.5, MMU Register Manual, in Chapter 20, Memory Management Units.\par
20 \'c0\'e5, MMU \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'b8\'c5\'b4\'ba\'be\'f3, 20 \'c0\'e5, \'b8\'de\'b8\'f0\'b8\'ae \'b0\'fc\'b8\'ae \'c0\'af\'b4\'d6\'c0\'bb \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
NOTE: For more details on the DSP_EDMA_CC, DSP_EDMA_TC0 and DSP_EDMA_TC1 registers,\par
as well as their :\par
\'c2\'fc\'b0\'ed : DSP_EDMA_CC, DSP_EDMA_TC0 \'b9\'d7 DSP_EDMA_TC1 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d1 \'c0\'da\'bc\'bc\'c7\'d1 \'b3\'bb\'bf\'eb\'c0\'ba \'b9\'b0\'b7\'d0 :\par
\par
\bullet  DSP1_EDMA_CC, DSP1_EDMA_TC0 and DSP1_EDMA_TC1 physical addresses visible on L3_MAIN\par
\bullet  L3_MAIN\'bf\'a1\'bc\'ad \'ba\'bc \'bc\'f6\'c0\'d6\'b4\'c2 DSP1_EDMA_CC, DSP1_EDMA_TC0 \'b9\'d7 DSP1_EDMA_TC1 \'b9\'b0\'b8\'ae\'c0\'fb \'c1\'d6\'bc\'d2\par
\par
\bullet  DSP2_EDMA_CC, DSP2_EDMA_TC0 and DSP2_EDMA_TC1 physical addresses visible on L3_MAIN\par
\bullet  L3_MAIN\'bf\'a1\'bc\'ad \'ba\'bc \'bc\'f6\'c0\'d6\'b4\'c2 DSP2_EDMA_CC, DSP2_EDMA_TC0 \'b9\'d7 DSP2_EDMA_TC1 \'b9\'b0\'b8\'ae\'c0\'fb \'c1\'d6\'bc\'d2\par
\par
refer to Section 16.2.8, EDMA Register Manual, in Section 16.2, Enhanced DMA.\par
\'bc\'bd\'bc\'c7 16.2.8, EDMA \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'b8\'c5\'b4\'ba\'be\'f3, \'bc\'bd\'bc\'c7 16.2, \'c7\'e2\'bb\'f3\'b5\'c8 DMA\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
CAUTION\par
The L1P,L1D and L2- memory controller registers mapped in the L3_MAIN are limited to 32-bit data access; 16- and 8-bit access are not allowed and can corrupt register content.\par
\'c1\'d6\'c0\'c7\par
L3_MAIN\'bf\'a1 \'b8\'c5\'c7\'ce \'b5\'c8 L1P, L1D \'b9\'d7 L2- \'b8\'de\'b8\'f0\'b8\'ae \'c4\'c1\'c6\'ae\'b7\'d1\'b7\'af \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'b4\'c2 32 \'ba\'f1\'c6\'ae \'b5\'a5\'c0\'cc\'c5\'cd \'be\'d7\'bc\'bc\'bd\'ba\'b7\'ce \'c1\'a6\'c7\'d1\'b5\'cb\'b4\'cf\'b4\'d9. 16 \'ba\'f1\'c6\'ae \'b9\'d7 8 \'ba\'f1\'c6\'ae \'be\'d7\'bc\'bc\'bd\'ba\'b4\'c2 \'c7\'e3\'bf\'eb\'b5\'c7\'c1\'f6 \'be\'ca\'c0\'b8\'b8\'e7 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'b3\'bb\'bf\'eb\'c0\'cc \'bc\'d5\'bb\'f3 \'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
5.4.2 DSP_ICFG Registers\par
5.4.2.1 DSP_ICFG Register Summary\par
NOTE: The DSP_ICFG addresses are visible only within the DSP core internal configuration space.\par
5.4.2 DSP_ICFG \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\par
5.4.2.1 DSP_ICFG \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'bf\'e4\'be\'e0\par
\'c2\'fc\'b0\'ed : DSP_ICFG \'c1\'d6\'bc\'d2\'b4\'c2 DSP \'c4\'da\'be\'ee \'b3\'bb\'ba\'ce \'b1\'b8\'bc\'ba \'b0\'f8\'b0\'a3\'bf\'a1\'bc\'ad\'b8\'b8 \'ba\'bc \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
5.4.2.2 DSP_ICFG Register Description\par
5.4.2.2 DSP_ICFG \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'bc\'b3\'b8\'ed\par
For bitfield descriptions of all registers which reside within the DSP_ICFG configuration address space, refer to the TMS320C66x DSP CorePac User Guide, ( SPRUGW0C).\par
DSP_ICFG \'b1\'b8\'bc\'ba \'c1\'d6\'bc\'d2 \'b0\'f8\'b0\'a3\'bf\'a1 \'bb\'f3\'c1\'d6\'c7\'cf\'b4\'c2 \'b8\'f0\'b5\'e7 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'c0\'c7 \'ba\'f1\'c6\'ae \'c7\'ca\'b5\'e5 \'bc\'b3\'b8\'ed\'c0\'ba TMS320C66x DSP CorePac \'bb\'e7\'bf\'eb\'c0\'da \'be\'c8\'b3\'bb\'bc\'ad (SPRUGW0C)\'b8\'a6 \'c2\'fc\'c1\'b6\'c7\'cf\'bd\'ca\'bd\'c3\'bf\'c0.\par
\par
5.4.3 DSP_SYSTEM Registers\par
5.4.3 DSP_SYSTEM \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\par
\par
5.4.3.1 DSP_SYSTEM Register Summary\par
5.4.3.1 DSP_SYSTEM \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'bf\'e4\'be\'e0\par
\par
NOTE: While the DSP1_SYSTEM and DSP2_SYSTEM addresses are part of the device L3_MAIN memory space, the DSP_SYSTEM addresses are visible only within the DSP_ICFG internal configuration space (visible only to C66x CPU and debug logic).\par
\'c2\'fc\'b0\'ed : DSP1_SYSTEM \'b9\'d7 DSP2_SYSTEM \'c1\'d6\'bc\'d2\'b4\'c2 \'c0\'e5\'c4\'a1 L3_MAIN \'b8\'de\'b8\'f0\'b8\'ae \'b0\'f8\'b0\'a3\'c0\'c7 \'c0\'cf\'ba\'ce\'c0\'cc\'c1\'f6\'b8\'b8 DSP_SYSTEM \'c1\'d6\'bc\'d2\'b4\'c2 DSP_ICFG \'b3\'bb\'ba\'ce \'b1\'b8\'bc\'ba \'b0\'f8\'b0\'a3 (C66x CPU \'b9\'d7 \'b5\'f0\'b9\'f6\'b1\'d7 \'b3\'ed\'b8\'ae\'bf\'a1\'b8\'b8 \'c7\'a5\'bd\'c3) \'b3\'bb\'bf\'a1\'bc\'ad\'b8\'b8 \'ba\'bc \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
\par
5.4.3.2 DSP_SYSTEM Register Description\par
5.4.3.2 DSP_SYSTEM \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'bc\'b3\'b8\'ed\par
\'c5\'d7\'c0\'cc\'ba\'ed \'b8\'b8\'c0\'d6\'b4\'d9.\par
\par
5.4.4 DSP_FW_L2_NOC_CFG Registers\par
5.4.4 DSP_FW_L2_NOC_CFG \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\par
\par
This section covers the DSPSS level defined public firewall (DSP_MMU0, DSP_MMU1) and L2\par
interconnect (DSP_NoC) functional registers.\par
\'c0\'cc \'bc\'bd\'bc\'c7\'bf\'a1\'bc\'ad\'b4\'c2 DSPSS \'b7\'b9\'ba\'a7\'b7\'ce \'c1\'a4\'c0\'c7 \'b5\'c8 \'b0\'f8\'bf\'eb \'b9\'e6\'c8\'ad\'ba\'ae (DSP_MMU0, DSP_MMU1) \'b9\'d7 L2 \'bb\'f3\'c8\'a3 \'bf\'ac\'b0\'e1 (DSP_NoC) \'b1\'e2\'b4\'c9 \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd\'bf\'a1 \'b4\'eb\'c7\'d8 \'bc\'b3\'b8\'ed\'c7\'d5\'b4\'cf\'b4\'d9.\par
\par
5.4.4.1 DSP_FW_L2_NOC_CFG Register Summary\par
5.4.4.1 DSP_FW_L2_NOC_CFG \'b7\'b9\'c1\'f6\'bd\'ba\'c5\'cd \'bf\'e4\'be\'e0\par
\par
NOTE: While the DSP1_FW_L2_NOC_CFG and DSP2_FW_L2_NOC_CFG addresses are part of the device L3_MAIN memory space, the DSP_FW_L2_NOC_CFG addresses are visible only within the DSP_ICFG internal configuration space (visible only to C66x CPU and debug logic).\par
\'c2\'fc\'b0\'ed : DSP1_FW_L2_NOC_CFG \'b9\'d7 DSP2_FW_L2_NOC_CFG \'c1\'d6\'bc\'d2\'b4\'c2 \'c0\'e5\'c4\'a1 L3_MAIN \'b8\'de\'b8\'f0\'b8\'ae \'b0\'f8\'b0\'a3\'c0\'c7 \'c0\'cf\'ba\'ce\'c0\'cc\'c1\'f6\'b8\'b8 DSP_FW_L2_NOC_CFG \'c1\'d6\'bc\'d2\'b4\'c2 DSP_ICFG \'b3\'bb\'ba\'ce \'b1\'b8\'bc\'ba \'b0\'f8\'b0\'a3 (C66x CPU \'b9\'d7 \'b5\'f0\'b9\'f6\'b1\'d7 \'b3\'ed\'b8\'ae\'bf\'a1\'b8\'b8 \'c7\'a5\'bd\'c3)\'bf\'a1\'bc\'ad\'b8\'b8 \'ba\'bc \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\par
}
 